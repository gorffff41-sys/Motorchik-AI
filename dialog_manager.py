# –í–ê–ñ–ù–û: –ù–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏—á–µ–≥–æ –∏–∑ app.py, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!
import json
from database import CacheManager, get_car_options, get_full_car_info, compare_cars, filter_cars, get_all_brands, get_all_models, get_dealer_centers_for_car, get_dealer_center_info_by_code, smart_filter_cars, get_all_dealer_centers
from nlp_processor import NLPProcessor, extract_down_payment, extract_term, extract_price, extract_year, extract_mileage, extract_contact, extract_date, extract_price_range, extract_year_range, extract_city
import sqlite3
from user_history import UserHistory

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –º–æ–¥–µ–ª–µ–π –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ ---
MODEL_SYNONYMS = {
    # BMW
    'x5': ['x5', '5 —Å–µ—Ä–∏–∏', '5 —Å–µ—Ä–∏—è', '5 series'],
    '5 —Å–µ—Ä–∏–∏': ['5 —Å–µ—Ä–∏–∏', '5 —Å–µ—Ä–∏—è', 'x5', '5 series'],
    '5 —Å–µ—Ä–∏—è': ['5 —Å–µ—Ä–∏—è', '5 —Å–µ—Ä–∏–∏', 'x5', '5 series'],
    'x3': ['x3', '3 —Å–µ—Ä–∏–∏', '3 —Å–µ—Ä–∏—è', '3 series'],
    'x6': ['x6', '6 —Å–µ—Ä–∏–∏', '6 —Å–µ—Ä–∏—è', '6 series'],
    'x4': ['x4', '4 —Å–µ—Ä–∏–∏', '4 —Å–µ—Ä–∏—è', '4 series'],
    'x7': ['x7', '7 —Å–µ—Ä–∏–∏', '7 —Å–µ—Ä–∏—è', '7 series'],
    # Mercedes
    'e-class': ['e-class', 'e –∫–ª–∞—Å—Å', 'e–∫–ª–∞—Å—Å', 'e class', 'e200', 'e220', 'e300', 'e350', 'e400', 'e450', 'e500'],
    'c-class': ['c-class', 'c –∫–ª–∞—Å—Å', 'c–∫–ª–∞—Å—Å', 'c class', 'c180', 'c200', 'c220', 'c250', 'c300', 'c350'],
    # Audi
    'a4': ['a4', '–∞4', 'a 4', '–∞ 4'],
    'a6': ['a6', '–∞6', 'a 6', '–∞ 6'],
    'q5': ['q5', '–∫5', 'q 5', '–∫ 5'],
    # ... –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –¥–ª—è –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
}

def get_model_synonyms_universal(model):
    if not model:
        return []
    key = str(model).lower().replace(' ', '')
    for canon, syns in MODEL_SYNONYMS.items():
        if key in [s.replace(' ', '') for s in syns]:
            return syns
    return [model]

class DialogManager:
    def __init__(self):
        self.cache = CacheManager()
        self.nlp = NLPProcessor()

    def handle_query(self, user_id: str, query: str) -> str:
        try:
            cached = self.cache.get_simple_cache(query)
            if cached:
                return cached

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context = self.cache.get_context(user_id)

            # NLP –æ–±—Ä–∞–±–æ—Ç–∫–∞
            nlp_result = self.nlp.process_query(query)
            intent = nlp_result.get("intent")
            entities = {**context.get("entities", {}), **nlp_result.get("entities", {})}
            context.update({
                "intent": intent,
                "entities": entities,
                "step": context.get("step", 0) + 1
            })

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.cache.save_context(user_id, context)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ intent-–æ–≤
            if intent in ("car_info", "options", "photo", "info"):
                brand = entities.get("brand")
                model = entities.get("model")
                used = entities.get("state") == "used"
                
                if not brand and not model:
                    return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç."
                
                car = get_full_car_info(brand, model, used=used)
                if not car:
                    return f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {brand or ''} {model or ''}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å."
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
                info = f"–ú–∞—Ä–∫–∞: {car.get('mark')}, –ú–æ–¥–µ–ª—å: {car.get('model')}, –ì–æ–¥: {car.get('manufacture_year')}, –¶–µ–Ω–∞: {car.get('price')} —Ä—É–±, –¢–æ–ø–ª–∏–≤–æ: {car.get('fuel_type')}, –ú–æ—â–Ω–æ—Å—Ç—å: {car.get('power')} –ª.—Å., –ö–æ—Ä–æ–±–∫–∞: {car.get('gear_box_type')}, –ö—É–∑–æ–≤: {car.get('body_type')}, –ì–æ—Ä–æ–¥: {car.get('city')}"
                options = car.get('options', [])
                pics = car.get('pictures', [])
                result = [info]
                if options:
                    result.append("\n–û–ø—Ü–∏–∏:")
                    for opt in options:
                        result.append(f"- {opt['description']}")
                if pics:
                    result.append("\n–§–æ—Ç–æ:")
                    for pic in pics[:3]:
                        result.append(f"{pic['url']}")
                return "\n".join(result)

            # COMPARE
            if intent == "compare":
                # –û–∂–∏–¥–∞–µ–º entities["cars"] = —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π {brand, model, used}
                cars_to_compare = entities.get("cars")
                if not cars_to_compare:
                    return "üîç –£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å—Ä–∞–≤–Ω–∏—Ç—å (–º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å). –ù–∞–ø—Ä–∏–º–µ—Ä: '—Å—Ä–∞–≤–Ω–∏ BMW X5 –∏ Mercedes GLE'"
                infos = compare_cars(cars_to_compare)
                if not infos:
                    return "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
                result = ["üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:"]
                for car in infos:
                    info = f"üöó {car.get('mark')} {car.get('model')} ({car.get('manufacture_year')}), üí∞ {car.get('price')} —Ä—É–±, ‚õΩ {car.get('fuel_type')}, üèéÔ∏è {car.get('power')} –ª.—Å., üöô {car.get('body_type')}"
                    result.append(info)
                return "\n".join(result)

            # RECOMMENDATIONS
            if intent == "recommendations":
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    with sqlite3.connect('instance/cars.db') as conn:
                        cursor = conn.cursor()
                        
                        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                        cursor.execute("""
                            SELECT * FROM car 
                            ORDER BY RANDOM() 
                    
                        """)
                        
                        cars = cursor.fetchall()
                        if cars:
                            result = ["üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:"]
                            for car in cars:
                                info = f"üöó {car[1]} {car[2]} ({car[3]}), üí∞ {car[4]} —Ä—É–±"
                                result.append(info)
                            return "\n".join(result)
                        else:
                            return "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
                except Exception as e:
                    return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

            # FILTER
            if intent == "filter":
                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ –≥–æ—Ä–æ–¥
                text = query
                price_min, price_max = extract_price_range(text)
                year_min, year_max = extract_year_range(text)
                # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –ë–î (–∏–ª–∏ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
                city_list = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"]
                city = extract_city(text, city_list)
                filtered = filter_cars(
                    brand=entities.get("brand"),
                    model=entities.get("model"),
                    year=year_min if year_min else entities.get("year"),
                    price_min=price_min,
                    price_max=price_max,
                    city=city if city else entities.get("city"),
                    body_type=entities.get("body_type"),
                    used=entities.get("state") == "used"
                )
                if not filtered:
                    return "üîç –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã."
                result = [f"üìã –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(filtered)}"]
                for car in filtered[:5]:
                    info = f"üöó {car.get('mark')} {car.get('model')} ({car.get('manufacture_year')}), üí∞ {car.get('price')} —Ä—É–±, ‚õΩ {car.get('fuel_type')}, üèéÔ∏è {car.get('power')} –ª.—Å., üöô {car.get('body_type')}"
                    result.append(info)
                if len(filtered) > 5:
                    result.append("...–∏ –¥—Ä—É–≥–∏–µ")
                return "\n".join(result)

            # LIST_BRANDS
            if intent == "list_brands":
                brands = get_all_brands()
                return "üè∑Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã:\n" + ", ".join(brands)

            # LIST_MODELS
            if intent == "list_models":
                models = get_all_models()
                return "üöó –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n" + ", ".join(models)

            # LOAN
            if intent == "loan":
                required = ["price", "down_payment", "term"]
                missing = [p for p in required if not entities.get(p)]
                # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
                if missing:
                    text = query
                    if "price" in missing:
                        price = extract_price(text)
                        if price:
                            entities["price"] = price
                    if "down_payment" in missing:
                        down = extract_down_payment(text)
                        if down:
                            entities["down_payment"] = down
                    if "term" in missing:
                        term = extract_term(text)
                        if term:
                            entities["term"] = term
                    # –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å
                    missing = [p for p in required if not entities.get(p)]
                    if missing:
                        context["entities"] = entities
                        self.cache.save_context(user_id, context)
                        return f"üí∞ –î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞ —É–∫–∞–∂–∏—Ç–µ: {', '.join(missing)}"
                price = float(entities["price"])
                down = float(entities["down_payment"])
                term = int(entities["term"])
                rate = 0.12
                loan_sum = price - down
                monthly = int((loan_sum * (rate/12) * (1 + rate/12)**(term*12)) / ((1 + rate/12)**(term*12) - 1))
                return f"üí∞ –í–∞—à –ø–ª–∞—Ç—ë–∂: {monthly:,} —Ä—É–±/–º–µ—Å. –û—Ñ–æ—Ä–º–ª—è–µ–º –∑–∞—è–≤–∫—É? üìù"

            # TEST_DRIVE
            if intent == "test_drive":
                required = ["brand", "model", "date", "contact"]
                missing = [p for p in required if not entities.get(p)]
                if missing:
                    text = query
                    if "date" in missing:
                        date = extract_date(text)
                        if date:
                            entities["date"] = date
                    if "contact" in missing:
                        contact = extract_contact(text)
                        if contact:
                            entities["contact"] = contact
                    missing = [p for p in required if not entities.get(p)]
                    if missing:
                        context["entities"] = entities
                        self.cache.save_context(user_id, context)
                        return f"üéØ –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ —É–∫–∞–∂–∏—Ç–µ: {', '.join(missing)}"
                return f"‚úÖ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ {entities['brand']} {entities['model']} –Ω–∞ {entities['date']}. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ {entities['contact']}! üìû"

            # TRADE_IN
            if intent == "trade_in":
                required = ["brand", "model", "year", "mileage"]
                missing = [p for p in required if not entities.get(p)]
                if missing:
                    text = query
                    if "year" in missing:
                        year = extract_year(text)
                        if year:
                            entities["year"] = year
                    if "mileage" in missing:
                        mileage = extract_mileage(text)
                        if mileage:
                            entities["mileage"] = mileage
                    missing = [p for p in required if not entities.get(p)]
                    if missing:
                        context["entities"] = entities
                        self.cache.save_context(user_id, context)
                        return f"üîÑ –î–ª—è –æ—Ü–µ–Ω–∫–∏ trade-in —É–∫–∞–∂–∏—Ç–µ: {', '.join(missing)}"
                price = 500_000  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç
                return f"üí∞ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –≤–∞—à–µ–≥–æ {entities['brand']} {entities['model']} {entities['year']} ‚Äî {price:,} —Ä—É–±. –ñ–¥—ë–º –≤–∞—Å –Ω–∞ –æ—Å–º–æ—Ç—Ä! üîç"

            # DEALER_CENTER
            if intent == "dealer_center":
                brand = entities.get("brand")
                model = entities.get("model")
                city = entities.get("city")
                used = entities.get("state") == "used"
                # --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –±—Ä–µ–Ω–¥, –∏—â–µ–º –¥–∏–ª–µ—Ä–æ–≤ –ø–æ –±—Ä–µ–Ω–¥—É –∏ –≥–æ—Ä–æ–¥—É ---
                if brand and not model:
                    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥: –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏, –∏–Ω–∞—á–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º
                    user_city = city or context.get('entities', {}).get('city')
                    if not user_city:
                        return "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å? –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–π –¥–∏–ª–µ—Ä—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä."
                    from database import get_all_dealer_centers
                    all_dealers = get_all_dealer_centers(user_city)
                    filtered = [d for d in all_dealers if d.get('brands') and brand.lower() in d['brands'].lower()]
                    if not filtered:
                        return f"‚ùå –ù–µ—Ç –¥–∏–ª–µ—Ä–æ–≤ {brand} –≤ –≥–æ—Ä–æ–¥–µ {user_city}."
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ‚Äî –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ
                    best = filtered[0]
                    msg = [f"üè¢ –ë–ª–∏–∂–∞–π—à–∏–π –¥–∏–ª–µ—Ä {brand} –≤ {user_city}:"]
                    website_str = f"\nüåê {best['website']}" if best.get('website') else ""
                    hours_str = f"\nüïí {best['working_hours']}" if best.get('working_hours') else ""
                    msg.append(f"{best['name']}\nüìç {best['address']}\nüìû {best['phone'] or '-'}{website_str}{hours_str}")
                    if len(filtered) > 1:
                        msg.append(f"...–∏ –µ—â—ë {len(filtered)-1} –¥–∏–ª–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ")
                    return "\n\n".join(msg)
                # --- –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –±—Ä–µ–Ω–¥ –∏ –º–æ–¥–µ–ª—å ---
                if not brand or not model:
                    return "üè¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –¥–∏–ª–µ—Ä—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä."
                city_param = city if isinstance(city, str) and city else None
                dealer_centers = get_dealer_centers_for_car(brand, model, city_param)
                if not dealer_centers:
                    return f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–ª–µ—Ä—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–∞—Ö –¥–ª—è {brand} {model} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                if len(dealer_centers) == 1:
                    dealer = dealer_centers[0]
                    if isinstance(dealer, dict) and dealer.get('address') and dealer.get('phone'):
                        return f"üè¢ –î–∏–ª–µ—Ä—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä {brand} {model}: {dealer['address']}, üìû —Ç–µ–ª: {dealer['phone']}"
                    else:
                        return f"üè¢ –î–∏–ª–µ—Ä—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä {brand} {model}: {dealer}"
                else:
                    result = [f"üè¢ –î–∏–ª–µ—Ä—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã {brand} {model}:"]
                    for dealer in dealer_centers[:3]:
                        if isinstance(dealer, dict) and dealer.get('address'):
                            result.append(f"üìç {dealer['address']}")
                        else:
                            result.append(f"üìç {dealer}")
                    if len(dealer_centers) > 3:
                        result.append("...–∏ –¥—Ä—É–≥–∏–µ")
                    return "\n".join(result)

            # NEW: OWNERSHIP_COST
            if intent == "ownership_cost":
                brand = entities.get("brand")
                model = entities.get("model")
                if not brand or not model:
                    return "üí∞ –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
                
                # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–Ω–∏—è
                try:
                    with sqlite3.connect('instance/cars.db') as conn:
                        cursor = conn.cursor()
                        cursor.execute("SELECT price FROM car WHERE mark LIKE ? AND model LIKE ?", 
                                     [f"%{brand}%", f"%{model}%"])
                        result = cursor.fetchone()
                        
                        if result:
                            price = result[0]
                            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
                            insurance = price * 0.05  # 5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                            maintenance = price * 0.02  # 2% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                            fuel = 15000  # –ü—Ä–∏–º–µ—Ä–Ω–æ –≤ –≥–æ–¥
                            total_yearly = insurance + maintenance + fuel
                            
                            return f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–ª–∞–¥–µ–Ω–∏—è {brand} {model} –≤ –≥–æ–¥:\n" \
                                   f"üöó –°—Ç—Ä–∞—Ö–æ–≤–∫–∞: {insurance:,.0f} —Ä—É–±\n" \
                                   f"üîß –¢–û: {maintenance:,.0f} —Ä—É–±\n" \
                                   f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {fuel:,.0f} —Ä—É–±\n" \
                                   f"üìä –ò—Ç–æ–≥–æ: {total_yearly:,.0f} —Ä—É–±/–≥–æ–¥"
                        else:
                            return f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {brand} {model}"
                except Exception as e:
                    return "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–ª–∞–¥–µ–Ω–∏—è."

            # NEW: DISCOUNTS
            if intent == "discounts":
                return "üéâ –¢–µ–∫—É—â–∏–µ –∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏:\n" \
                       "üè∑Ô∏è –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –≤—Å–µ BMW –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞\n" \
                       "üéØ Mercedes - –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–µ—Ä–≤—ã–π –¢–û\n" \
                       "üí∞ –ö—Ä–µ–¥–∏—Ç –æ—Ç 0.1% –Ω–∞ Audi\n" \
                       "üéÅ –ü–æ–¥–∞—Ä–æ–∫ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª—é–±–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"

            # NEW: WARRANTY
            if intent == "warranty":
                return "üõ°Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–∞—Ä–∞–Ω—Ç–∏–∏:\n" \
                       "üìÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è: 3 –≥–æ–¥–∞ –∏–ª–∏ 100,000 –∫–º\n" \
                       "üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è: –¥–æ 5 –ª–µ—Ç\n" \
                       "üöó –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã–µ: 1 –≥–æ–¥\n" \
                       "üìû –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"

            # SEARCH
            if intent == "search" or intent == "filter":
                brand = get_first(entities.get("brand"))
                model = get_first(entities.get("model"))
                year = get_first(entities.get("year"))
                price_min = get_first(entities.get("price_min"))
                price_max = get_first(entities.get("price_max"))
                fuel_type = get_first(entities.get("fuel_type"))
                body_type = get_first(entities.get("body_type"))
                transmission = get_first(entities.get("transmission"))
                drive_type = get_first(entities.get("drive_type"))
                used = get_first(entities.get("state")) == "used"

                cars, explanation = smart_filter_cars(
                    brand=brand,
                    model=model,
                    year=year,
                    price_min=price_min,
                    price_max=price_max,
                    body_type=body_type,
                    used=used
                )
                if cars:
                    msg = f"{explanation}\n"
                    for car in cars[:5]:
                        msg += f"üöó {car.get('mark','')} {car.get('model','')} {car.get('manufacture_year','')} ‚Äî {car.get('price','')} ‚ÇΩ\n"
                    if len(cars) > 5:
                        msg += f"... –∏ –µ—â—ë {len(cars)-5} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
                    return msg
                else:
                    return f"{explanation}"

            # –ï—Å–ª–∏ intent –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
            if not intent or intent == "unknown":
                return "ü§î –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" \
                       "üîç '–Ω–∞–π—Ç–∏ BMW X5'\n" \
                       "üí∞ '—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫—Ä–µ–¥–∏—Ç'\n" \
                       "üéØ '–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤'\n" \
                       "üîÑ '–æ—Ü–µ–Ω–∏—Ç—å trade-in'\n" \
                       "üìä '—Å—Ä–∞–≤–Ω–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏'\n" \
                       "üéâ '–∞–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏'"

            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç intent –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            return f"üöß –§—É–Ω–∫—Ü–∏—è '{intent}' –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import logging
            logging.error(f"–û—à–∏–±–∫–∞ –≤ DialogManager: {str(e)}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."

def get_first(val):
    if isinstance(val, list):
        return val[0] if val else None
    if isinstance(val, tuple):
        return val[0] if val else None
    return val

class ContextAwareDialogManager(DialogManager):
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
    - —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –º–æ–∂–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    def __init__(self):
        super().__init__()
        self.user_history = UserHistory()

    def handle_query(self, user_id: str, query: str) -> str:
        history = self.user_history.get_user_history(user_id, limit=10)
        preferences = self.user_history.get_preferences(user_id)
        base_response = super().handle_query(user_id, query)
        nlp_result = self.nlp.process_query(query)
        intent = nlp_result.get("intent")
        def get_first_deep(val):
            if isinstance(val, (list, tuple)):
                return get_first_deep(val[0]) if val else None
            return val
        # –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ
        if intent == "recent_cars":
            from database import get_recent_cars_from_db
            cars = get_recent_cars_from_db(limit=5)
            if cars:
                result = ["üïì –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:"]
                for car in cars:
                    info = f"üöó {car['brand']} {car['model']} {car['year']} ‚Äî {car['price']} ‚ÇΩ"
                    result.append(info)
                return "\n".join(result)
            else:
                return "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."
        # –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –ø–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        if intent == "favorites":
            favorites = self.user_history.get_favorites(user_id)
            if favorites:
                result = ["‚≠ê –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:"]
                for car in favorites:
                    info = f"üöó {car['brand']} {car['model']} {car['year']} ‚Äî {car['price']} ‚ÇΩ"
                    result.append(info)
                return "\n".join(result)
            else:
                return "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π."
        # –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        if intent == "interests":
            stats = self.user_history.get_user_statistics(user_id)
            if stats:
                brands = stats.get('brands', [])
                result = ["üìä –í–∞—à–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:"]
                for b in brands:
                    result.append(f"{b['brand']}: {b['count']} –∑–∞–ø—Ä–æ—Å–æ–≤, —Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {b['avg_price']} ‚ÇΩ")
                return "\n".join(result)
            else:
                return "–ù–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º."
        # –ù–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        if intent == "previous_question":
            if history and len(history) > 1:
                prev = history[1]
                return f"–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å: '{prev['query']}'\n–û—Ç–≤–µ—Ç: {prev['response']}"
            else:
                return "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Å —É—á—ë—Ç–æ–º get_first_deep)
        if intent == "recommendations":
            preferred_brands = preferences.get("preferred_brands")
            preferred_price_range = preferences.get("preferred_price_range")
            brand = get_first_deep(preferred_brands) if preferred_brands else None
            price_min = get_first_deep(preferred_price_range[0]) if preferred_price_range and isinstance(preferred_price_range, list) and len(preferred_price_range) > 0 else None
            price_max = get_first_deep(preferred_price_range[1]) if preferred_price_range and isinstance(preferred_price_range, list) and len(preferred_price_range) > 1 else None
            if brand or price_min or price_max:
                from database import smart_filter_cars
                filtered, explanation = smart_filter_cars(
                    brand=brand,
                    price_min=price_min,
                    price_max=price_max
                )
                if filtered:
                    result = ["üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:"]
                    for car in filtered[:3]:
                        info = f"üöó {car.get('mark')} {car.get('model')} ({car.get('manufacture_year')}), üí∞ {car.get('price')} —Ä—É–±"
                        result.append(info)
                    if explanation:
                        result.append(f"\n{explanation}")
                    return "\n".join(result)
                else:
                    return base_response + "\n(–ù–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º)"
        return base_response

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    dm = DialogManager()
    user_id = "test_user"
    while True:
        query = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ")
        if query.strip().lower() in ("–≤—ã—Ö–æ–¥", "exit", "quit"): break
        response = dm.handle_query(user_id, query)
        print("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:", response) 
 
 