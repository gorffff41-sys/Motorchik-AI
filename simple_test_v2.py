#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è v2.0 —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from enhanced_query_router_v2 import EnhancedQueryRouterV2, QueryType
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def simple_test_v2():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç v2.0 —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    
    router = EnhancedQueryRouterV2()
    
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ ABS?", QueryType.AUTOMOTIVE_QUESTION),
        ("–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ —Ç—É—Ä–±–æ–Ω–∞–¥–¥—É–≤", QueryType.AUTOMOTIVE_QUESTION),
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–∏–±—Ä–∏–¥–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å?", QueryType.AUTOMOTIVE_QUESTION),
        ("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∞—Ä–∏–∞—Ç–æ—Ä?", QueryType.AUTOMOTIVE_QUESTION),
        ("–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç ASR –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ?", QueryType.AUTOMOTIVE_QUESTION),
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏—è
        ("–ß—Ç–æ –ª—É—á—à–µ: –±–µ–Ω–∑–∏–Ω –∏–ª–∏ –≥–∞–∑?", QueryType.AUTOMOTIVE_COMPARISON),
        ("–°—Ä–∞–≤–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç –∏ –º–µ—Ö–∞–Ω–∏–∫—É", QueryType.AUTOMOTIVE_COMPARISON),
        ("–ß—Ç–æ –ª—É—á—à–µ: BMW –∏–ª–∏ Mercedes?", QueryType.AUTOMOTIVE_COMPARISON),
        ("–°—Ä–∞–≤–Ω–∏ –¥–∏–∑–µ–ª—å –∏ –±–µ–Ω–∑–∏–Ω", QueryType.AUTOMOTIVE_COMPARISON),
        ("–ß—Ç–æ –ª—É—á—à–µ: –ø–µ—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—Ä–∏–≤–æ–¥?", QueryType.AUTOMOTIVE_COMPARISON),
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        ("–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∞–≤—Ç–æ –¥–ª—è —Å–µ–º—å–∏", QueryType.AUTOMOTIVE_RECOMMENDATION),
        ("–ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –≥–æ—Ä–æ–¥–∞?", QueryType.AUTOMOTIVE_RECOMMENDATION),
        ("–ü–æ—Å–æ–≤–µ—Ç—É–π —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", QueryType.AUTOMOTIVE_RECOMMENDATION),
        ("–†–µ–∫–æ–º–µ–Ω–¥—É–π –º–∞—à–∏–Ω—É –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è", QueryType.AUTOMOTIVE_RECOMMENDATION),
        ("–ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ª—É—á—à–µ –¥–ª—è –¥–∞–ª—å–Ω–∏—Ö –ø–æ–µ–∑–¥–æ–∫?", QueryType.AUTOMOTIVE_RECOMMENDATION),
        
        # –ü–æ–º–æ—â—å
        ("–ö–∞–∫ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", QueryType.AUTOMOTIVE_HELP),
        ("–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É", QueryType.AUTOMOTIVE_HELP),
        ("–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ?", QueryType.AUTOMOTIVE_HELP),
        ("–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", QueryType.AUTOMOTIVE_HELP),
        ("–ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ —Ö–æ—Ä–æ—à—É—é –º–∞—à–∏–Ω—É", QueryType.AUTOMOTIVE_HELP),
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–º–æ—â—å
        ("–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", QueryType.SYSTEM_HELP),
        ("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö", QueryType.SYSTEM_HELP),
        ("–ö—Ç–æ —Ç—ã?", QueryType.SYSTEM_HELP),
        ("–ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ñ—É–Ω–∫—Ü–∏–∏?", QueryType.SYSTEM_HELP),
        ("–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –¥–µ–ª–∞—Ç—å?", QueryType.SYSTEM_HELP),
        
        # –û–±—â–∏–π —á–∞—Ç
        ("–ü—Ä–∏–≤–µ—Ç", QueryType.GENERAL_CHAT),
        ("–ö–∞–∫ –¥–µ–ª–∞?", QueryType.GENERAL_CHAT),
        ("–°–ø–∞—Å–∏–±–æ", QueryType.GENERAL_CHAT),
        ("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ", QueryType.GENERAL_CHAT),
        ("–î–æ–±—Ä—ã–π –¥–µ–Ω—å", QueryType.GENERAL_CHAT),
        
        # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        ("–ù–∞–π–¥–∏ –∫—Ä–∞—Å–Ω—ã–π BMW", QueryType.AUTOMOTIVE_SEARCH),
        ("–ü–æ–∫–∞–∂–∏ –º–∞—à–∏–Ω—ã –¥–æ 2 –º–ª–Ω", QueryType.AUTOMOTIVE_SEARCH),
        ("–ò—â—É —Å–µ–¥–∞–Ω 2020 –≥–æ–¥–∞", QueryType.AUTOMOTIVE_SEARCH),
        ("–ù–∞–π–¥–∏ –±–µ–ª—ã–π Mercedes", QueryType.AUTOMOTIVE_SEARCH),
        ("–ü–æ–∫–∞–∂–∏ –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∏", QueryType.AUTOMOTIVE_SEARCH),
        
        # –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        ("–†–∞—Å—Å—á–∏—Ç–∞–π –∫—Ä–µ–¥–∏—Ç –Ω–∞ 2 –º–ª–Ω", QueryType.CREDIT_CALCULATION),
        ("–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", QueryType.CREDIT_CALCULATION),
        ("–ü–æ—Å—á–∏—Ç–∞–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂", QueryType.CREDIT_CALCULATION),
        ("–†–∞—Å—Å—á–∏—Ç–∞–π –∫—Ä–µ–¥–∏—Ç –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å", QueryType.CREDIT_CALCULATION),
        ("–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É?", QueryType.CREDIT_CALCULATION),
    ]
    
    print("üéØ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ V2.0")
    print("=" * 60)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    results_by_type = {}
    correct_by_type = {}
    
    for query_type in QueryType:
        results_by_type[query_type] = 0
        correct_by_type[query_type] = 0
    
    total_correct = 0
    total_tests = len(test_queries)
    
    print("üß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 60)
    
    errors = []
    
    for i, (query, expected_type) in enumerate(test_queries, 1):
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        actual_type = router.classifier.classify_query(query)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        results_by_type[expected_type] += 1
        if actual_type == expected_type:
            correct_by_type[expected_type] += 1
            total_correct += 1
        else:
            errors.append((i, query, expected_type, actual_type))
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
    for i, query, expected, actual in errors:
        print(f"‚ùå {i:2d}. '{query}'")
        print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {expected.value}")
        print(f"    –ü–æ–ª—É—á–µ–Ω–æ:  {actual.value}")
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accuracy = (total_correct / total_tests) * 100
    
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 60)
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {total_correct}/{total_tests}")
    print(f"üìä –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    
    if accuracy >= 90:
        print("üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –¢–æ—á–Ω–æ—Å—Ç—å >= 90%")
    elif accuracy >= 85:
        print("üëç –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ—á–Ω–æ—Å—Ç—å >= 85%")
    elif accuracy >= 80:
        print("‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ—á–Ω–æ—Å—Ç—å >= 80%")
    else:
        print("‚ö†Ô∏è –ù–£–ñ–ù–û –£–õ–£–ß–®–ò–¢–¨! –¢–æ—á–Ω–æ—Å—Ç—å < 80%")
    
    print("\nüìä –¢–û–ß–ù–û–°–¢–¨ –ü–û –¢–ò–ü–ê–ú –ó–ê–ü–†–û–°–û–í:")
    print("-" * 60)
    
    for query_type in QueryType:
        if results_by_type[query_type] > 0:
            type_accuracy = (correct_by_type[query_type] / results_by_type[query_type]) * 100
            status = "‚úÖ" if type_accuracy >= 80 else "‚ö†Ô∏è" if type_accuracy >= 60 else "‚ùå"
            print(f"{status} {query_type.value:25s}: {correct_by_type[query_type]:2d}/{results_by_type[query_type]:2d} ({type_accuracy:5.1f}%)")
    
    return accuracy, errors

if __name__ == "__main__":
    accuracy, errors = simple_test_v2()
    
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨ V2.0: {accuracy:.1f}%")
    
    if accuracy >= 90:
        print("üèÜ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê! –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å 90% —Ç–æ—á–Ω–æ—Å—Ç–∏!")
    else:
        print(f"üìà –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –Ω–∞ {90 - accuracy:.1f}% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
