import re
import requests
from typing import Dict, Any, Optional
import logging

# Настройка логирования
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SmartQueryRouter:
    """Умный роутер запросов для разделения автомобильных и общих запросов"""
    
    def __init__(self):
        # Ключевые слова для автомобильных запросов
        self.car_keywords = [
            # Бренды автомобилей
            'bmw', 'mercedes', 'audi', 'volkswagen', 'toyota', 'honda', 'nissan', 'ford', 'chevrolet',
            'бмв', 'мерседес', 'ауди', 'фольксваген', 'тойота', 'хонда', 'ниссан', 'форд', 'шевроле',
            'мазда', 'мицубиси', 'субару', 'лексус', 'инфинити', 'акура', 'киа', 'хендай', 'рено',
            'пежо', 'ситроен', 'опель', 'фиат', 'альфа ромео', 'ланча', 'ферари', 'ламборгини',
            'порше', 'ягуар', 'ленд ровер', 'роллс ройс', 'бентли', 'астон мартин', 'маклерен',
            'мазда', 'мицубиси', 'субару', 'лексус', 'инфинити', 'акура', 'киа', 'хендай', 'рено',
            'пежо', 'ситроен', 'опель', 'фиат', 'альфа ромео', 'ланча', 'ферари', 'ламборгини',
            'порше', 'ягуар', 'ленд ровер', 'роллс ройс', 'бентли', 'астон мартин', 'маклерен',
            # Российские бренды
            'лада', 'ладу', 'лады', 'ладе', 'ладой', 'ладою', 'ваз', 'автоваз', 'lada',
            'уаз', 'газ', 'москвич', 'волга', 'жигули', 'нива', 'калина', 'гранта', 'веста',
            'приора', 'десять', 'семерка', 'пятерка', 'четверка', 'копейка', 'копейки',
            
            # Автомобильные термины
            'автомобиль', 'машина', 'машины', 'авто', 'тачка', 'колеса', 'двигатель', 'мотор', 'трансмиссия',
            'коробка передач', 'привод', 'подвеска', 'тормоза', 'руль', 'педали', 'кузов',
            'салон', 'багажник', 'капот', 'крыша', 'двери', 'окна', 'фары', 'поворотники',
            'стеклоочистители', 'кондиционер', 'отопление', 'навигация', 'камера',
            'парктроники', 'подогрев', 'вентиляция', 'климат контроль', 'круиз контроль',
            'автопилот', 'адаптивный', 'слепые зоны', 'автоматическая парковка',
            'сценарий использования', 'сценарий применения', 'сценарий эксплуатации', 'сценарий автомобиля',
            'автомобильный рок', 'автомобильный вал', 'автомобильная втулка',
            'автомобильный к', 'автомобильный и', 'автомобильный в', 'автомобильный на', 'автомобильный ли',
            
            # Кредитные и финансовые термины
            'кредитный калькулятор', 'кридитный калькулятор', 'крититный калькулятор',
            'платеж', 'платежи', 'ежемесячный платеж', 'ежемесячные платежи',
            'ставка', 'ставка кредита', 'процентная ставка', 'годовая ставка',
            'первоначальный взнос', 'взнос', 'взносы', 'срок кредита', 'срок',
            'переплата', 'общая сумма', 'сумма кредита', 'кредитная сумма',
            'аннуитетный платеж', 'дифференцированный платеж', 'эффективная ставка',
            'кредит на автомобиль', 'кредит на машину', 'кредит на авто',
            
            # Действия с автомобилями
            'купить', 'продать', 'арендовать', 'найти', 'найди', 'сравнить', 'выбрать', 'посмотреть',
            'показать', 'рассказать', 'описать', 'характеристики', 'технические данные',
            'цена', 'стоимость', 'финансирование', 'кридит', 'критит', 'лизинг', 'страховка',
            'гарантия', 'сервис', 'обслуживание', 'ремонт', 'запчасти', 'тюнинг',
            'миллионов', 'тысяч', 'рублей', 'долларов', 'евро',
            'рассчитать', 'рассчитай', 'рассчитать кредит', 'рассчитай кредит', 'рассчитать кридит', 'рассчитай кридит',
            'рассчитать критит', 'рассчитай критит', 'кредит на автомобиль', 'кридит на автомобиль', 'критит на автомобиль',
            'кредит на авто', 'кридит на авто', 'критит на авто', 'кредит на машину', 'кридит на машину', 'критит на машину',
            
            # Типы автомобилей
            'седан', 'хэтчбек', 'универсал', 'внедорожник', 'кроссовер', 'кабриолет', 'купе',
            'лимузин', 'пикап', 'фургон', 'микроавтобус', 'автобус', 'грузовик', 'мотоцикл',
            'скутер', 'велосипед', 'электросамокат',
            # Спортивные
            'спорткар', 'спорткары', 'спорткара', 'спорткаров', 'спортивный автомобиль', 'спортивные автомобили',
            
            # Цвета (часто используются в контексте автомобилей)
            'красный', 'синий', 'зеленый', 'желтый', 'белый', 'черный', 'серый', 'серебристый',
            'золотой', 'коричневый', 'оранжевый', 'фиолетовый', 'розовый', 'голубой',
            
            # Размеры и характеристики
            'большой', 'маленький', 'компактный', 'семейный', 'спортивный', 'комфортный',
            'экономичный', 'мощный', 'быстрый', 'медленный', 'надежный', 'безопасный',
            
            # Количество мест
            'для одного', 'для двоих', 'для троих', 'для четверых', 'для пятерых', 'для семи',
            'для восьми', 'много мест', 'мало мест', 'мест', 'местами', 'пассажиров', 'пассажирских мест',
            
            # Использование
            'для города', 'для трассы', 'для бездорожья', 'для семьи', 'для работы',
            'для бизнеса', 'для отдыха', 'для путешествий', 'для спорта', 'для такси',
            
            # Технические характеристики
            'бензин', 'дизель', 'электро', 'гибрид', 'автомат', 'механика', 'передний привод',
            'задний привод', 'полный привод', '4x4', 'awd', 'fwd', 'rwd',
            
            # Состояние
            'новый', 'подержанный', 'б/у', 'с пробегом', 'без пробега', 'аварийный',
            'на ходу', 'не на ходу', 'требует ремонта', 'в отличном состоянии',
            
            # Ценовые категории
            'дешевый', 'дорогой', 'бюджетный', 'премиум', 'люкс', 'эконом класс',
            'средний класс', 'высший класс'
        ]
        
        # Ключевые слова для общих запросов (не автомобильных)
        self.general_keywords = [
            # Приветствия и общение
            'привет', 'здравствуй', 'добрый день', 'добрый вечер', 'доброе утро',
            'как дела', 'как ты', 'кто ты', 'что ты умеешь', 'расскажи о себе',
            'познакомимся', 'рад встрече', 'до свидания', 'пока', 'увидимся',
            'как тебя зовут', 'отслеживаешь', 'тему', 'нашего', 'общения',
            'живут', 'рыбки', 'дома', 'домашние', 'животные', 'питомцы',
            'кто ты такой', 'что ты', 'расскажи', 'познакомиться', 'знакомство',
            'имя', 'зовут', 'называют', 'обращаются', 'звать', 'называть',
            'личность', 'персона', 'сущность', 'существо', 'создание',
            
            # Погода и природа
            'погода', 'температура', 'дождь', 'снег', 'солнце', 'облака', 'ветер',
            'влажность', 'давление', 'прогноз', 'климат', 'сезон', 'время года',
            'холодно', 'жарко', 'тепло', 'мороз', 'жара', 'духота',
            'осадки', 'туман', 'гроза', 'молния', 'гром', 'радуга',
            
            # Время и дата
            'время', 'часы', 'минуты', 'секунды', 'дата', 'день', 'месяц', 'год',
            'сегодня', 'завтра', 'вчера', 'неделя', 'месяц', 'год',
            'сколько времени', 'который час', 'текущее время', 'текущая дата',
            'календарь', 'расписание', 'график', 'таймер', 'секундомер',
            
            # Математика и вычисления
            'посчитай', 'вычисли', 'математика', 'арифметика', 'сложение', 'вычитание',
            'умножение', 'деление', 'процент', 'дробь', 'число', 'цифра',
            'калькулятор', 'формула', 'уравнение', 'задача', 'пример',
            
            # Общие вопросы о системе
            'что ты умеешь', 'какие у тебя возможности', 'функции', 'способности',
            'помощь', 'справка', 'инструкция', 'руководство', 'как пользоваться',
            'настройки', 'опции', 'параметры', 'конфигурация',
            
            # Личные вопросы
            'твоя семья', 'твои друзья', 'твои увлечения', 'твои интересы',
            'твоя работа', 'твоя учеба', 'твои планы', 'твои мечты',
            'твои чувства', 'твои эмоции', 'твои мысли', 'твое мнение',
            
            # Философские вопросы
            'смысл жизни', 'цель существования', 'философия', 'религия',
            'душа', 'сознание', 'мышление', 'разум', 'интеллект',
            'истина', 'ложь', 'добро', 'зло', 'красота', 'искусство',
            
            # Технические вопросы
            'программирование', 'код', 'алгоритм', 'база данных', 'сервер',
            'интернет', 'сеть', 'протокол', 'интерфейс', 'система',
            'технология', 'инновация', 'разработка', 'программист',
            
            # Образование и наука
            'учеба', 'образование', 'наука', 'исследование', 'эксперимент',
            'теория', 'гипотеза', 'закон', 'принцип', 'метод',
            'школа', 'университет', 'колледж', 'курс', 'лекция',
            
            # Развлечения и хобби
            'игра', 'музыка', 'фильм', 'книга', 'спорт', 'путешествие',
            'хобби', 'увлечение', 'отдых', 'развлечение', 'досуг',
            'танцы', 'рисование', 'фотография', 'коллекционирование',
            
            # Еда и кулинария
            'еда', 'кухня', 'рецепт', 'готовка', 'приготовление', 'блюдо',
            'продукты', 'ингредиенты', 'специи', 'соус', 'десерт',
            'завтрак', 'обед', 'ужин', 'перекус', 'напиток',
            
            # Здоровье и медицина
            'здоровье', 'болезнь', 'лечение', 'врач', 'больница', 'лекарство',
            'симптом', 'диагноз', 'профилактика', 'гигиена', 'спорт',
            'диета', 'питание', 'витамины', 'иммунитет',
            
            # Психология и отношения
            'психология', 'отношения', 'любовь', 'дружба', 'семья', 'брак',
            'эмоции', 'чувства', 'стресс', 'депрессия', 'тревога',
            'счастье', 'радость', 'грусть', 'злость', 'страх',
            
            # Экономика и финансы
            'деньги', 'бюджет', 'экономика', 'финансы', 'инвестиции', 'акции',
            'банк', 'кредит', 'займ', 'сбережения', 'расходы', 'доходы',
            'инфляция', 'курс валют', 'биржа', 'трейдинг',
            
            # Политика и общество
            'политика', 'правительство', 'выборы', 'закон', 'право', 'свобода',
            'демократия', 'общество', 'культура', 'традиция', 'обычай',
            'медиа', 'новости', 'журналистика', 'свобода слова',
            
            # География и путешествия
            'страна', 'город', 'столица', 'география', 'карта', 'путешествие',
            'туризм', 'отель', 'билет', 'виза', 'паспорт', 'граница',
            'континент', 'океан', 'море', 'река', 'гора', 'пустыня',
            
            # История и культура
            'история', 'древность', 'цивилизация', 'культура', 'традиция',
            'обычай', 'праздник', 'фестиваль', 'музей', 'памятник',
            'архитектура', 'скульптура', 'живопись', 'литература',
            
            # Технологии и гаджеты
            'телефон', 'компьютер', 'ноутбук', 'планшет', 'смартфон',
            'интернет', 'социальные сети', 'мессенджер', 'приложение',
            'искусственный интеллект', 'робот', 'автоматизация',
            
            # Транспорт (не автомобили)
            'самолет', 'поезд', 'метро', 'трамвай', 'троллейбус', 'автобус',
            'велосипед', 'мотоцикл', 'электросамокат', 'скейтборд',
            'лодка', 'корабль', 'яхта', 'вертолет', 'дирижабль',
            
            # Природа и экология
            'природа', 'экология', 'окружающая среда', 'загрязнение',
            'переработка', 'устойчивое развитие', 'зеленая энергия',
            'лес', 'парк', 'сад', 'цветы', 'деревья', 'животные',
            
            # Спорт и фитнес
            'спорт', 'фитнес', 'тренировка', 'упражнение', 'зарядка',
            'футбол', 'баскетбол', 'теннис', 'плавание', 'бег',
            'йога', 'пилатес', 'бокс', 'борьба', 'гимнастика',
            
            # Мода и стиль
            'мода', 'стиль', 'одежда', 'обувь', 'аксессуары', 'макияж',
            'прическа', 'парфюм', 'косметика', 'украшения', 'часы',
            'сумка', 'кошелек', 'галстук', 'шарф', 'шапка',
            
            # Дом и быт
            'дом', 'квартира', 'мебель', 'ремонт', 'дизайн', 'интерьер',
            'кухня', 'ванная', 'спальня', 'гостиная', 'балкон',
            'уборка', 'стирка', 'глажка', 'готовка', 'покупки',
            
            # Работа и карьера
            'работа', 'карьера', 'профессия', 'специальность', 'зарплата',
            'начальник', 'коллега', 'офис', 'увольнение', 'повышение',
            'резюме', 'собеседование', 'контракт', 'отпуск', 'больничный',
            
            # Обучение и развитие
            'обучение', 'развитие', 'навык', 'знание', 'опыт', 'практика',
            'теория', 'практика', 'экзамен', 'тест', 'контрольная',
            'диплом', 'сертификат', 'курс', 'тренинг', 'семинар',
            
            # Языки и лингвистика
            'язык', 'лингвистика', 'грамматика', 'словарь', 'перевод',
            'иностранный', 'английский', 'немецкий', 'французский',
            'произношение', 'акцент', 'диалект', 'сленг', 'жаргон',
            
            # Музыка и искусство
            'музыка', 'песня', 'мелодия', 'ритм', 'инструмент', 'оркестр',
            'концерт', 'фестиваль', 'альбом', 'плейлист', 'радио',
            'живопись', 'скульптура', 'фотография', 'кино', 'театр',
            
            # Книги и литература
            'книга', 'роман', 'повесть', 'рассказ', 'стих', 'поэзия',
            'автор', 'писатель', 'поэт', 'библиотека', 'издательство',
            'жанр', 'детектив', 'фантастика', 'романтика', 'ужасы',
            
            # Фильмы и сериалы
            'фильм', 'сериал', 'мультфильм', 'документальный', 'комедия',
            'драма', 'боевик', 'ужасы', 'фантастика', 'вестерн',
            'актер', 'режиссер', 'сценарий', 'спецэффекты', 'саундтрек',
            
            # Игры и развлечения
            'игра', 'видеоигра', 'настольная игра', 'карточная игра',
            'головоломка', 'кроссворд', 'судоку', 'шахматы', 'шашки',
            'консоль', 'приставка', 'компьютерная игра', 'мобильная игра',
            
            # Интернет и технологии
            'интернет', 'сайт', 'блог', 'форум', 'чат', 'мессенджер',
            'социальная сеть', 'видеозвонок', 'стрим', 'подкаст',
            'вирус', 'антивирус', 'пароль', 'логин', 'регистрация',
            
            # Семья и отношения
            'семья', 'родители', 'дети', 'брат', 'сестра', 'бабушка',
            'дедушка', 'дядя', 'тетя', 'кузен', 'кузина', 'родственник',
            'брак', 'свадьба', 'развод', 'усыновление', 'опека',
            
            # Друзья и общение
            'друг', 'подруга', 'знакомый', 'приятель', 'товарищ',
            'общение', 'разговор', 'беседа', 'спор', 'дискуссия',
            'встреча', 'свидание', 'вечеринка', 'праздник', 'торжество',
            
            # Эмоции и чувства
            'радость', 'счастье', 'грусть', 'печаль', 'злость', 'гнев',
            'страх', 'тревога', 'волнение', 'спокойствие', 'умиротворение',
            'любовь', 'симпатия', 'антипатия', 'зависть', 'ревность',
            
            # Характер и личность
            'характер', 'личность', 'темперамент', 'характер', 'привычка',
            'черта', 'качество', 'достоинство', 'недостаток', 'талант',
            'способность', 'умение', 'навык', 'опыт', 'знание',
            
            # Цели и мечты
            'цель', 'мечта', 'желание', 'стремление', 'амбиция', 'планы',
            'будущее', 'перспектива', 'возможность', 'шанс', 'удача',
            'успех', 'достижение', 'победа', 'триумф', 'признание',
            
            # Проблемы и решения
            'проблема', 'трудность', 'препятствие', 'барьер', 'вызов',
            'решение', 'выход', 'способ', 'метод', 'подход', 'стратегия',
            'план', 'алгоритм', 'процедура', 'технология', 'методика',
            
            # Вопросы и ответы
            'вопрос', 'ответ', 'объяснение', 'пояснение', 'разъяснение',
            'информация', 'данные', 'факт', 'статистика', 'исследование',
            'анализ', 'вывод', 'заключение', 'результат', 'итог',
            
            # Случайные и абстрактные
            'случайность', 'совпадение', 'удача', 'везение', 'фортуна',
            'абстракция', 'концепция', 'идея', 'мысль', 'размышление',
            'фантазия', 'воображение', 'творчество', 'креативность', 'инновация',
            
            # Философия и этика
            'философия', 'этика', 'смысл жизни', 'сознание', 'человеческое сознание',
            'этические дебаты', 'мораль', 'ценности', 'истина', 'добро', 'зло',
            'свобода воли', 'детерминизм', 'экзистенциализм', 'гуманизм',
            
            # Технологии и ИИ
            'искусственный интеллект', 'ИИ', 'робототехника', 'технологии',
            'цифровизация', 'автоматизация', 'алгоритмы', 'машинное обучение',
            'нейросети', 'большие данные', 'анализ данных', 'криптовалюты',
            'блокчейн', 'виртуальная реальность', 'дополненная реальность',
            
            # Наука и исследования
            'наука', 'исследования', 'эксперименты', 'теория', 'гипотеза',
            'физика', 'химия', 'биология', 'генетика', 'нейробиология',
            'психология', 'социология', 'антропология', 'археология',
            
            # Медицина и здоровье
            'медицина', 'здоровье', 'лечение', 'профилактика', 'диагностика',
            'генетическое редактирование', 'CRISPR', 'эпидемии', 'вакцинация',
            'иммунитет', 'метаболизм', 'физиология',
            
            # Экономика и финансы
            'экономика', 'финансы', 'инфляция', 'безработица', 'конкурентоспособность',
            'налоговая реформа', 'углеродный налог', 'субсидии', 'инвестиции',
            'рынок', 'спрос', 'предложение', 'ВВП', 'инфраструктура',
            
            # Экология и климат
            'экология', 'климат', 'глобальное потепление', 'углеродный след',
            'возобновляемые источники энергии', 'ВИЭ', 'зеленая энергия',
            'вечная мерзлота', 'метан', 'озоновые дыры', 'загрязнение',
            
            # Политика и международные отношения
            'политика', 'международные отношения', 'геополитика', 'конфликты',
            'войны', 'религиозные войны', 'Ближний Восток', 'ЕС', 'ООН',
            'соглашения', 'протоколы', 'санкции', 'дипломатия',
            
            # История и культура
            'история', 'культура', 'средневековье', 'эпоха Просвещения',
            'религия', 'традиции', 'обычаи', 'цивилизация', 'архитектура',
            'памятники', 'музеи', 'наследие', 'археология',
            
            # Психология и отношения
            'психология', 'эмоции', 'эмпатия', 'отношения', 'дружба',
            'социальные сети', 'мессенджеры', 'поколение Z', 'когнитивные функции',
            'память', 'внимание', 'стресс', 'тревога', 'депрессия',
            
            # Искусство и творчество
            'искусство', 'творчество', 'литература', 'поэзия', 'проза',
            'авторство', 'философия искусства', 'стихи', 'автор', 'писатель',
            'художник', 'композитор', 'режиссер', 'актер',
            
            # Образование и работа
            'образование', 'работа', 'профессии', 'навыки', 'hard skills',
            'soft skills', 'образовательные траектории', 'университет', 'школа',
            'курсы', 'тренинги', 'сертификация', 'карьера',
            
            # Транспорт и логистика
            'транспорт', 'логистика', 'вакуумные поезда', 'Hyperloop',
            'материалы', 'энергоснабжение', 'безопасность', 'инфраструктура',
            'скорость', 'эффективность', 'экологичность',
            
            # Музыка и звук
            'музыка', 'музыкальные жанры', 'классика', 'рок', 'электронная музыка',
            'мозговые волны', 'терапевтические эффекты', 'звук', 'ритм',
            'мелодия', 'гармония', 'инструменты', 'оркестр',
            
            # Кулинария и питание
            'кулинария', 'питание', 'диета', 'средиземноморская диета',
            'пищевая химия', 'ферментация', 'маринование', 'продукты',
            'ингредиенты', 'готовка', 'рецепты', 'калории', 'витамины',
            
            # Спорт и фитнес
            'спорт', 'фитнес', 'тренировки', 'HIIT', 'кардионагрузки',
            'выносливость', 'метаболизм', 'перетренированность', 'физическая активность',
            'упражнения', 'соревнования', 'олимпиада', 'чемпионат',
            
            # Кино и медиа
            'кино', 'фильмы', 'стриминговые платформы', 'Netflix', 'кинопроцесс',
            'финансирование', 'монтаж', 'кинотеатры', 'жанры', 'зрители',
            'актеры', 'режиссеры', 'сценарий', 'спецэффекты',
            
            # Юриспруденция и право
            'юриспруденция', 'право', 'законы', 'соглашения', 'протоколы',
            'международное право', 'санкции', 'обязательства', 'принуждение',
            'юридические механизмы', 'суд', 'законодательство',
            
            # География и регионы
            'география', 'регионы', 'Сибирь', 'Канада', 'Европа',
            'Ближний Восток', 'страны', 'города', 'климат', 'ландшафт',
            'природные ресурсы', 'территория',
            
            # Время и прогнозы
            'будущее', 'прогнозы', 'ближайшие 50 лет', 'через 10 лет',
            'тенденции', 'развитие', 'эволюция', 'прогресс', 'инновации',
            'изменения', 'трансформация',
            
            # Сравнения и анализ
            'сравни', 'сравнительный анализ', 'анализ', 'исследование',
            'изучение', 'объясни', 'опиши', 'проанализируй', 'спрогнозируй',
            'обсуди', 'проведи анализ', 'сравни подходы',
            
            # Данные и исследования
            'данные', 'исследования', 'статистика', 'методы', 'результаты',
            'выводы', 'доказательства', 'научно доказанные', 'эффективность',
            'риски', 'последствия', 'влияние'
        ]
        
        # Слова-исключения (могут быть как в автомобильном, так и в общем контексте)
        self.exclusion_words = [
            'машина', 'авто', 'колеса', 'двигатель', 'мотор', 'руль', 'педали',
            'кузов', 'салон', 'багажник', 'капот', 'крыша', 'двери', 'окна',
            'фары', 'поворотники', 'стеклоочистители', 'кондиционер', 'отопление',
            'музыка', 'навигация', 'камера', 'парктроники', 'подогрев', 'вентиляция',
            'климат контроль', 'круиз контроль', 'автопилот', 'адаптивный', 'слепые зоны',
            'автоматическая парковка', 'купить', 'продать', 'арендовать', 'найти',
            'сравнить', 'выбрать', 'посмотреть', 'показать', 'рассказать', 'описать',
            'характеристики', 'технические данные', 'цена', 'стоимость', 'бюджет',
            'финансирование', 'кредит', 'лизинг', 'страховка', 'гарантия', 'сервис',
            'обслуживание', 'ремонт', 'запчасти', 'тюнинг', 'седан', 'хэтчбек',
            'универсал', 'внедорожник', 'кроссовер', 'кабриолет', 'купе', 'лимузин',
            'пикап', 'фургон', 'микроавтобус', 'автобус', 'грузовик', 'мотоцикл',
            'скутер', 'велосипед', 'электросамокат', 'красный', 'синий', 'зеленый',
            'желтый', 'белый', 'черный', 'серый', 'серебристый', 'золотой', 'коричневый',
            'оранжевый', 'фиолетовый', 'розовый', 'голубой', 'большой', 'маленький',
            'компактный', 'семейный', 'спортивный', 'комфортный', 'экономичный',
            'мощный', 'быстрый', 'медленный', 'надежный', 'безопасный', 'для одного',
            'для двоих', 'для троих', 'для четверых', 'для пятерых', 'для семи',
            'для восьми', 'много мест', 'мало мест', 'для города', 'для трассы',
            'для бездорожья', 'для семьи', 'для работы', 'для бизнеса', 'для отдыха',
            'для путешествий', 'для спорта', 'для такси', 'бензин', 'дизель', 'электро',
            'гибрид', 'автомат', 'механика', 'передний привод', 'задний привод',
            'полный привод', '4x4', 'awd', 'fwd', 'rwd', 'новый', 'подержанный',
            'б/у', 'с пробегом', 'без пробега', 'аварийный', 'на ходу', 'не на ходу',
            'требует ремонта', 'в отличном состоянии', 'дешевый', 'дорогой', 'бюджетный',
            'премиум', 'люкс', 'эконом класс', 'средний класс', 'высший класс'
        ]
    
    def is_car_related(self, query: str) -> bool:
        """
        Определяет, относится ли запрос к автомобильной тематике
        
        Args:
            query: Текст запроса
            
        Returns:
            bool: True если запрос автомобильный, False если общий
        """
        # Убеждаемся, что query - это строка
        if not isinstance(query, str):
            query = str(query)
        query_lower = query.lower()
        
        # Проверяем контекст использования общих слов, которые могут быть в автомобильных ключевых словах
        context_exclusions = [
            # Если запрос содержит научные термины вместе с "евро", это не автомобильный контекст
            ('евро', ['средневековой', 'эпоху', 'религиозных', 'конфликтов', 'геополитические']),
            # Если запрос содержит "авто" в контексте ИИ, это не автомобильный контекст
            ('авто', ['искусственного', 'интеллекта', 'стихи', 'прозу', 'автор']),
            # Если запрос содержит "электро" в контексте музыки, это не автомобильный контекст
            ('электро', ['музыка', 'жанры', 'музыкальные', 'классика', 'рок'])
        ]
        
        # Киногерои/фантазийные запросы (не подходят для реального подбора авто)
        fantasy_patterns = [
            'как у бэтмена', 'как у бетмена', 'как у батмана', 'бэтмен', 'бетмен', 'батман',
            'бэтмобиль', 'бетмобиль', 'batman', 'batmobile', 'как у супермена', 'супермен'
        ]
        if any(pat in query_lower for pat in fantasy_patterns):
            return False

        # Обобщённая проверка: "машина/тачка как у <персона/персонажа>" + медиа-маркеры
        # Примеры: "машина как у джокера", "тачка как у гарри поттера", "авто как у iron man"
        if re.search(r"\b(машин\w*|тачк\w*|авто)\s+как\s+у\s+.+", query_lower):
            media_markers = [
                'герой', 'персонаж', 'комикс', 'аниме', 'манга', 'фильм', 'кино',
                'супергер', 'вселенн', 'marvel', 'dc', 'харри поттер', 'гарри поттер',
                'человек-паук', 'spider-man', 'iron man', 'джокер', 'joker', 'веном', 'venom',
                'бэтмен', 'batman', 'superman', 'супермен', 'аквамен', 'aquaman', 'тор', 'thor'
            ]
            if any(marker in query_lower for marker in media_markers):
                return False

        # Ботанические/природные вопросы (не автомобильные)
        botany_terms = [
            'цветет', 'цветёт', 'цветение', 'вишня', 'яблоня', 'сакура', 'дерево', 'растение', 'сад', 'цветок', 'цветы'
        ]
        if any(term in query_lower for term in botany_terms):
            return False

        # Нелепые/противоречивые запросы: агротермины вместе с автомобильными частями
        nonsense_phrases = [
            'урожай покрышек', 'урожай шин', 'цветение шин', 'цветут покрышки'
        ]
        if any(p in query_lower for p in nonsense_phrases):
            return False
        agriculture_terms = ['урожай', 'сбор урожая', 'жатва', 'посев', 'сажать', 'сеять', 'цветение', 'цветет', 'цветёт']
        car_parts_terms = ['шина', 'шины', 'покрыш', 'колес', 'двигател', 'коробк', 'сцеплен', 'тормоз', 'бампер', 'радиатор', 'кузов']
        if any(a in query_lower for a in agriculture_terms) and any(c in query_lower for c in car_parts_terms):
            return False

        # Общая проверка на бессмысленные сочетания (материалы/биология с автодеталями; погодные явления из автодеталей)
        bio_material_terms = ['дерево', 'деревянн', 'сакур', 'вишн', 'рыб', 'рыба', 'кора', 'листь', 'цветок', 'цветы', 'трава']
        weather_terms = ['дождь', 'снег', 'град', 'шторм', 'буря']
        # «X из Y»: двигатель/шины из дерева/сакуры/рыбы
        if re.search(r'(двигател\w*|шины|шина|покрыш\w*|колес\w*|бампер|радиатор|кузов)\s+из\s+(\w+)', query_lower):
            m = re.search(r'из\s+(\w+)', query_lower)
            if m and any(term in m.group(1) for term in bio_material_terms):
                return False
        # «урожай/цветение <автодетали>»
        if re.search(r'(урожай|посев|цветени[ея]|цветет|цветёт)\s+\w*\s*(шины|шина|покрыш\w*|двигател\w*|колес\w*)', query_lower):
            return False
        # «погодное явление из автодетали»
        if re.search(r'(дождь|снег|град|шторм|буря)\s+из\s+(шины|шина|покрыш\w*|колес\w*)', query_lower):
            return False

        # Быстрые авто-маркеры (для разрешения спорных кейсов)
        car_hint = any(kw in query_lower for kw in self.car_keywords)

        # Широкие неавтомобильные домены: если совпали и нет явных авто-маркеров — считаем неавтомобильным
        non_auto_domains = [
            # Погода/природа/ботаника (дополняет botany_terms)
            ['погода', 'температур', 'осадки', 'ветер', 'климат', 'гроз', 'радуг', 'ураган', 'тайфун'],
            # Медицина/здоровье
            ['здоровь', 'болезн', 'лечение', 'врач', 'симптом', 'диагноз', 'вакцин', 'иммунитет', 'терапи'],
            # Кулинария/еда
            ['рецепт', 'кулинари', 'готовк', 'ингредиент', 'блюд', 'диета', 'кухн'],
            # Политика/общество/право
            ['политик', 'выбор', 'право', 'закон', 'конституци', 'санкци', 'дипломат'],
            # Экономика/финансы (без авто)
            ['инфляци', 'бирж', 'валют', 'акци', 'облигаци', 'инвестиц', 'налог', 'бюджет'],
            # Религия/философия
            ['религи', 'философ', 'этик', 'смысл жизни', 'душа', 'сознани'],
            # Образование/наука
            ['университет', 'школ', 'экзамен', 'курс', 'лекци', 'гипотез', 'эксперимент'],
            # ИТ/программирование (вне авто-контекста)
            ['программирован', 'алгоритм', 'база данных', 'сервер', 'интернет', 'сет', 'протокол'],
            # Дом/быт
            ['ремонт', 'интерьер', 'мебел', 'уборк', 'стирк', 'глажк'],
            # Личное/общение
            ['здравств', 'привет', 'как дела', 'кто ты', 'расскажи о себе'],
            # Путешествия/туризм (без авто)
            ['виза', 'паспорт', 'отел', 'билет', 'туризм'],
            # Искусство/медиа
            ['кино', 'фильм', 'сериал', 'музык', 'картина', 'поэз', 'проз'],
        ]
        if not car_hint:
            for domain in non_auto_domains:
                if any(term in query_lower for term in domain):
                    return False

        for word, context_words in context_exclusions:
            if word in query_lower:
                # Проверяем, есть ли контекстные слова, указывающие на неавтомобильный контекст
                if any(context_word in query_lower for context_word in context_words):
                    return False
        
        # Проверяем наличие автомобильных ключевых слов
        car_score = 0
        for keyword in self.car_keywords:
            if keyword in query_lower:
                car_score += 1
        
        # Проверяем наличие общих ключевых слов
        general_score = 0
        for keyword in self.general_keywords:
            if keyword in query_lower:
                general_score += 1
        
        # Если есть явные автомобильные слова, считаем запрос автомобильным
        if car_score > 0:
            return True
        
        # Если есть только общие слова, считаем запрос общим
        if general_score > 0 and car_score == 0:
            return False
        # Проверяем специальные случаи для общих запросов
        general_patterns = [
                # Сложные запросы с множественными темами
                'сравни подходы', 'сравнительный анализ', 'проведи анализ',
                'эпидемии', 'чума', 'оспа', 'средневековье', 'эпоха Просвещения',
                'культурные представления', 'религиозные представления',
                'стихи', 'прозу', 'автор', 'Достоевского', 'философия искусства',
                'концепция авторства', 'творчество', 'ИИ создающий',
                'музыкальные жанры', 'классика', 'рок', 'электронная музыка',
                'мозговые волны', 'когнитивные функции', 'терапевтические эффекты',
                'религиозные войны', 'Ближний Восток', 'геополитические',
                'социокультурные паттерны', 'сравнительный анализ причин',
                'сравни подходы к профилактике', 'сравни подходы к лечению',
                'ИИ создающий стихи', 'ИИ создающий прозу',
                'музыкальные жанры классика', 'музыкальные жанры рок',
                'музыкальные жанры электронная музыка', 'мозговые волны уровень стресса',
                'когнитивные функции память внимание', 'терапевтические эффекты',
                'религиозные войны в Европе', 'религиозные войны Ближний Восток',
                'геополитические паттерны', 'социокультурные паттерны',
            
            # Дополнительные паттерны для сложных запросов
            'искусственного интеллекта', 'робототехники', 'смысла жизни', 'человеческого сознания',
            'этических дебатов', 'зеленой налоговой реформы', 'углеродный налог', 'субсидии на ВИЭ',
            'уровень инфляции', 'безработицу', 'конкурентоспособность промышленности',
            'профилактике и лечению эпидемий', 'средневековой Европе', 'эпоху Просвещения',
            'культурные и религиозные представления', 'физические принципы', 'технологические вызовы',
            'вакуумных поездов', 'Hyperloop', 'материалы', 'системы энергоснабжения',
            'социальных сетей', 'мессенджеров', 'эмоциональных связей', 'эмпатии', 'поколения Z',
            'генетического редактирования', 'CRISPR-Cas9', 'наследственных заболеваний',
            'медицинской эффективности', 'этических рисков', 'таяния вечной мерзлоты',
            'глобального климата', 'выбросы метана', 'различные музыкальные жанры',
            'мозговые волны', 'уровень стресса', 'когнитивные функции', 'память', 'внимание',
            'научно доказанные терапевтические эффекты', 'анализа данных', 'hard & soft skills',
            'образовательные траектории', 'религиозных войн в Европе', 'современных конфликтов',
            'геополитические и социокультурные паттерны', 'пищевой химии', 'средиземноморская диета',
            'ферментация', 'маринование', 'питательную ценность', 'усвояемость продуктов',
            'высокоинтенсивные интервальные тренировки', 'HIIT', 'метаболизм', 'выносливость',
            'психическую устойчивость', 'кардионагрузки', 'перетренированности',
            'международные соглашения', 'Парижское соглашение', 'Монреальский протокол',
            'глобальным потеплением', 'озоновыми дырами', 'юридические механизмы принуждения',
            'стриминговых платформ', 'Netflix', 'модели потребления кино', 'жанровые предпочтения',
            'кинопроцесс', 'финансирование', 'монтаж', 'кинотеатры',
            
            # Философские и научные термины
            'философия', 'этика', 'сознание', 'смысл жизни', 'человеческое сознание',
            'этические дебаты', 'мораль', 'ценности', 'истина', 'добро', 'зло',
            'свобода воли', 'детерминизм', 'экзистенциализм', 'гуманизм',
            
            # Технологии и ИИ
            'искусственный интеллект', 'ИИ', 'робототехника', 'технологии',
            'цифровизация', 'автоматизация', 'алгоритмы', 'машинное обучение',
            'нейросети', 'большие данные', 'анализ данных', 'криптовалюты',
            'блокчейн', 'виртуальная реальность', 'дополненная реальность',
            
            # Наука и исследования
            'наука', 'исследования', 'эксперименты', 'теория', 'гипотеза',
            'физика', 'химия', 'биология', 'генетика', 'нейробиология',
            'психология', 'социология', 'антропология', 'археология',
            
            # Медицина и здоровье
            'медицина', 'здоровье', 'лечение', 'профилактика', 'диагностика',
            'генетическое редактирование', 'CRISPR', 'эпидемии', 'вакцинация',
            'иммунитет', 'метаболизм', 'физиология',
            
            # Экономика и финансы
            'экономика', 'финансы', 'инфляция', 'безработица', 'конкурентоспособность',
            'налоговая реформа', 'углеродный налог', 'субсидии', 'инвестиции',
            'рынок', 'спрос', 'предложение', 'ВВП', 'инфраструктура',
            
            # Экология и климат
            'экология', 'климат', 'глобальное потепление', 'углеродный след',
            'возобновляемые источники энергии', 'ВИЭ', 'зеленая энергия',
            'вечная мерзлота', 'метан', 'озоновые дыры', 'загрязнение',
            
            # Политика и международные отношения
            'политика', 'международные отношения', 'геополитика', 'конфликты',
            'войны', 'религиозные войны', 'Ближний Восток', 'ЕС', 'ООН',
            'соглашения', 'протоколы', 'санкции', 'дипломатия',
            
            # История и культура
            'история', 'культура', 'средневековье', 'эпоха Просвещения',
            'религия', 'традиции', 'обычаи', 'цивилизация', 'архитектура',
            'памятники', 'музеи', 'наследие', 'археология',
            
            # Психология и отношения
            'психология', 'эмоции', 'эмпатия', 'отношения', 'дружба',
            'социальные сети', 'мессенджеры', 'поколение Z', 'когнитивные функции',
            'память', 'внимание', 'стресс', 'тревога', 'депрессия',
            
            # Искусство и творчество
            'искусство', 'творчество', 'литература', 'поэзия', 'проза',
            'авторство', 'философия искусства', 'стихи', 'автор', 'писатель',
            'художник', 'композитор', 'режиссер', 'актер',
            
            # Образование и работа
            'образование', 'работа', 'профессии', 'навыки', 'hard skills',
            'soft skills', 'образовательные траектории', 'университет', 'школа',
            'курсы', 'тренинги', 'сертификация', 'карьера',
            
            # Транспорт и логистика
            'транспорт', 'логистика', 'вакуумные поезда', 'Hyperloop',
            'материалы', 'энергоснабжение', 'безопасность', 'инфраструктура',
            'скорость', 'эффективность', 'экологичность',
            
            # Музыка и звук
            'музыка', 'музыкальные жанры', 'классика', 'рок', 'электронная музыка',
            'мозговые волны', 'терапевтические эффекты', 'звук', 'ритм',
            'мелодия', 'гармония', 'инструменты', 'оркестр',
            
            # Кулинария и питание
            'кулинария', 'питание', 'диета', 'средиземноморская диета',
            'пищевая химия', 'ферментация', 'маринование', 'продукты',
            'ингредиенты', 'готовка', 'рецепты', 'калории', 'витамины',
            
            # Спорт и фитнес
            'спорт', 'фитнес', 'тренировки', 'HIIT', 'кардионагрузки',
            'выносливость', 'метаболизм', 'перетренированность', 'физическая активность',
            'упражнения', 'соревнования', 'олимпиада', 'чемпионат',
            
            # Кино и медиа
            'кино', 'фильмы', 'стриминговые платформы', 'Netflix', 'кинопроцесс',
            'финансирование', 'монтаж', 'кинотеатры', 'жанры', 'зрители',
            'актеры', 'режиссеры', 'сценарий', 'спецэффекты',
            
            # Юриспруденция и право
            'юриспруденция', 'право', 'законы', 'соглашения', 'протоколы',
            'международное право', 'санкции', 'обязательства', 'принуждение',
            'юридические механизмы', 'суд', 'законодательство',
            
            # География и регионы
            'география', 'регионы', 'Сибирь', 'Канада', 'Европа',
            'Ближний Восток', 'страны', 'города', 'климат', 'ландшафт',
            'природные ресурсы', 'территория',
            
            # Время и прогнозы
            'будущее', 'прогнозы', 'ближайшие 50 лет', 'через 10 лет',
            'тенденции', 'развитие', 'эволюция', 'прогресс', 'инновации',
            'изменения', 'трансформация',
            
            # Сравнения и анализ
            'сравни', 'сравнительный анализ', 'анализ', 'исследование',
            'изучение', 'объясни', 'опиши', 'проанализируй', 'спрогнозируй',
            'обсуди', 'проведи анализ', 'сравни подходы',
            
            # Данные и исследования
            'данные', 'исследования', 'статистика', 'методы', 'результаты',
            'выводы', 'доказательства', 'научно доказанные', 'эффективность',
            'риски', 'последствия', 'влияние'
        ]
        
        for pattern in general_patterns:
            if pattern in query_lower:
                return False
        
        # Дополнительная проверка для сложных научных и философских запросов
        scientific_terms = [
            'искусственного интеллекта', 'робототехники', 'смысла жизни', 'человеческого сознания',
            'этических дебатов', 'зеленой налоговой реформы', 'углеродный налог', 'субсидии на ВИЭ',
            'профилактике и лечению эпидемий', 'средневековой Европе', 'эпоху Просвещения',
            'культурные и религиозные представления', 'физические принципы', 'технологические вызовы',
            'вакуумных поездов', 'Hyperloop', 'социальных сетей', 'мессенджеров', 'эмоциональных связей',
            'генетического редактирования', 'CRISPR-Cas9', 'наследственных заболеваний',
            'таяния вечной мерзлоты', 'глобального климата', 'различные музыкальные жанры',
            'мозговые волны', 'когнитивные функции', 'научно доказанные терапевтические эффекты',
            'религиозных войн в Европе', 'современных конфликтов', 'геополитические и социокультурные паттерны',
            'пищевой химии', 'средиземноморская диета', 'высокоинтенсивные интервальные тренировки',
            'международные соглашения', 'Парижское соглашение', 'Монреальский протокол',
            'стриминговых платформ', 'Netflix', 'модели потребления кино', 'кинопроцесс'
        ]
        
        # Если запрос содержит научные термины, считаем его общим
        for term in scientific_terms:
            if term in query_lower:
                return False
        
        # Проверяем наличие философских и абстрактных концепций
        philosophical_terms = [
            'философия', 'этика', 'сознание', 'смысл жизни', 'человеческое сознание',
            'этические дебаты', 'мораль', 'ценности', 'истина', 'добро', 'зло',
            'свобода воли', 'детерминизм', 'экзистенциализм', 'гуманизм', 'творчество',
            'авторство', 'философия искусства', 'концепция авторства'
        ]
        
        for term in philosophical_terms:
            if term in query_lower:
                return False
        
        # Если нет ни тех, ни других слов, используем эвристики
        return self._use_heuristics(query_lower)
    
    def _use_heuristics(self, query: str) -> bool:
        """
        Использует эвристики для определения типа запроса
        """
        # Сложные научные и философские запросы обычно общие
        complex_scientific_patterns = [
            'искусственного интеллекта', 'робототехники', 'смысла жизни', 'человеческого сознания',
            'этических дебатов', 'зеленой налоговой реформы', 'углеродный налог', 'субсидии на ВИЭ',
            'профилактике и лечению эпидемий', 'средневековой Европе', 'эпоху Просвещения',
            'культурные и религиозные представления', 'физические принципы', 'технологические вызовы',
            'вакуумных поездов', 'Hyperloop', 'социальных сетей', 'мессенджеров', 'эмоциональных связей',
            'генетического редактирования', 'CRISPR-Cas9', 'наследственных заболеваний',
            'таяния вечной мерзлоты', 'глобального климата', 'различные музыкальные жанры',
            'мозговые волны', 'когнитивные функции', 'научно доказанные терапевтические эффекты',
            'религиозных войн в Европе', 'современных конфликтов', 'геополитические и социокультурные паттерны',
            'пищевой химии', 'средиземноморская диета', 'высокоинтенсивные интервальные тренировки',
            'международные соглашения', 'Парижское соглашение', 'Монреальский протокол',
            'стриминговых платформ', 'Netflix', 'модели потребления кино', 'кинопроцесс',
            'философия', 'этика', 'сознание', 'мораль', 'ценности', 'истина', 'добро', 'зло',
            'свобода воли', 'детерминизм', 'экзистенциализм', 'гуманизм', 'творчество',
            'авторство', 'философия искусства', 'концепция авторства'
        ]
        
        for pattern in complex_scientific_patterns:
            if pattern in query:
                return False
        
        # Запросы с вопросами о характеристиках обычно автомобильные
        if any(word in query for word in ['мощность', 'расход', 'объем', 'размер', 'вес', 'скорость']):
            return True
        
        # Запросы с вопросами о цене могут быть автомобильными
        if any(word in query for word in ['стоимость', 'цена', 'бюджет', 'дорого', 'дешево', 'миллионов', 'тысяч']):
            return True
        
        # Запросы с вопросами о поиске/выборе могут быть автомобильными
        if any(word in query for word in ['найти', 'выбрать', 'посоветуй', 'рекомендуй', 'покажи']):
            return True
        
        # Запросы с приветствиями обычно общие
        if any(word in query for word in ['привет', 'здравствуй', 'добрый']):
            return False
        
        # Запросы о погоде обычно общие
        if any(word in query for word in ['погода', 'температура', 'дождь', 'снег']):
            return False
        
        # Запросы о времени обычно общие
        if any(word in query for word in ['время', 'часы', 'дата', 'сегодня', 'сколько времени']):
            return False
        
        # Запросы о математике обычно общие
        if any(word in query for word in ['посчитай', 'вычисли', 'математика', 'арифметика']):
            return False
        
        # Запросы о себе/системе обычно общие
        if any(word in query for word in ['кто ты', 'что ты умеешь', 'расскажи о себе', 'как тебя зовут']):
            return False
        
        # Запросы о личных вещах (рыбки, домашние животные) обычно общие
        if any(word in query for word in ['рыбки', 'животные', 'питомцы', 'домашние', 'живут']):
            return False
        
        # Запросы о отслеживании разговора обычно общие
        if any(word in query for word in ['отслеживаешь', 'тему', 'общения', 'нашего']):
            return False
        
        # Запросы о том, какая марка наиболее быстрая - это общий вопрос
        if 'какая марка наиболее быстрая' in query:
            return False
        
        # По умолчанию считаем запрос автомобильным (так как это автомобильная система)
        return True
    
    def is_credit_related(self, query: str) -> bool:
        """
        Проверяет, является ли запрос кредитным
        """
        credit_keywords = [
            'кредит', 'кридит', 'критит', 'рассчитать', 'рассчитай', 'платеж', 'платежи',
            'ежемесячный', 'ставка', 'взнос', 'срок', 'переплата', 'кредитный калькулятор',
            'кридитный калькулятор', 'крититный калькулятор', 'финансирование', 'лизинг'
        ]
        
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in credit_keywords)
    
    def is_search_related(self, query: str) -> bool:
        """
        Проверяет, является ли запрос поисковым
        """
        search_keywords = [
            'найди', 'найти', 'покажи', 'показать', 'ищи', 'искать', 'поиск',
            'есть ли', 'какие', 'сколько стоит', 'цена', 'стоимость'
        ]
        
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in search_keywords)
    
    def is_compare_related(self, query: str) -> bool:
        """
        Проверяет, является ли запрос сравнительным
        """
        compare_keywords = [
            'сравни', 'сравнение', 'что лучше', 'разница', 'отличия', 'против',
            'чем отличается', 'какой лучше', 'сопоставь'
        ]
        
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in compare_keywords)
    
    def is_count_related(self, query: str) -> bool:
        """
        Проверяет, является ли запрос о количестве
        """
        count_keywords = [
            'сколько', 'количество', 'число', 'всего', 'всего есть', 'есть ли',
            'сколько стоит', 'сколько стоит', 'цену', 'стоимость'
        ]
        
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in count_keywords)
    
    def is_informational_query(self, query: str) -> bool:
        """Проверяет, является ли запрос информационным (расскажи, что такое, опиши и т.д.)"""
        query_lower = query.lower()
        
        # Ключевые слова для информационных запросов
        informational_keywords = [
            'расскажи', 'расскажите', 'что такое', 'что это', 'что значит',
            'опиши', 'опишите', 'описание', 'характеристики', 'особенности',
            'информация', 'сведения', 'данные', 'детали', 'подробности',
            'объясни', 'объясните', 'поясни', 'поясните', 'расскажи про',
            'расскажите про', 'расскажи о', 'расскажите о', 'что представляет собой',
            'как работает', 'как устроен', 'как выглядит', 'какие есть',
            'какие бывают', 'виды', 'типы', 'модели', 'серии', 'поколения'
        ]
        
        for keyword in informational_keywords:
            if keyword in query_lower:
                return True
        
        return False
    
    def is_search_query(self, query: str) -> bool:
        """Проверяет, является ли запрос поисковым (просто название бренда/модели)"""
        query_lower = query.lower().strip()
        
        # Если запрос состоит только из названия бренда/модели без информационных слов
        if not self.is_informational_query(query):
            # Проверяем, содержит ли запрос только автомобильные бренды/модели
            car_brands = [
                'bmw', 'mercedes', 'audi', 'volkswagen', 'toyota', 'honda', 'nissan', 'ford', 'chevrolet',
                'бмв', 'мерседес', 'ауди', 'фольксваген', 'тойота', 'хонда', 'ниссан', 'форд', 'шевроле',
                'мазда', 'мицубиси', 'субару', 'лексус', 'инфинити', 'акура', 'киа', 'хендай', 'рено',
                'пежо', 'ситроен', 'опель', 'фиат', 'альфа ромео', 'ланча', 'ферари', 'ламборгини',
                'порше', 'ягуар', 'ленд ровер', 'роллс ройс', 'бентли', 'астон мартин', 'маклерен'
            ]
            
            # Убираем лишние пробелы и проверяем
            clean_query = ' '.join(query_lower.split())
            
            # Если запрос состоит только из бренда или бренда + модели
            for brand in car_brands:
                if clean_query.startswith(brand) or clean_query == brand:
                    return True
        
        return False
    
    def route_query(self, query: str, user_id: str = "default") -> Dict[str, Any]:
        """
        Маршрутизирует запрос к соответствующему обработчику
        
        Args:
            query: Текст запроса
            user_id: ID пользователя
            
        Returns:
            Dict с результатом обработки
        """
        try:
            # Проверяем тип запроса
            is_credit_query = self.is_credit_related(query)
            is_search_query = self.is_search_related(query)
            is_compare_query = self.is_compare_related(query)
            is_count_query = self.is_count_related(query)
            is_car_query = self.is_car_related(query)
            is_informational_query = self.is_informational_query(query)
            is_simple_search_query = self.is_search_query(query)
            
            # Приоритет обработки:
            # 1. Кредитные запросы
            # 2. Информационные запросы (расскажи про BMW) → Llama
            # 3. Простые поисковые запросы (BMW, BMW X3) → поиск
            # 4. Сравнительные запросы
            # 5. Запросы о количестве
            # 6. Общие автомобильные запросы
            # 7. Общие запросы (не автомобильные)
            
            if is_credit_query:
                logger.info(f"Кредитный запрос: {query}")
                return self._process_credit_query(query, user_id)
            elif is_informational_query and is_car_query:
                logger.info(f"Информационный автомобильный запрос: {query}")
                return self._process_informational_query(query, user_id)
            elif is_simple_search_query:
                logger.info(f"Простой поисковый запрос: {query}")
                return self._process_search_query(query, user_id)
            elif is_search_query or is_compare_query or is_count_query or is_car_query:
                logger.info(f"Автомобильный запрос: {query}")
                return self._process_car_query(query, user_id)
            else:
                logger.info(f"Общий запрос: {query}")
                return self._process_general_query(query, user_id)
                
        except Exception as e:
            logger.error(f"Ошибка при маршрутизации запроса: {e}")
            return {
                "success": False,
                "error": "Ошибка обработки запроса",
                "message": "Извините, произошла ошибка при обработке вашего запроса."
            }
    
    def _process_credit_query(self, query: str, user_id: str) -> Dict[str, Any]:
        """
        Обрабатывает кредитный запрос через AutoSearchProcessor
        """
        try:
            from modules.search.auto_search_processor import AutoSearchProcessor
            auto_processor = AutoSearchProcessor()
            
            logger.info(f"Обрабатываем кредитный запрос: {query}")
            result = auto_processor._process_credit_query(query, {}, user_id)
            
            return {
                "success": True,
                "is_car_query": True,
                "data": result,
                "message": "Кредитный запрос обработан"
            }
                
        except Exception as e:
            logger.error(f"Ошибка при обработке кредитного запроса: {e}")
            return {
                "success": False,
                "error": "Ошибка обработки",
                "message": "Извините, не удалось обработать кредитный запрос."
            }
    
    def _process_car_query(self, query: str, user_id: str) -> Dict[str, Any]:
        """
        Обрабатывает автомобильный запрос через улучшенную систему
        """
        try:
            # Сначала проверяем, нужно ли выполнить автоматический поиск
            from modules.search.auto_search_processor import AutoSearchProcessor
            auto_processor = AutoSearchProcessor()
            
            if auto_processor.should_auto_search(query):
                logger.info(f"Выполняем автоматический поиск для запроса: {query}")
                result = auto_processor.process_search_query(query, user_id)
                return {
                    "success": True,
                    "is_car_query": True,
                    "data": result,
                    "message": "Автоматический поиск выполнен"
                }
            
            # Если автоматический поиск не нужен, используем улучшенный процессор
            from enhanced_llama_processor import EnhancedLlamaProcessor
            processor = EnhancedLlamaProcessor()
            
            # Обрабатываем запрос
            result = processor.process_query(query, user_id)
            
            return {
                "success": True,
                "is_car_query": True,
                "data": result,
                "message": "Запрос обработан улучшенной автомобильной системой"
            }
                
        except Exception as e:
            logger.error(f"Ошибка при обработке автомобильного запроса: {e}")
            return {
                "success": False,
                "error": "Ошибка обработки",
                "message": "Извините, не удалось обработать автомобильный запрос."
            }
    
    def _process_general_query(self, query: str, user_id: str) -> Dict[str, Any]:
        """
        Обрабатывает общий запрос через Ollama
        """
        try:
            # Отправляем запрос в Ollama
            response = requests.post(
                "http://localhost:11434/api/generate",
                json={
                    "model": "llama3:8b",
                    "prompt": self._build_ollama_prompt(query),
                    "stream": False
                },
                timeout=300
            )
            
            if response.status_code == 200:
                result = response.json()
                return {
                    "success": True,
                    "is_car_query": False,
                    "data": {
                        "type": "ollama_response",
                        "message": result.get('response', 'Извините, не удалось получить ответ.'),
                        "ollama": True
                    },
                    "message": "Запрос обработан Ollama"
                }
            else:
                return {
                    "success": False,
                    "error": f"Ошибка Ollama API: {response.status_code}",
                    "message": "Извините, не удалось обработать общий запрос."
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Ошибка при отправке общего запроса: {e}")
            return {
                "success": False,
                "error": "Ошибка соединения с Ollama",
                "message": "Извините, не удалось подключиться к Ollama."
            }
    
    def _process_informational_query(self, query: str, user_id: str) -> Dict[str, Any]:
        """
        Обрабатывает информационный запрос через Llama (расскажи про BMW, что такое BMW и т.д.)
        """
        try:
            # Отправляем запрос в Ollama
            response = requests.post(
                "http://localhost:11434/api/generate",
                json={
                    "model": "llama3:8b",
                    "prompt": self._build_ollama_prompt(query),
                    "stream": False
                },
                timeout=300
            )
            
            if response.status_code == 200:
                result = response.json()
                return {
                    "success": True,
                    "is_car_query": True,
                    "data": {
                        "type": "informational",
                        "message": result.get('response', 'Извините, не удалось получить информацию.'),
                        "ollama": True
                    },
                    "message": "Информационный запрос обработан через Llama"
                }
            else:
                return {
                    "success": False,
                    "error": f"Ошибка Ollama API: {response.status_code}",
                    "message": "Извините, не удалось обработать информационный запрос."
                }
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Ошибка при отправке информационного запроса: {e}")
            return {
                "success": False,
                "error": "Ошибка соединения с Ollama",
                "message": "Извините, не удалось подключиться к Ollama."
            }
    
    def _process_search_query(self, query: str, user_id: str) -> Dict[str, Any]:
        """
        Обрабатывает простой поисковый запрос (BMW, BMW X3) как поиск
        """
        try:
            from modules.search.auto_search_processor import AutoSearchProcessor
            auto_processor = AutoSearchProcessor()
            
            logger.info(f"Обрабатываем простой поисковый запрос: {query}")
            result = auto_processor.process_search_query(query, user_id)
            
            return {
                "success": True,
                "is_car_query": True,
                "data": result,
                "message": "Поисковый запрос обработан"
            }
                
        except Exception as e:
            logger.error(f"Ошибка при обработке поискового запроса: {e}")
            return {
                "success": False,
                "error": "Ошибка обработки",
                "message": "Извините, не удалось обработать поисковый запрос."
            }
    
    def _build_ollama_prompt(self, query: str) -> str:
        """
        Строит промпт для Ollama
        """
        return f"""Вы являетесь профессиональным автоассистентом компании ААА МОТОРС - ведущего автомобильного дилера в России. 

ВАШИ ОБЯЗАННОСТИ:
- Отвечайте на вопросы клиентов максимально вежливо, дружелюбно и профессионально
- Обращайтесь к клиентам на "Вы" с большой буквы
- Используйте теплый, приветливый тон, но оставайтесь профессиональным
- Предоставляйте полные, полезные и информативные ответы
- Помогайте с любыми вопросами о автомобилях, сервисе, финансировании
- Если вопрос не связан с автомобилями, отвечайте вежливо и тактично направляйте к автомобильной тематике
- Всегда будьте готовы помочь и поддержать клиента

СТИЛЬ ОБЩЕНИЯ:
- Строго формальное обращение на "Вы" с большой буквы
- Не начинайте каждый ответ с «Здравствуйте». Используйте приветствие только когда уместно.
- Использование "Вас", "Вам", "Ваш" вместо "тебя", "тебе", "твой"
- Использование "хотите", "интересуетесь" вместо "хочешь", "интересуешься"
- Профессиональный, но дружелюбный тон
- Никаких неформальных обращений
- Полезный и информативный

ЛАКОНИЧНОСТЬ:
- Отвечайте кратко и по делу. Держите ответы примерно в 2 раза короче стандартных.
- Избегайте лишних вступлений и повторов. Сразу переходите к сути и следующему шагу для клиента.

ОТВЕТЫ НА ОБЩИЕ ВОПРОСЫ:
- Если спрашивают "как тебя зовут" - отвечайте "Меня зовут МОТОРЧИК, я ваш автоассистент"
- Если спрашивают "что ты умеешь" - расскажите о возможностях автоассистента
- Если спрашивают "отслеживаешь ли ты тему нашего общения" - отвечайте "Да, я отслеживаю контекст нашего разговора"
- Если спрашивают о рыбках или домашних животных - отвечайте вежливо, что вы автоассистент
- Если спрашивают "какая марка наиболее быстрая" - расскажите о спортивных автомобилях

КОМПАНИЯ ААА МОТОРС:
- Официальный дилер ведущих автомобильных брендов
- Полный спектр услуг: продажа, сервис, кредитование, страхование
- Профессиональные консультации и индивидуальный подход
- Гарантия качества и надежности

ВОПРОС КЛИЕНТА: {query}

Пожалуйста, дайте дружелюбный, вежливый и профессиональный ответ:"""

# Создаем глобальный экземпляр роутера
router = SmartQueryRouter()

def route_query(query: str, user_id: str = "default") -> Dict[str, Any]:
    """
    Глобальная функция для маршрутизации запросов
    
    Args:
        query: Текст запроса
        user_id: ID пользователя
        
    Returns:
        Dict с результатом обработки
    """
    return router.route_query(query, user_id)

if __name__ == "__main__":
    # Тестирование роутера
    test_queries = [
        # Автомобильные запросы
        "найди BMW X5",
        "покажи красные машины",
        "сравни Toyota Camry и Honda Accord",
        "какая цена на Mercedes",
        "посоветуй семейный автомобиль",
        "найди машину до 2 миллионов",
        
        # Общие запросы
        "привет, как дела?",
        "какая погода в Москве?",
        "кто ты?",
        "расскажи анекдот",
        "сколько времени?",
        "как дела?",
        "что ты умеешь?",
        "какая сегодня дата?",
        "посчитай 2+2",
        "расскажи о себе"
    ]
    
    print("=== ТЕСТИРОВАНИЕ УМНОГО РОУТЕРА ===")
    print()
    
    for query in test_queries:
        is_car = router.is_car_related(query)
        print(f"Запрос: '{query}'")
        print(f"Тип: {'Автомобильный' if is_car else 'Общий'}")
        print("-" * 50) 