#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å 150 –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ v3.0
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from enhanced_query_router_v3 import EnhancedQueryRouterV3, QueryType
from extended_test_queries import get_extended_test_queries, get_statistics
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_extended_150():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å 150 –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    
    router = EnhancedQueryRouterV3()
    test_queries = get_extended_test_queries()
    
    print("üéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –¢–ï–°–¢ –° 150 –ó–ê–ü–†–û–°–ê–ú–ò")
    print("=" * 70)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    stats = get_statistics()
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í–´–• –ó–ê–ü–†–û–°–û–í:")
    for query_type, count in stats.items():
        print(f"  {query_type.value}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"  –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û: {len(test_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤\n")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    results_by_type = {}
    correct_by_type = {}
    
    for query_type in QueryType:
        results_by_type[query_type] = 0
        correct_by_type[query_type] = 0
    
    total_correct = 0
    total_tests = len(test_queries)
    
    print("üß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 70)
    
    errors = []
    
    for i, (query, expected_type, should_process) in enumerate(test_queries, 1):
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        actual_type = router.classifier.classify_query(query)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        results_by_type[expected_type] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if actual_type == expected_type:
            correct_by_type[expected_type] += 1
            total_correct += 1
        else:
            errors.append((i, query, expected_type, actual_type, should_process))
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –æ—à–∏–±–æ–∫ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    for i, query, expected, actual, should_process in errors[:10]:
        print(f"‚ùå {i:3d}. '{query}'")
        print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {expected.value}")
        print(f"    –ü–æ–ª—É—á–µ–Ω–æ:  {actual.value}")
        print(f"    –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è: {'–î–∞' if should_process else '–ù–µ—Ç'}")
        print()
    
    if len(errors) > 10:
        print(f"... –∏ –µ—â–µ {len(errors) - 10} –æ—à–∏–±–æ–∫")
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accuracy = (total_correct / total_tests) * 100
    
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 70)
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {total_correct}/{total_tests}")
    print(f"üìä –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    
    if accuracy >= 95:
        print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ—á–Ω–æ—Å—Ç—å >= 95%")
    elif accuracy >= 90:
        print("üëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ—á–Ω–æ—Å—Ç—å >= 90%")
    elif accuracy >= 85:
        print("‚úÖ –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ—á–Ω–æ—Å—Ç—å >= 85%")
    else:
        print("‚ö†Ô∏è –ù–£–ñ–ù–û –£–õ–£–ß–®–ò–¢–¨! –¢–æ—á–Ω–æ—Å—Ç—å < 85%")
    
    print("\nüìä –¢–û–ß–ù–û–°–¢–¨ –ü–û –¢–ò–ü–ê–ú –ó–ê–ü–†–û–°–û–í:")
    print("-" * 70)
    
    for query_type in QueryType:
        if results_by_type[query_type] > 0:
            type_accuracy = (correct_by_type[query_type] / results_by_type[query_type]) * 100
            status = "‚úÖ" if type_accuracy >= 90 else "‚ö†Ô∏è" if type_accuracy >= 80 else "‚ùå"
            print(f"{status} {query_type.value:25s}: {correct_by_type[query_type]:2d}/{results_by_type[query_type]:2d} ({type_accuracy:5.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤
    print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –¢–ò–ü–û–í:")
    print("-" * 70)
    
    problem_types = []
    for query_type in QueryType:
        if results_by_type[query_type] > 0:
            type_accuracy = (correct_by_type[query_type] / results_by_type[query_type]) * 100
            if type_accuracy < 90:
                problem_types.append((query_type, type_accuracy))
    
    if problem_types:
        for query_type, accuracy in sorted(problem_types, key=lambda x: x[1]):
            print(f"‚ö†Ô∏è {query_type.value}: {accuracy:.1f}% —Ç–æ—á–Ω–æ—Å—Ç—å")
    else:
        print("‚úÖ –í—Å–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ—Ç–ª–∏—á–Ω—É—é —Ç–æ—á–Ω–æ—Å—Ç—å!")
    
    return accuracy, errors

def analyze_error_patterns(errors):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫"""
    if not errors:
        print("\nüéâ –û–®–ò–ë–û–ö –ù–ï–¢! –ò–¥–µ–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è!")
        return
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó {len(errors)} –û–®–ò–ë–û–ö:")
    print("-" * 70)
    
    error_patterns = {}
    for i, query, expected, actual, should_process in errors:
        pattern = f"{expected.value} -> {actual.value}"
        if pattern not in error_patterns:
            error_patterns[pattern] = []
        error_patterns[pattern].append(query)
    
    print("üìã –¢–û–ü-5 –ü–ê–¢–¢–ï–†–ù–û–í –û–®–ò–ë–û–ö:")
    for pattern, queries in sorted(error_patterns.items(), key=lambda x: len(x[1]), reverse=True)[:5]:
        print(f"\nüî∏ {pattern} ({len(queries)} –æ—à–∏–±–æ–∫):")
        for query in queries[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
            print(f"  - '{query}'")
        if len(queries) > 3:
            print(f"  ... –∏ –µ—â–µ {len(queries) - 3}")

def test_router_responses_sample():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞ –Ω–∞ –≤—ã–±–æ—Ä–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    router = EnhancedQueryRouterV3()
    
    print("\nüîß –¢–ï–°–¢ –û–¢–í–ï–¢–û–í –†–û–£–¢–ï–†–ê (–í–´–ë–û–†–ö–ê):")
    print("=" * 70)
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–∏–º–µ—Ä—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    sample_queries = [
        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ
        "–ß—Ç–æ —Ç–∞–∫–æ–µ ABS?",
        "–ù–∞–π–¥–∏ –∫—Ä–∞—Å–Ω—ã–π BMW",
        "–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∞–≤—Ç–æ –¥–ª—è —Å–µ–º—å–∏",
        "–ß—Ç–æ –ª—É—á—à–µ: –±–µ–Ω–∑–∏–Ω –∏–ª–∏ –¥–∏–∑–µ–ª—å?",
        "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?",
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–º–æ—â—å
        "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
        
        # –ë–∞–∑–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ
        "–ü—Ä–∏–≤–µ—Ç",
        
        # –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ
        "–†–∞—Å—Å—á–∏—Ç–∞–π –∫—Ä–µ–¥–∏—Ç –Ω–∞ 2 –º–ª–Ω",
        
        # –ù–µ–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ–≥–æ–¥—É",
        "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞?"
    ]
    
    for query in sample_queries:
        result = router.route_query(query)
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å: '{query}'")
        print(f"   –¢–∏–ø: {result['type']}")
        print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω: {result.get('rejected', False)}")
        print(f"   Mistral: {result['mistral_used']}")
        if result.get('rejected'):
            print(f"   –û—Ç–≤–µ—Ç: {result['message'][:80]}...")
        print("-" * 50)

if __name__ == "__main__":
    accuracy, errors = test_extended_150()
    analyze_error_patterns(errors)
    test_router_responses_sample()
    
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨ –° 150 –ó–ê–ü–†–û–°–ê–ú–ò: {accuracy:.1f}%")
    
    if accuracy >= 95:
        print("üèÜ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
    elif accuracy >= 90:
        print("üëç –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û!")
    else:
        print("üìà –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
