from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
import os
import json
import requests
from datetime import datetime
import wikipedia
from dotenv import load_dotenv
import threading
import queue
import re
import math
import time

load_dotenv()

app = Flask(__name__)
CORS(app)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY', 'your_weather_api_key')
NEWS_API_KEY = os.getenv('NEWS_API_KEY', 'your_news_api_key')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
model_loaded = True  # –í—Å–µ–≥–¥–∞ True –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –≤–µ—Ä—Å–∏–∏
model_loading = False

def get_weather(city):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"""
    try:
        # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        if WEATHER_API_KEY == 'your_weather_api_key':
            return {
                'city': city,
                'temperature': 22,
                'feels_like': 24,
                'description': '—è—Å–Ω–æ',
                'humidity': 65,
                'wind_speed': 3.2,
                'pressure': 1013
            }
        
        url = f"http://api.openweathermap.org/data/2.5/weather"
        params = {
            'q': city,
            'appid': WEATHER_API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            weather_info = {
                'city': data['name'],
                'temperature': round(data['main']['temp']),
                'feels_like': round(data['main']['feels_like']),
                'description': data['weather'][0]['description'],
                'humidity': data['main']['humidity'],
                'wind_speed': data['wind']['speed'],
                'pressure': data['main']['pressure']
            }
            return weather_info
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {e}")
        return None

def get_news(query="–Ω–æ–≤–æ—Å—Ç–∏"):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        # –ï—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        if NEWS_API_KEY == 'your_news_api_key':
            return [
                {
                    'title': '–î–µ–º–æ –Ω–æ–≤–æ—Å—Ç—å 1: –í–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
                    'description': '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.',
                    'url': 'https://example.com/news1',
                    'publishedAt': '2025-07-31T10:00:00Z'
                },
                {
                    'title': '–î–µ–º–æ –Ω–æ–≤–æ—Å—Ç—å 2: –†–∞–∑–≤–∏—Ç–∏–µ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —á–∏—Å—Ç—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
                    'description': '–ù–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã –∏ —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è.',
                    'url': 'https://example.com/news2',
                    'publishedAt': '2025-07-31T09:30:00Z'
                },
                {
                    'title': '–î–µ–º–æ –Ω–æ–≤–æ—Å—Ç—å 3: –ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ –º–µ–¥–∏—Ü–∏–Ω–µ',
                    'description': '–ü–µ—Ä–µ–¥–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ª–µ—á–µ–Ω–∏—è –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.',
                    'url': 'https://example.com/news3',
                    'publishedAt': '2025-07-31T09:00:00Z'
                }
            ]
        
        url = "https://newsapi.org/v2/everything"
        params = {
            'q': query,
            'apiKey': NEWS_API_KEY,
            'language': 'ru',
            'sortBy': 'publishedAt',
            'pageSize': 5
        }
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            articles = []
            for article in data.get('articles', []):
                articles.append({
                    'title': article['title'],
                    'description': article['description'],
                    'url': article['url'],
                    'publishedAt': article['publishedAt']
                })
            return articles
        else:
            return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []

def get_wikipedia_info(query):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Wikipedia"""
    try:
        wikipedia.set_lang('ru')
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        search_results = wikipedia.search(query, results=3)
        if search_results:
            page = wikipedia.page(search_results[0])
            summary = wikipedia.summary(search_results[0], sentences=3)
            return {
                'title': page.title,
                'summary': summary,
                'url': page.url
            }
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Wikipedia: {e}")
        return None

def calculate_expression(expression):
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–∫–æ–±–æ–∫
        clean_expr = re.sub(r'[^0-9+\-*/().]', '', expression)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if not re.match(r'^[0-9+\-*/().\s]+$', clean_expr):
            return None, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å–∫–æ–±–æ–∫
        if clean_expr.count('(') != clean_expr.count(')'):
            return None, "–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏"
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = eval(clean_expr)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
        if not math.isfinite(result):
            return None, "–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"
        
        return result, None
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {str(e)}"

def convert_currency(amount, from_currency, to_currency):
    """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"""
    try:
        # –ü—Ä–æ—Å—Ç—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API)
        rates = {
            'USD': {'RUB': 95.0, 'EUR': 0.85, 'CNY': 6.5, 'GBP': 0.78},
            'EUR': {'RUB': 112.0, 'USD': 1.18, 'CNY': 7.65, 'GBP': 0.92},
            'RUB': {'USD': 0.0105, 'EUR': 0.0089, 'CNY': 0.068, 'GBP': 0.0082},
            'CNY': {'USD': 0.154, 'EUR': 0.131, 'RUB': 14.7, 'GBP': 0.12},
            'GBP': {'USD': 1.28, 'EUR': 1.09, 'RUB': 122.0, 'CNY': 8.33}
        }
        
        if from_currency == to_currency:
            return amount
        
        if from_currency in rates and to_currency in rates[from_currency]:
            return round(amount * rates[from_currency][to_currency], 2)
        else:
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç: {e}")
        return None

def translate_text(text, target_lang='en'):
    """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ API)"""
    try:
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        translations = {
            '–ø—Ä–∏–≤–µ—Ç': 'hello',
            '–ø–æ–∫–∞': 'goodbye',
            '—Å–ø–∞—Å–∏–±–æ': 'thank you',
            '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞': 'please',
            '–¥–∞': 'yes',
            '–Ω–µ—Ç': 'no',
            '—Ö–æ—Ä–æ—à–æ': 'good',
            '–ø–ª–æ—Ö–æ': 'bad',
            '–∫—Ä–∞—Å–∏–≤–æ': 'beautiful',
            '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ': 'interesting',
            '—Å–ª–æ–∂–Ω–æ': 'difficult',
            '–ª–µ–≥–∫–æ': 'easy',
            '–±–æ–ª—å—à–æ–π': 'big',
            '–º–∞–ª–µ–Ω—å–∫–∏–π': 'small',
            '–Ω–æ–≤—ã–π': 'new',
            '—Å—Ç–∞—Ä—ã–π': 'old'
        }
        
        if target_lang == 'en':
            return translations.get(text.lower(), f"[–ü–µ—Ä–µ–≤–æ–¥: {text}]")
        else:
            return f"[–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ {target_lang}: {text}]"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return None

def generate_ai_response(message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ—Å—Ç–æ–≥–æ AI"""
    try:
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        message_lower = message.lower()
        
        responses = {
            '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! üòä',
            '–∫–∞–∫ –¥–µ–ª–∞': '–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ê —É —Ç–µ–±—è –∫–∞–∫ –¥–µ–ª–∞?',
            '–∞–Ω–µ–∫–¥–æ—Ç': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –ª–∏—Ñ—Ç, –∞ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ "JS" –∏ —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π –≤–Ω–∏–∑. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ø–æ–¥—É–º–∞–ª: "–û, JavaScript!" üòÑ',
            '—Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ': '–í –º–∏—Ä–µ –∫–æ–¥–∞ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤\n–ì–¥–µ –ª–æ–≥–∏–∫–∞ –ø—Ä–∞–≤–∏—Ç –±–∞–ª\n–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ —Å–∏–º–≤–æ–ª\n–í–µ–ª–∏–∫–æ–≥–æ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —Ö—Ä–∞–º–∞',
            '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º –æ–±—É—á–∞—Ç—å—Å—è –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è, –∏–º–∏—Ç–∏—Ä—É—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.',
            '–ø–æ–º–æ—â—å': '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å –ø–æ–≥–æ–¥–æ–π, –Ω–æ–≤–æ—Å—Ç—è–º–∏, Wikipedia, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º, –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º –≤–∞–ª—é—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º!',
            '—Å–ø–∞—Å–∏–±–æ': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å! üòä',
            '–ø–æ–∫–∞': '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üëã'
        }
        
        # –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        for key, response in responses.items():
            if key in message_lower:
                return response
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –Ø - AI –ø–æ–º–æ—â–Ω–∏–∫, –∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–≥–æ–¥–µ, –Ω–æ–≤–æ—Å—Ç—è—Ö –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö!"
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."

def process_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    message_lower = message.lower()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
    weather_keywords = ['–ø–æ–≥–æ–¥–∞', '–ø–æ–≥–æ–¥—É', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–∫–ª–∏–º–∞—Ç', 'weather']
    if any(keyword in message_lower for keyword in weather_keywords):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        words = message.split()
        city = None
        for i, word in enumerate(words):
            if word.lower() in weather_keywords:
                if i + 1 < len(words):
                    city = words[i + 1]
                break
        
        if not city:
            city = "–ú–æ—Å–∫–≤–∞"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        weather = get_weather(city)
        if weather:
            return {
                'type': 'weather',
                'content': weather,
                'message': f"üå§Ô∏è –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {weather['city']}:\n"
                          f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}¬∞C\n"
                          f"üå°Ô∏è –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {weather['feels_like']}¬∞C\n"
                          f"‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {weather['description']}\n"
                          f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                          f"üí® –í–µ—Ç–µ—Ä: {weather['wind_speed']} –º/—Å\n"
                          f"üå°Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ: {weather['pressure']} –≥–ü–∞"
            }
        else:
            return {
                'type': 'error',
                'content': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã'
            }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π
    news_keywords = ['–Ω–æ–≤–æ—Å—Ç–∏', '–Ω–æ–≤–æ—Å—Ç—å', '—Å–æ–±—ã—Ç–∏—è', '–ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è', 'news']
    if any(keyword in message_lower for keyword in news_keywords):
        news = get_news()
        if news:
            news_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
            for i, article in enumerate(news, 1):
                news_text += f"{i}. {article['title']}\n"
                news_text += f"   {article['description']}\n"
                news_text += f"   üìÖ {article['publishedAt'][:10]}\n\n"
            
            return {
                'type': 'news',
                'content': news,
                'message': news_text
            }
        else:
            return {
                'type': 'error',
                'content': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏'
            }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Wikipedia
    wiki_keywords = ['—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫—Ç–æ —Ç–∞–∫–æ–π', '–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '–≤–∏–∫–∏–ø–µ–¥–∏—è', 'wikipedia']
    if any(keyword in message_lower for keyword in wiki_keywords):
        query = message.replace('—á—Ç–æ —Ç–∞–∫–æ–µ', '').replace('–∫—Ç–æ —Ç–∞–∫–æ–π', '').replace('–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ', '').replace('–≤–∏–∫–∏–ø–µ–¥–∏—è', '').replace('wikipedia', '').strip()
        wiki_info = get_wikipedia_info(query)
        if wiki_info:
            return {
                'type': 'wikipedia',
                'content': wiki_info,
                'message': f"üìö {wiki_info['title']}\n\n{wiki_info['summary']}\n\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {wiki_info['url']}"
            }
        else:
            return {
                'type': 'error',
                'content': '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Wikipedia'
            }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
    calc_patterns = [
        r'–ø–æ—Å—á–∏—Ç–∞–π\s+(.+)',
        r'–≤—ã—á–∏—Å–ª–∏\s+(.+)',
        r'—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç\s+(.+)',
        r'–≤—ã—á–∏—Å–ª–∏—Ç—å\s+(.+)',
        r'calculate\s+(.+)'
    ]
    
    for pattern in calc_patterns:
        match = re.search(pattern, message_lower)
        if match:
            expression = match.group(1)
            result, error = calculate_expression(expression)
            if result is not None:
                return {
                    'type': 'calculator',
                    'content': {'expression': expression, 'result': result},
                    'message': f"üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä:\n{expression} = {result}"
                }
            else:
                return {
                    'type': 'error',
                    'content': error
                }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç
    currency_patterns = [
        r'(\d+(?:\.\d+)?)\s*(usd|—Ä—É–±|—Ä—É–±–ª–µ–π|–¥–æ–ª–ª–∞—Ä|–¥–æ–ª–ª–∞—Ä–æ–≤|eur|–µ–≤—Ä–æ|eur|gbp|—Ñ—É–Ω—Ç|—Ñ—É–Ω—Ç–æ–≤|cny|—é–∞–Ω—å|—é–∞–Ω–µ–π)\s*(?:–≤|to|–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π)\s*(rub|—Ä—É–±|—Ä—É–±–ª–µ–π|usd|–¥–æ–ª–ª–∞—Ä|–¥–æ–ª–ª–∞—Ä–æ–≤|eur|–µ–≤—Ä–æ|gbp|—Ñ—É–Ω—Ç|—Ñ—É–Ω—Ç–æ–≤|cny|—é–∞–Ω—å|—é–∞–Ω–µ–π)',
        r'–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π\s+(\d+(?:\.\d+)?)\s*(usd|—Ä—É–±|—Ä—É–±–ª–µ–π|–¥–æ–ª–ª–∞—Ä|–¥–æ–ª–ª–∞—Ä–æ–≤|eur|–µ–≤—Ä–æ|gbp|—Ñ—É–Ω—Ç|—Ñ—É–Ω—Ç–æ–≤|cny|—é–∞–Ω—å|—é–∞–Ω–µ–π)\s*(?:–≤|to)\s*(rub|—Ä—É–±|—Ä—É–±–ª–µ–π|usd|–¥–æ–ª–ª–∞—Ä|–¥–æ–ª–ª–∞—Ä–æ–≤|eur|–µ–≤—Ä–æ|gbp|—Ñ—É–Ω—Ç|—Ñ—É–Ω—Ç–æ–≤|cny|—é–∞–Ω—å|—é–∞–Ω–µ–π)'
    ]
    
    for pattern in currency_patterns:
        match = re.search(pattern, message_lower)
        if match:
            amount = float(match.group(1))
            from_curr = match.group(2)
            to_curr = match.group(3)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª—é—Ç
            if from_curr in ['—Ä—É–±', '—Ä—É–±–ª–µ–π']:
                from_curr = 'RUB'
            elif from_curr in ['–¥–æ–ª–ª–∞—Ä', '–¥–æ–ª–ª–∞—Ä–æ–≤', 'usd']:
                from_curr = 'USD'
            elif from_curr in ['–µ–≤—Ä–æ', 'eur']:
                from_curr = 'EUR'
            elif from_curr in ['—Ñ—É–Ω—Ç', '—Ñ—É–Ω—Ç–æ–≤', 'gbp']:
                from_curr = 'GBP'
            elif from_curr in ['—é–∞–Ω—å', '—é–∞–Ω–µ–π', 'cny']:
                from_curr = 'CNY'
            
            if to_curr in ['—Ä—É–±', '—Ä—É–±–ª–µ–π']:
                to_curr = 'RUB'
            elif to_curr in ['–¥–æ–ª–ª–∞—Ä', '–¥–æ–ª–ª–∞—Ä–æ–≤', 'usd']:
                to_curr = 'USD'
            elif to_curr in ['–µ–≤—Ä–æ', 'eur']:
                to_curr = 'EUR'
            elif to_curr in ['—Ñ—É–Ω—Ç', '—Ñ—É–Ω—Ç–æ–≤', 'gbp']:
                to_curr = 'GBP'
            elif to_curr in ['—é–∞–Ω—å', '—é–∞–Ω–µ–π', 'cny']:
                to_curr = 'CNY'
            
            result = convert_currency(amount, from_curr, to_curr)
            if result is not None:
                return {
                    'type': 'currency',
                    'content': {'amount': amount, 'from': from_curr, 'to': to_curr, 'result': result},
                    'message': f"üí± –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç:\n{amount} {from_curr} = {result} {to_curr}"
                }
            else:
                return {
                    'type': 'error',
                    'content': '–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É'
                }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
    translate_patterns = [
        r'–ø–µ—Ä–µ–≤–µ–¥–∏\s+(.+)',
        r'–ø–µ—Ä–µ–≤–æ–¥\s+(.+)',
        r'translate\s+(.+)'
    ]
    
    for pattern in translate_patterns:
        match = re.search(pattern, message_lower)
        if match:
            text = match.group(1).strip()
            translation = translate_text(text)
            if translation:
                return {
                    'type': 'translator',
                    'content': {'original': text, 'translation': translation},
                    'message': f"üåê –ü–µ—Ä–µ–≤–æ–¥:\n{text} ‚Üí {translation}"
                }
            else:
                return {
                    'type': 'error',
                    'content': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç'
                }
    
    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ AI
    return {
        'type': 'gpt',
        'content': None,
        'message': None
    }

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/chat', methods=['POST'])
def chat():
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({'error': '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}), 400
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        result = process_message(message)
        
        if result['type'] == 'gpt':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –º–æ–¥–µ–ª—å
            response = generate_ai_response(message)
            
            return jsonify({
                'type': 'gpt',
                'message': response,
                'timestamp': datetime.now().isoformat()
            })
        
        elif result['type'] in ['weather', 'news', 'wikipedia', 'calculator', 'currency', 'translator']:
            return jsonify({
                'type': result['type'],
                'message': result['message'],
                'data': result['content'],
                'timestamp': datetime.now().isoformat()
            })
        
        else:
            return jsonify({
                'type': 'error',
                'message': result['content'],
                'timestamp': datetime.now().isoformat()
            })
    
    except Exception as e:
        return jsonify({
            'error': f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}'
        }), 500

@app.route('/api/status')
def status():
    return jsonify({
        'model_loaded': model_loaded,
        'model_loading': model_loading,
        'timestamp': datetime.now().isoformat()
    })

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–π AI –≤–µ—Ä—Å–∏–∏ –ß–∞—Ç-–ë–æ—Ç–∞...")
    print("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run(debug=True, host='0.0.0.0', port=5000) 