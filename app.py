from fastapi import FastAPI, HTTPException, Request, Body, Query, Path, Header, Depends
from fastapi.responses import HTMLResponse, JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Dict, List, Tuple, Optional, Any, Union
import sqlite3
import json
import logging
from datetime import datetime, timedelta
import os
import tempfile
import time
from starlette.status import HTTP_401_UNAUTHORIZED
import secrets
import traceback
from flask import request
import asyncio

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from database import execute_query, get_db, search_all_cars, get_all_brands_cached, get_all_models_cached, smart_filter_cars, get_recent_cars_from_db, get_all_quick_scenarios, add_quick_scenario, update_quick_scenario, delete_quick_scenario, init_quick_scenarios_table, get_all_cities, get_all_options, get_all_unique_values_lower
from dialog_manager import DialogManager, ContextAwareDialogManager
from nlp_processor import NLPProcessor, extract_entities_from_text
from fuzzy_search import FuzzySearch
from nlp_utils import find_similar_words, extract_entities
from user_history import UserHistory
from filter_mapping import map_filter_value
from brand_synonyms import BRAND_SYNONYMS, normalize_brand_extended, generate_case_variations, expand_brand_synonyms
from llama_service import generate_with_llama
from deepseek_service import deepseek_service
from monitoring import system_monitor
from modules.classifiers.query_processor import UniversalQueryProcessor
from modules.classifiers.ner_intent_classifier import NERIntentClassifier
from modules.classifiers.sentiment_analyzer import SentimentAnalyzer
from modules.recommendation.advanced_recommendation_engine import AdvancedRecommendationEngine
from modules.dialogue.enhanced_dialog_manager import EnhancedDialogManager
from modules.analytics.data_analyzer import DataAnalyzer
from recommendation_engine import RecommendationEngine
from user_analytics import UserAnalytics
from notification_system import NotificationSystem
from car_parser import car_parser
from smart_query_router import route_query
from enhanced_query_router import EnhancedQueryRouter
from enhanced_query_router_v2 import EnhancedQueryRouterV2
from enhanced_query_router_v3 import EnhancedQueryRouterV3
from enhanced_llama_processor import EnhancedLlamaProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(title="–ê–≤—Ç–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç API", version="2.0.0")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static")
app.mount("/avatar", StaticFiles(directory="avatar"), name="avatar")

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    print("üéØ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
USE_CONTEXT_MANAGER = True  # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

dialog_manager = DialogManager()
context_dialog_manager = ContextAwareDialogManager()
nlp_processor = NLPProcessor()
fuzzy_search = FuzzySearch()
user_history_manager = UserHistory()
nlp = NLPProcessor()
processor = UniversalQueryProcessor()

# –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏
ner_classifier = NERIntentClassifier()
sentiment_analyzer = SentimentAnalyzer()
advanced_recommendation_engine = AdvancedRecommendationEngine()
enhanced_dialog_manager = EnhancedDialogManager()
data_analyzer = DataAnalyzer()

recommendation_engine = RecommendationEngine()
user_analytics = UserAnalytics()
notification_system = NotificationSystem()

# –£–ª—É—á—à–µ–Ω–Ω—ã–π LLAMA –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
enhanced_llama_processor = EnhancedLlamaProcessor()

# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
enhanced_router = EnhancedQueryRouter()
enhanced_router_v2 = EnhancedQueryRouterV2()
enhanced_router_v3 = EnhancedQueryRouterV3()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ
print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class ChatRequest(BaseModel):
    message: str
    user_id: Optional[str] = "default"
    use_yandex_gpt: Optional[bool] = False  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ YandexGPT
    use_deepseek: Optional[bool] = False  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–∂–∏–º–∞ DeepSeek

class SearchRequest(BaseModel):
    brand: Optional[str] = None
    model: Optional[str] = None
    year_from: Optional[int] = None
    year_to: Optional[int] = None
    price_from: Optional[float] = None
    price_to: Optional[float] = None
    fuel_type: Optional[str] = None
    transmission: Optional[str] = None
    body_type: Optional[str] = None
    drive_type: Optional[str] = None
    state: Optional[str] = None
    sort_by: str = "price"
    sort_order: str = "asc"

class CompareRequest(BaseModel):
    car1_id: int
    car2_id: int

class RecommendationRequest(BaseModel):
    user_id: str
    preferences: Optional[Dict[str, Any]] = None
    budget: Optional[float] = None
    purpose: Optional[str] = None  # family, sport, business, etc.

class TestDriveRequest(BaseModel):
    user_id: str
    car_id: int
    preferred_date: str
    preferred_time: str
    contact_phone: str

class CreditRequest(BaseModel):
    user_id: str
    car_id: int
    down_payment: float
    term_months: int
    monthly_income: float

class ApplyFilterRequest(BaseModel):
    user_id: str
    filter_name: Optional[str] = None
    filter_id: Optional[int] = None

class LlamaRequest(BaseModel):
    query: str
    context: Optional[dict] = None

class LlamaFeedbackRequest(BaseModel):
    user_id: str
    query: str
    llama_response: str
    quality_score: int  # 1-5
    comment: str = ""

class CarCreateRequest(BaseModel):
    mark: str
    model: str
    price: float
    city: str
    manufacture_year: int
    fuel_type: str = ''
    body_type: str = ''
    gear_box_type: str = ''
    driving_gear_type: str = ''
    dealer_center: str = ''
    state: str = 'new'
    mileage: int = 0

class DealerCreateRequest(BaseModel):
    name: str
    address: str
    phone: str = ''
    email: str = ''
    website: str = ''
    latitude: float = 0.0
    longitude: float = 0.0
    brands: str = ''

class NotificationRequest(BaseModel):
    user_id: str
    notification_type: str
    title: str
    message: str
    priority: int = 1
    action_url: Optional[str] = None
    action_text: Optional[str] = None
    expires_at: Optional[str] = None
    metadata: Optional[Dict[str, Any]] = None

class NotificationSettingsRequest(BaseModel):
    user_id: str
    email_notifications: bool = True
    push_notifications: bool = True
    recommendation_notifications: bool = True
    system_alerts: bool = True
    promotion_notifications: bool = True
    notification_frequency: str = "daily"
    quiet_hours_start: str = "22:00"
    quiet_hours_end: str = "08:00"

class UserBehaviorRequest(BaseModel):
    user_id: str
    days: int = 30

class SystemAlertRequest(BaseModel):
    alert_type: str
    severity: str
    title: str
    description: str
    metadata: Optional[Dict[str, Any]] = None

class CarParseRequest(BaseModel):
    brand: str
    model: str
    price: int
    city: Optional[str] = None
    tolerance: Optional[float] = 0.1

class CarLinkRequest(BaseModel):
    brand: str
    model: str
    city: Optional[str] = None

class CarParseResponse(BaseModel):
    success: bool
    url: Optional[str] = None
    brand: Optional[str] = None
    model: Optional[str] = None
    price: Optional[int] = None
    found_price: Optional[int] = None
    price_difference: Optional[int] = None
    title: Optional[str] = None
    tech_info: Optional[Dict[str, str]] = None
    status: Optional[str] = None
    address: Optional[str] = None
    img_url: Optional[str] = None
    region: Optional[str] = None
    url_catalog_fallback: Optional[str] = None
    error: Optional[str] = None

API_KEY = os.environ.get('API_KEY', 'supersecret')
RATE_LIMIT = 30  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç
rate_limit_state = {}

def check_api_key(x_api_key: str = Header(...)):
    if x_api_key != API_KEY:
        raise HTTPException(status_code=HTTP_401_UNAUTHORIZED, detail="Invalid API Key")

# --- Rate limiting ---
def rate_limiter(endpoint: str, user_id: str = 'anon'):
    now = int(time.time() // 60)
    key = f"{endpoint}:{user_id}:{now}"
    count = rate_limit_state.get(key, 0)
    if count >= RATE_LIMIT:
        raise HTTPException(status_code=429, detail="Rate limit exceeded")
    rate_limit_state[key] = count + 1

def get_cars_count() -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    result1 = execute_query("SELECT COUNT(*) FROM car")
    result2 = execute_query("SELECT COUNT(*) FROM used_car")
    return (result1[0][0] if result1 else 0) + (result2[0][0] if result2 else 0)

def get_car_by_id(car_id: int) -> Optional[dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID"""
    columns = [
        "id", "title", "doc_num", "mark", "model", "vin", "color", "price", "city", "manufacture_year", "body_type", "gear_box_type", "driving_gear_type", "engine_vol", "power", "fuel_type", "dealer_center"
    ]
    car = execute_query("SELECT id, title, doc_num, mark, model, vin, color, price, city, manufacture_year, body_type, gear_box_type, driving_gear_type, engine_vol, power, fuel_type, dealer_center FROM car WHERE id = ?", [car_id])
    if car:
        car_dict = dict(zip(columns, car[0]))
        extras = execute_query("SELECT stock_qty, code_compl FROM car WHERE id = ?", [car_id])
        if extras:
            car_dict['stock_qty'] = extras[0][0]
            car_dict['code_compl'] = extras[0][1]
        return car_dict
    car = execute_query("SELECT id, title, doc_num, mark, model, vin, color, price, city, manufacture_year, body_type, gear_box_type, driving_gear_type, engine_vol, power, fuel_type, dealer_center FROM used_car WHERE id = ?", [car_id])
    if car:
        car_dict = dict(zip(columns, car[0]))
        extras = execute_query("SELECT mileage FROM used_car WHERE id = ?", [car_id])
        if extras:
            car_dict['mileage'] = extras[0][0]
        return car_dict
    return None

def initialize_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π)
    execute_query("""
        CREATE TABLE IF NOT EXISTS car (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title VARCHAR(100),
            doc_num VARCHAR(50),
            stock_qty INTEGER,
            mark VARCHAR(100),
            model VARCHAR(100),
            code_compl VARCHAR(100),
            vin VARCHAR(50),
            color VARCHAR(50),
            price FLOAT,
            city VARCHAR(100),
            manufacture_year INTEGER,
            fuel_type VARCHAR(50),
            power FLOAT,
            body_type VARCHAR(50),
            gear_box_type VARCHAR(50),
            driving_gear_type VARCHAR(50),
            engine_vol INTEGER,
            dealer_center VARCHAR(100)
        )
    """)
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    execute_query("""
        CREATE TABLE IF NOT EXISTS used_car (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title VARCHAR(100),
            doc_num VARCHAR(50),
            mark VARCHAR(100),
            model VARCHAR(100),
            vin VARCHAR(50),
            color VARCHAR(50),
            price FLOAT,
            city VARCHAR(100),
            manufacture_year INTEGER,
            mileage INTEGER,
            body_type VARCHAR(50),
            gear_box_type VARCHAR(50),
            driving_gear_type VARCHAR(50),
            engine_vol INTEGER,
            power FLOAT,
            fuel_type VARCHAR(50),
            dealer_center VARCHAR(100)
        )
    """)
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–∏–ª–µ—Ä—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    execute_query("""
        CREATE TABLE IF NOT EXISTS dealer_centers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            address TEXT,
            phone TEXT,
            email TEXT,
            website TEXT,
            latitude REAL,
            longitude REAL,
            brands TEXT
        )
    """)
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    execute_query("""
        CREATE TABLE IF NOT EXISTS user_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT,
            message TEXT,
            response TEXT,
            intent TEXT,
            entities TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    execute_query("""
        CREATE TABLE IF NOT EXISTS user_preferences (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT UNIQUE,
            preferences TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
    execute_query("""
        CREATE TABLE IF NOT EXISTS chat_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT,
            message TEXT,
            response TEXT,
            intent TEXT,
            response_time REAL,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ñ–∏–¥–±–µ–∫–∞ –ø–æ Llama-–æ—Ç–≤–µ—Ç–∞–º
    execute_query("""
        CREATE TABLE IF NOT EXISTS llama_feedback (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT,
            query TEXT,
            llama_response TEXT,
            quality_score INTEGER,
            comment TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        initialize_database()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        init_quick_scenarios_table()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

@app.get("/", response_class=HTMLResponse)
async def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        with open("static/index_new.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read())
    except FileNotFoundError:
        return HTMLResponse(content="<h1>–ê–≤—Ç–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</h1><p>–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω</p>")

@app.get("/test-filters", response_class=HTMLResponse)
async def test_filters():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        with open("test_filters.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read())
    except FileNotFoundError:
        return HTMLResponse(content="<h1>–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</h1><p>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</p>")

@app.get("/test-filters-simple", response_class=HTMLResponse)
async def test_filters_simple():
    """–ü—Ä–æ—Å—Ç–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        with open("test_filters_simple.html", "r", encoding="utf-8") as f:
            return HTMLResponse(content=f.read())
    except FileNotFoundError:
        return HTMLResponse(content="<h1>–¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤</h1><p>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</p>")

@app.post("/api/chat")
async def chat(request: ChatRequest):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ä–∞–∑—É
        logger.info(f"DEBUG: request.message = {request.message}")
        logger.info(f"DEBUG: type(request.message) = {type(request.message)}")
        if not isinstance(request.message, str):
            request.message = str(request.message)
            logger.info(f"DEBUG: converted to string: {request.message}")
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        logger.info(f"=== –ù–û–í–´–ô –ó–ê–ü–†–û–° ===")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {request.message}")
        logger.info(f"–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(request.message)}")
        logger.info(f"User ID: {request.user_id}")
        logger.info(f"DeepSeek —Ä–µ–∂–∏–º: {request.use_deepseek}")
        logger.info(f"–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DeepSeek
        if request.use_deepseek:
            logger.info(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {request.message}")
            result = deepseek_service.generate_response(request.message, request.user_id or "default")
            logger.info(f"‚úÖ DeepSeek –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {type(result)}")
        else:
            # –Ø–≤–Ω—ã–µ –æ–±—â–∏–µ (—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ) —Ñ—Ä–∞–∑—ã ‚Üí —Å—Ä–∞–∑—É –≤ Llama
            lower_msg = (request.message or "").lower().strip()
            general_llama_keywords = [
                '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
                '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '–∫–∞–∫ —É –≤–∞—Å –¥–µ–ª–∞', '—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å',
                '–∫—Ç–æ —Ç—ã', '–∫—Ç–æ –≤—ã', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '—á—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ'
            ]
            is_car_query = False
            router = None
            if any(k in lower_msg for k in general_llama_keywords):
                from llama_service import generate_general_response
                llama_response = generate_general_response(request.message)
                result = {
                    "type": "llama_response",
                    "message": llama_response,
                    "llama": True,
                    "is_general_query": True
                }
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
                from smart_query_router import SmartQueryRouter
                router = SmartQueryRouter()
                is_car_query = router.is_car_related(request.message)

            if 'result' not in locals() and is_car_query:
                logger.info(f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {request.message}")
                router_result = router.route_query(request.message, request.user_id or "default")
                if router_result.get('success') and router_result.get('is_car_query'):
                    result = router_result.get('data', {})
                else:
                    result = router_result
                logger.info(f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {type(result)}")
            elif 'result' not in locals():
                # –ù–µ–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∏–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è ‚Üí LLAMA; –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Üí —Å–ø–µ—Ü—Å–æ–æ–±—â–µ–Ω–∏–µ
                lower_msg2 = (request.message or "").lower().strip()
                general_llama_keywords2 = [
                    '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ',
                    '–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '–∫–∞–∫ —É –≤–∞—Å –¥–µ–ª–∞', '—á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è', '—á—Ç–æ –¥–µ–ª–∞–µ—à—å',
                    '–∫—Ç–æ —Ç—ã', '–∫—Ç–æ –≤—ã', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '—á—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ'
                ]
                if any(k in lower_msg2 for k in general_llama_keywords2):
                    logger.info(f"üí¨ –û–±—â–∏–π —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Üí LLAMA: {request.message}")
                    from llama_service import generate_general_response
                    llama_response = generate_general_response(request.message)
                    result = {
                        "type": "llama_response",
                        "message": llama_response,
                        "llama": True,
                        "is_general_query": True
                    }
                else:
                    logger.info(f"‚ÑπÔ∏è –ù–µ–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Üí –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
                    result = {
                        "type": "specialization_notice",
                        "message": (
                            "–Ø –ú–æ—Ç–æ—Ä—á–∏–∫ ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø–æ–¥–±–æ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. "
                            "–ü–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, —Å—Ä–∞–≤–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏, –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, "
                            "—É—Å–ª–æ–≤–∏—è –∫—Ä–µ–¥–∏—Ç–∞ –∏ –¥—Ä. –ó–∞–¥–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏."
                        ),
                        "is_general_query": True
                    }
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(result, dict):
            logger.info(f"üìã –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {result.get('type', 'unknown')}")
            logger.info(f"üìù –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(str(result.get('message', '')))} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {result}")
        else:
            logger.info(f"üìã –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: {type(result)}")
            logger.info(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(str(result))} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {result}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º url –¥–ª—è –∫–∞–∂–¥–æ–π –º–∞—à–∏–Ω—ã, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ cars
        if isinstance(result, dict) and 'cars' in result and isinstance(result['cars'], list):
            for car in result['cars']:
                car_data = {'mark': car.get('mark') or car.get('brand'), 'model': car.get('model')}
                url = car_parser.generate_car_link(car_data)
                if url:
                    car['url'] = url
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        try:
            user_history_manager.add_query(
                user_id=request.user_id or "default",
                query=request.message,
                response=result.get('message', str(result)),
                intent=result.get('type', 'deepseek_response' if request.use_deepseek else 'unknown'),
                entities=result.get('entities', {})
            )
            logger.info(f"üíæ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞: {e}")
        
        logger.info(f"=== –ó–ê–ü–†–û–° –û–ë–†–ê–ë–û–¢–ê–ù ===\n")
        # LLAMA –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö
        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ processor.process() –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–ø—Ä—è–º—É—é
        return {"success": True, "response": result}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /api/chat: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/chat")
async def chat_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç-—ç–Ω–¥–ø–æ–∏–Ω—Ç–µ"""
    return {
        "message": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
        "available_methods": ["POST"],
        "example": {
            "method": "POST",
            "url": "/api/chat",
            "body": {
                "message": "–ù–∞–π—Ç–∏ BMW X5",
                "user_id": "user_123"
            }
        }
    }

def get_first_deep(val):
    if isinstance(val, (list, tuple)):
        return get_first_deep(val[0]) if val else None
    return val

def normalize_brand(value):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–µ–Ω–¥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–¥–µ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π"""
    value = get_first_deep(value)
    if not value:
        return value
    if not isinstance(value, str):
        value = str(value)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤
    from brand_synonyms import normalize_brand_extended
    normalized = normalize_brand_extended(value)
    
    # –ï—Å–ª–∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—à–ª–∞ –±—Ä–µ–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
    if normalized and normalized != value.title():
        return normalized
    
    # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ
    brands = get_all_brands_cached()
    for b in brands:
        if isinstance(b, tuple):
            b = b[0]
        if isinstance(b, str) and value.lower() == b.lower():
            return b
    return value

def normalize_model(value):
    value = get_first_deep(value)
    if not value:
        return value
    if not isinstance(value, str):
        value = str(value)
    models = get_all_models_cached()
    for m in models:
        if isinstance(m, tuple):
            m = m[0]
        if isinstance(m, str) and value.lower() == m.lower():
            return m
    return value

@app.post("/api/cars/create", dependencies=[Depends(check_api_key)])
async def create_car(car: CarCreateRequest, x_api_key: str = Header(...)):
    rate_limiter("create_car", x_api_key)
    try:
        query = ("INSERT INTO car (mark, model, price, city, manufacture_year, fuel_type, body_type, gear_box_type, driving_gear_type, dealer_center) "
                 "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)")
        params = [car.mark, car.model, car.price, car.city, car.manufacture_year, car.fuel_type, car.body_type, car.gear_box_type, car.driving_gear_type, car.dealer_center]
        execute_query(query, params)
        return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/cars/create")
async def add_car(car: CarCreateRequest):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (car –∏–ª–∏ used_car –ø–æ state)"""
    try:
        table = 'car' if car.state == 'new' else 'used_car'
        columns = [
            'mark', 'model', 'price', 'city', 'manufacture_year', 'fuel_type',
            'body_type', 'gear_box_type', 'driving_gear_type', 'dealer_center', 'mileage'
        ]
        values = [
            car.mark, car.model, car.price, car.city, car.manufacture_year, car.fuel_type,
            car.body_type, car.gear_box_type, car.driving_gear_type, car.dealer_center, car.mileage
        ]
        # –î–ª—è –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ mileage –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        if table == 'car':
            columns = columns[:-1]
            values = values[:-1]
        query = f"INSERT INTO {table} ({', '.join(columns)}) VALUES ({', '.join(['?' for _ in columns])})"
        execute_query(query, values)
        return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/cars")
async def search_cars(request: dict = Body(...)):
    user_id = request.get('user_id', 'default')
    query = request.get('query', '')
    offset = int(request.get('offset', 0))
    limit = int(request.get('limit', 10))
    show_cars = bool(request.get('show_cars', False))
    entities = request.get('entities', {})
    result = processor.process(query, entities=entities, user_id=user_id, offset=offset, limit=limit, show_cars=show_cars)
    return JSONResponse(content=result)

@app.get("/api/filters/available")
async def get_available_filters(
    brand: Optional[str] = Query(None),
    model: Optional[str] = Query(None),
    year: Optional[str] = Query(None),
    price_from: Optional[str] = Query(None),
    price_to: Optional[str] = Query(None),
    fuel_type: Optional[str] = Query(None),
    transmission: Optional[str] = Query(None),
    body_type: Optional[str] = Query(None),
    city: Optional[str] = Query(None)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        filters = {}
        if brand:
            filters['brand'] = brand
        if model:
            filters['model'] = model
        if year:
            filters['year_from'] = int(year)
        if price_from:
            filters['price_from'] = float(price_from) * 1000000
        if price_to:
            filters['price_to'] = float(price_to) * 1000000
        if fuel_type:
            filters['fuel_type'] = fuel_type
        if transmission:
            filters['transmission'] = transmission
        if body_type:
            filters['body_type'] = body_type
        if city:
            filters['city'] = city
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        from database import search_all_cars
        cars = search_all_cars(**filters)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        years = sorted(list(set(car.get('manufacture_year') for car in cars if car.get('manufacture_year'))), reverse=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        fuel_types_raw = list(set(car.get('fuel_type') for car in cars if car.get('fuel_type')))
        body_types_raw = list(set(car.get('body_type') for car in cars if car.get('body_type')))
        transmissions_raw = list(set(car.get('gear_box_type') for car in cars if car.get('gear_box_type')))
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        fuel_types = normalize_filter_values(fuel_types_raw, 'fuel_type')
        body_types = normalize_filter_values(body_types_raw, 'body_type')
        transmissions = normalize_filter_values(transmissions_raw, 'gear_box_type')
        
        cities = sorted(list(set(car.get('city') for car in cars if car.get('city'))))
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏
        brands = sorted(list(set(car.get('mark') for car in cars if car.get('mark'))))
        models = sorted(list(set(car.get('model') for car in cars if car.get('model'))))
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω
        prices = [car.get('price') for car in cars if car.get('price')]
        price_range = {}
        if prices:
            min_price = min(prices) / 1000000
            max_price = max(prices) / 1000000
            price_range = {
                'min': round(min_price, 1),
                'max': round(max_price, 1)
            }
        
        return JSONResponse(content={
            "success": True,
            "years": years,
            "fuel_types": fuel_types,
            "body_types": body_types,
            "transmissions": transmissions,
            "cities": cities,
            "brands": brands,
            "models": models,
            "price_range": price_range,
            "total_cars": len(cars)
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤",
            "years": [],
            "fuel_types": [],
            "body_types": [],
            "transmissions": [],
            "cities": [],
            "price_range": {},
            "total_cars": 0
        })

@app.post("/api/cars/search")
async def search_cars_with_filters(request: dict = Body(...)):
    """–ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        logger.info(f"üîç API /api/cars/search –ø–æ–ª—É—á–∏–ª –∑–∞–ø—Ä–æ—Å: {request}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        brand = request.get('brand')
        model = request.get('model')
        year_from = request.get('year_from')
        year_to = request.get('year_to')
        price_from = request.get('price_from')
        price_to = request.get('price_to')
        fuel_type = request.get('fuel_type')
        transmission = request.get('transmission')
        body_type = request.get('body_type')
        drive_type = request.get('drive_type')
        city = request.get('city')
        state = request.get('state')
        limit = request.get('limit', 100)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
        logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: brand={brand}, model={model}, year_from={year_from}, "
                   f"price_from={price_from}, price_to={price_to}, fuel_type={fuel_type}, "
                   f"body_type={body_type}, transmission={transmission}, city={city}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞ –∏–∑ database.py
        from database import search_all_cars
        
        cars = search_all_cars(
            brand=brand,
            model=model,
            year_from=year_from,
            year_to=year_to,
            price_from=price_from,
            price_to=price_to,
            fuel_type=fuel_type,
            transmission=transmission,
            body_type=body_type,
            drive_type=drive_type,
            state=state,
            city=city,
            limit=limit
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        logger.info(f"üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(cars)}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        formatted_cars = []
        for car in cars:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            car['price_millions'] = round(car.get('price', 0) / 1000000, 1) if car.get('price') else 0
            # –ù–∞–¥–µ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫ –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–ª–∞–≥ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ë–î
            is_used = car.get('is_used')
            if is_used is None:
                is_used = (car.get('state') == 'used')
            car['is_used'] = bool(is_used)
            car['status_text'] = '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–Ω—ã–π' if car['is_used'] else '–ù–æ–≤—ã–π'
            formatted_cars.append(car)
        
        return JSONResponse(content={
            "success": True,
            "cars": formatted_cars,
            "total": len(formatted_cars),
            "filters_applied": {
                "brand": brand,
                "model": model,
                "year_from": year_from,
                "year_to": year_to,
                "price_from": price_from,
                "price_to": price_to,
                "fuel_type": fuel_type,
                "transmission": transmission,
                "body_type": body_type,
                "drive_type": drive_type,
                "city": city,
                "state": state
            }
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π",
            "cars": []
        })

@app.post("/api/compare")
async def compare_cars(request: CompareRequest):
    user_id = getattr(request, 'user_id', 'default')
    query = f"–°—Ä–∞–≤–Ω–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å id {request.car1_id} –∏ {request.car2_id}"
    result = processor.process(query, entities={'car1_id': request.car1_id, 'car2_id': request.car2_id}, user_id=user_id)
    return JSONResponse(content=result)

@app.post("/api/recommendations")
async def get_recommendations(request: RecommendationRequest):
    user_id = request.user_id
    query = f"–ü–æ–¥–±–µ—Ä–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º: {request.preferences or ''} –±—é–¥–∂–µ—Ç: {request.budget or ''} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {request.purpose or ''}"
    entities = request.preferences or {}
    if request.budget:
         entities['budget'] = request.budget
    if request.purpose:
        entities['purpose'] = request.purpose
    result = processor.process(query, entities=entities, user_id=user_id)
    return JSONResponse(content=result)

@app.post("/api/test-drive")
async def request_test_drive(request: TestDriveRequest):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤"""
    try:
        car = get_car_by_id(request.car_id)
        if not car:
            raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        columns = [
            "id", "title", "doc_num", "mark", "model", "vin", "color", "price", "city", "manufacture_year", "body_type", "gear_box_type", "driving_gear_type", "engine_vol", "power", "fuel_type", "dealer_center"
        ]
        if isinstance(car, tuple):
            car = dict(zip(columns, car))
        title = car.get('title', '')
        model = car.get('model', '')
        fuel_type = car.get('fuel_type', '')
        dealer = car.get('dealer_center', '')
        return {
            "success": True,
            "message": f"–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ {title} {model} –ø—Ä–∏–Ω—è—Ç–∞",
            "details": {
                "car": f"{title} {model} {fuel_type}",
                "dealer": dealer,
                "date": request.preferred_date,
                "time": request.preferred_time,
                "contact": request.contact_phone
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤–∞: {e}")
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤–∞"
        }

@app.post("/api/credit")
async def calculate_credit(request: CreditRequest):
    user_id = request.user_id
    query = f"–†–∞—Å—Å—á–∏—Ç–∞–π –∫—Ä–µ–¥–∏—Ç –¥–ª—è –∞–≤—Ç–æ {request.car_id} —Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º –≤–∑–Ω–æ—Å–æ–º {request.down_payment}, —Å—Ä–æ–∫–æ–º {request.term_months} –º–µ—Å, –¥–æ—Ö–æ–¥–æ–º {request.monthly_income}"
    entities = {'car_id': request.car_id, 'down_payment': request.down_payment, 'term_months': request.term_months, 'monthly_income': request.monthly_income}
    result = processor.process(query, entities=entities, user_id=user_id)
    return JSONResponse(content=result)

@app.get("/api/statistics")
async def get_statistics():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–∞–∑–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from database import search_all_cars
        all_cars = search_all_cars()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_cars = len(all_cars)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º
        brands = {}
        for car in all_cars:
            brand = car.get('mark', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            brands[brand] = brands.get(brand, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        cities = {}
        for car in all_cars:
            city = car.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            cities[city] = cities.get(city, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º
        years = {}
        for car in all_cars:
            year = car.get('manufacture_year', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            years[year] = years.get(year, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫—É–∑–æ–≤–∞
        body_types = {}
        for car in all_cars:
            body_type = car.get('body_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            body_types[body_type] = body_types.get(body_type, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
        prices = [car.get('price', 0) for car in all_cars if car.get('price')]
        avg_price = sum(prices) / len(prices) if prices else 0
        min_price = min(prices) if prices else 0
        max_price = max(prices) if prices else 0
        
        result = {
            "success": True,
            "statistics": {
                "total_cars": total_cars,
                "brands": dict(sorted(brands.items(), key=lambda x: x[1], reverse=True)[:10]),
                "cities": dict(sorted(cities.items(), key=lambda x: x[1], reverse=True)[:10]),
                "years": dict(sorted(years.items(), key=lambda x: x[1], reverse=True)[:10]),
                "body_types": dict(sorted(body_types.items(), key=lambda x: x[1], reverse=True)[:10]),
                "price_stats": {
                    "average": round(avg_price, 2),
                    "min": min_price,
                    "max": max_price
                }
            }
        }
        
        return JSONResponse(content=result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        })

@app.get("/api/dealers")
async def get_dealers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–ª–µ—Ä—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤"""
    try:
        dealers = execute_query("SELECT * FROM dealer_centers")
        
        dealers_list = []
        for dealer in dealers:
            dealer_dict = {
                "id": dealer[0],
                "name": dealer[1],
                "address": dealer[2],
                "phone": dealer[3],
                "email": dealer[4],
                "website": dealer[5],
                "latitude": dealer[6],
                "longitude": dealer[7],
                "brands": dealer[8]
            }
            dealers_list.append(dealer_dict)
        
        return {
            "success": True,
            "dealers": dealers_list
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–ª–µ—Ä–æ–≤: {e}")
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–ª–µ—Ä—Å–∫–∏—Ö —Ü–µ–Ω—Ç—Ä–æ–≤"
        }

@app.get("/api/brands")
async def get_brands():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±—Ä–µ–Ω–¥–æ–≤"""
    try:
        brands = execute_query("SELECT DISTINCT mark FROM car UNION SELECT DISTINCT mark FROM used_car ORDER BY mark")
        brands_list = [brand[0] for brand in brands]
        return {
            "success": True,
            "brands": brands_list
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤: {e}")
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±—Ä–µ–Ω–¥–æ–≤"
        }

@app.get("/api/models/{brand}")
async def get_models(brand: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ –±—Ä–µ–Ω–¥—É"""
    try:
        models = execute_query(
            "SELECT DISTINCT model FROM car WHERE mark = ? UNION SELECT DISTINCT model FROM used_car WHERE mark = ? ORDER BY model",
            [brand, brand]
        )
        models_list = [model[0] for model in models]
        return {
            "success": True,
            "brand": brand,
            "models": models_list
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π"
        }

@app.post("/api/fuzzy-search")
async def fuzzy_search_endpoint(request: ChatRequest):
    """–ù–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥–∞–º –∏ –º–æ–¥–µ–ª—è–º (car + used_car)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—Ä–µ–Ω–¥—ã –∏ –º–æ–¥–µ–ª–∏ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
        all_cars = search_all_cars()
        brands = set(car["mark"] for car in all_cars if car.get("mark"))
        models = set(car["model"] for car in all_cars if car.get("model"))
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FuzzySearch –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º –∏ –º–æ–¥–µ–ª—è–º
        brand_matches = [fuzzy_search.correct_brand(request.message)] if request.message else []
        model_matches = [fuzzy_search.correct_model(request.message)] if request.message else []
        # –¢–∞–∫–∂–µ –∏—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Å–ª–æ–≤–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –±—Ä–µ–Ω–¥–æ–≤ –∏ –º–æ–¥–µ–ª–µ–π
        similar_brands = find_similar_words(request.message, list(brands))
        similar_models = find_similar_words(request.message, list(models))
        results = list(set([b for b in brand_matches if b] + [m for m in model_matches if m] + similar_brands + similar_models))
        return {
            "success": True,
            "results": results
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        return {
            "success": False,
            "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ—á–µ—Ç–∫–æ–º –ø–æ–∏—Å–∫–µ: {e}"
        }

@app.get("/api/history")
async def get_user_history(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        history = user_history_manager.get_user_history(user_id)
        return {"success": True, "history": history}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}"}

@app.get("/api/preferences")
async def get_user_preferences(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        prefs = user_history_manager.get_preferences(user_id)
        return {"success": True, "preferences": prefs}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}"}

@app.post("/api/preferences")
async def update_user_preferences(user_id: str, preferences: Dict[str, Any]):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_history_manager.update_preferences(user_id, preferences)
        return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: {e}"}

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_status = "ok"
        try:
            execute_query("SELECT 1")
        except:
            db_status = "error"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ ML –º–æ–¥–µ–ª–µ–π
        ml_status = "ok" if nlp_processor.intent_classifier else "not_available"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        dialog_status = "ok" if dialog_manager else "error"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        fuzzy_status = "ok" if fuzzy_search else "error"
        
        return {
            "status": "healthy" if all(s == "ok" for s in [db_status, dialog_status, fuzzy_status]) else "degraded",
            "components": {
                "database": db_status,
                "ml_models": ml_status,
                "dialog_manager": dialog_status,
                "fuzzy_search": fuzzy_status
            },
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return {
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

@app.get("/api/filters")
async def get_user_filters(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        filters = user_history_manager.get_saved_filters(user_id)
        return {"success": True, "filters": filters}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}"}

@app.post("/api/filters/apply")
async def apply_user_filter(request: ApplyFilterRequest = Body(...)):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ id) –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ smart_filter_cars"""
    try:
        filters = user_history_manager.get_saved_filters(request.user_id)
        selected = None
        if request.filter_id is not None:
            for idx, f in enumerate(filters):
                if idx == request.filter_id:
                    selected = f
                    break
        elif request.filter_name:
            for f in filters:
                if f['name'] == request.filter_name:
                    selected = f
                    break
        if not selected:
            return {"success": False, "error": "–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        params = selected['params']
        cars, explanation = smart_filter_cars(**params)
        return {
            "success": True,
            "cars": cars,
            "explanation": explanation,
            "filter": selected
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}"}

@app.post("/api/llama")
async def llama_handler(request: LlamaRequest):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ Llama"""
    try:
        response = generate_with_llama(request.query, request.context or {})
        return {"success": True, "response": response}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.post("/api/llama-feedback")
async def llama_feedback(request: LlamaFeedbackRequest):
    """–°–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ Llama-–æ—Ç–≤–µ—Ç—É"""
    try:
        system_monitor.log_llama_feedback(
            user_id=request.user_id,
            query=request.query,
            llama_response=request.llama_response,
            quality_score=request.quality_score,
            comment=request.comment or ""
        )
        return {"success": True}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.post("/api/voice-message")
async def process_voice_message(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π —á–µ—Ä–µ–∑ faster-whisper"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ FormData
        form = await request.form()
        audio_file = form.get("audio")
        duration = form.get("duration", "0")
        user_id = form.get("user_id", "default")
        client_transcription = form.get("transcription", "").strip()

        if not audio_file:
            raise HTTPException(status_code=400, detail="–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        voice_dir = "voice_messages"
        os.makedirs(voice_dir, exist_ok=True)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"voice_{user_id}_{timestamp}.wav"
        filepath = os.path.join(voice_dir, filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        content = await audio_file.read()
        with open(filepath, "wb") as f:
            f.write(content)

        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —á–µ—Ä–µ–∑ faster-whisper
        try:
            from faster_whisper import WhisperModel
            # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏: small / medium / large-v3 (–ø–æ —Ä–µ—Å—É—Ä—Å–∞–º)
            model_size = os.getenv("WHISPER_MODEL", "small")
            compute_type = os.getenv("WHISPER_COMPUTE", "int8")  # int8/int8_float16/float16
            model = WhisperModel(model_size, device="auto", compute_type=compute_type)

            segments, info = model.transcribe(filepath, language="ru", vad_filter=True)
            transcript_parts = [seg.text for seg in segments]
            server_transcription = (" ".join(transcript_parts)).strip()
        except Exception as tr_err:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ faster-whisper: {tr_err}")
            server_transcription = client_transcription  # fallback

        final_transcription = server_transcription or client_transcription or ""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –ë–î
        try:
            with get_db() as conn:
                cursor = conn.cursor()
                cursor.execute(
                    """
                    CREATE TABLE IF NOT EXISTS voice_messages (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id TEXT NOT NULL,
                        filename TEXT NOT NULL,
                        duration INTEGER NOT NULL,
                        transcription TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                    """
                )
                cursor.execute(
                    """
                    INSERT INTO voice_messages (user_id, filename, duration, transcription)
                    VALUES (?, ?, ?, ?)
                    """,
                    (user_id, filename, int(duration or 0), final_transcription),
                )
                conn.commit()
        except Exception as db_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")

        logger.info(f"–ì–æ–ª–æ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}, –¥–ª–∏—Ç.: {duration}—Å, —Ç–µ–∫—Å—Ç: {final_transcription[:80]}...")

        return JSONResponse(
            content={
                "success": True,
                "filename": filename,
                "duration": int(duration or 0),
                "transcription": final_transcription,
                "message": "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
            }
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return JSONResponse(status_code=500, content={"success": False, "error": str(e)})

@app.get("/api/voice-messages/{user_id}")
async def get_voice_messages(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS voice_messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT NOT NULL,
                    filename TEXT NOT NULL,
                    duration INTEGER NOT NULL,
                    transcription TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """
            )
            cursor.execute("""
                SELECT id, filename, duration, transcription, created_at
                FROM voice_messages
                WHERE user_id = ?
                ORDER BY created_at DESC
                LIMIT 50
            """, (user_id,))
            
            messages = []
            for row in cursor.fetchall():
                messages.append({
                    "id": row[0],
                    "filename": row[1],
                    "duration": row[2],
                    "transcription": row[3],
                    "created_at": row[4]
                })
            
            return JSONResponse(content={
                "success": True,
                "messages": messages
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return JSONResponse(
            status_code=500,
            content={"success": False, "error": str(e)}
        )

@app.get("/api/voice-messages/audio/{filename}")
async def get_voice_audio(filename: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        voice_dir = "voice_messages"
        filepath = os.path.join(voice_dir, filename)
        
        if not os.path.exists(filepath):
            raise HTTPException(status_code=404, detail="–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return FileResponse(filepath, media_type="audio/wav")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/monitoring/report")
async def monitoring_report():
    """–û—Ç—á—ë—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è dashboard (–≤–∫–ª—é—á–∞—è llama_feedback)"""
    try:
        report = system_monitor.generate_report()
        return report
    except Exception as e:
        return {"error": str(e)}

@app.get("/api/llama-feedback/trend")
async def llama_feedback_trend(days: int = 14):
    """–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞ Llama-–æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –¥–Ω—è–º"""
    try:
        trend = system_monitor.get_llama_feedback_daily_trend(days)
        return {"trend": trend}
    except Exception as e:
        return {"error": str(e)}

@app.get("/api/llama-feedback/comments")
async def llama_feedback_comments(limit: int = 10, period: int = 14, min_score: int = 1):
    """–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ Llama-–æ—Ç–≤–µ—Ç–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥ –∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π"""
    try:
        comments = system_monitor.get_llama_feedback_comments(limit, period, min_score)
        return {"comments": comments}
    except Exception as e:
        return {"error": str(e)}

@app.get("/api/llama-feedback/alerts")
async def llama_feedback_alerts(days: int = 7, min_avg: float = 3.5, max_bad: int = 3):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ Llama-–æ—Ç–≤–µ—Ç–æ–≤ –∏ –∞–ª–µ—Ä—Ç—ã"""
    try:
        alerts = system_monitor.check_llama_quality_alerts(days, min_avg, max_bad)
        return {"alerts": alerts}
    except Exception as e:
        return {"error": str(e)}

@app.get("/api/cars")
async def get_recent_cars():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (car + used_car) –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –∏ –≤–∏–¥–∂–µ—Ç–æ–≤
    """
    cars = get_recent_cars_from_db(limit=None)
    return {"success": True, "cars": cars}

@app.post("/api/dealer_centers")
async def create_dealer(dealer: DealerCreateRequest):
    try:
        query = ("INSERT INTO dealer_centers (name, address, phone, email, website, latitude, longitude, brands) "
                 "VALUES (?, ?, ?, ?, ?, ?, ?, ?)")
        params = [dealer.name, dealer.address, dealer.phone, dealer.email, dealer.website, dealer.latitude, dealer.longitude, dealer.brands]
        execute_query(query, params)
        return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–ª–µ—Ä–∞: {e}")
        return {"success": False, "error": str(e)}

@app.put("/api/dealer_centers/{dealer_id}")
async def update_dealer(dealer: DealerCreateRequest, dealer_id: int = Path(...)):
    try:
        query = ("UPDATE dealer_centers SET name=?, address=?, phone=?, email=?, website=?, latitude=?, longitude=?, brands=? WHERE id=?")
        params = [dealer.name, dealer.address, dealer.phone, dealer.email, dealer.website, dealer.latitude, dealer.longitude, dealer.brands, dealer_id]
        execute_query(query, params)
        return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–ª–µ—Ä–∞: {e}")
        return {"success": False, "error": str(e)}

@app.delete("/api/dealers/{dealer_id}")
async def delete_dealer_api(dealer_id: int = Path(...)):
    try:
        execute_query("DELETE FROM dealer_centers WHERE id = ?", [dealer_id])
        return {"success": True}
    except Exception as e:
        return {"success": False, "error": str(e)}

# --- –ù–æ–≤—ã–µ API endpoints –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---

@app.get("/api/recommendations/{user_id}")
async def get_personal_recommendations(user_id: str, limit: int = 5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    try:
        recommendations = recommendation_engine.get_car_recommendations(user_id, limit)
        return {"success": True, "recommendations": recommendations}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/recommendations/popular")
async def get_popular_cars(limit: int = 10):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    try:
        popular_cars = recommendation_engine.get_popular_cars(limit)
        return {"success": True, "cars": popular_cars}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/recommendations/trending")
async def get_trending_brands(days: int = 30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤"""
    try:
        trending_brands = recommendation_engine.get_trending_brands(days)
        return {"success": True, "brands": trending_brands}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/recommendations/similar/{car_id}")
async def get_similar_cars(car_id: int, limit: int = 5):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    try:
        similar_cars = recommendation_engine.get_similar_cars(car_id, limit)
        return {"success": True, "cars": similar_cars}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/recommendations/feedback")
async def log_recommendation_feedback(user_id: str, recommendation_id: int, score: int):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    try:
        recommendation_engine.log_recommendation_feedback(user_id, recommendation_id, score)
        return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/analytics/behavior/{user_id}")
async def get_user_behavior_analysis(user_id: str, days: int = 30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        analysis = user_analytics.analyze_user_behavior(user_id, days)
        return {"success": True, "analysis": analysis}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/analytics/insights/{user_id}")
async def get_user_insights(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        insights = user_analytics.get_behavior_insights(user_id)
        return {"success": True, "insights": insights}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/analytics/segments")
async def get_user_segments():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        segments = user_analytics.get_user_segments()
        return {"success": True, "segments": segments}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/analytics/recommendations-insights/{user_id}")
async def get_recommendations_insights(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    try:
        insights = user_analytics.get_user_recommendations_insights(user_id)
        return {"success": True, "insights": insights}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/notifications/{user_id}")
async def get_user_notifications(user_id: str, limit: int = 20, unread_only: bool = False):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        notifications = notification_system.get_user_notifications(user_id, limit, unread_only)
        return {"success": True, "notifications": notifications}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/notifications/count/{user_id}")
async def get_notification_count(user_id: str, unread_only: bool = True):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        count = notification_system.get_notification_count(user_id, unread_only)
        return {"success": True, "count": count}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/notifications/mark-read/{notification_id}")
async def mark_notification_read(notification_id: int, user_id: str):
    """–û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ"""
    try:
        success = notification_system.mark_notification_read(notification_id, user_id)
        return {"success": success}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/notifications/mark-all-read/{user_id}")
async def mark_all_notifications_read(user_id: str):
    """–û—Ç–º–µ—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"""
    try:
        success = notification_system.mark_all_notifications_read(user_id)
        return {"success": success}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {"success": False, "error": str(e)}

@app.delete("/api/notifications/{notification_id}")
async def delete_notification(notification_id: int, user_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        success = notification_system.delete_notification(notification_id, user_id)
        return {"success": success}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/notifications/create")
async def create_notification(request: NotificationRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        expires_at = None
        if request.expires_at:
            expires_at = datetime.fromisoformat(request.expires_at)
            
        notification_id = notification_system.create_notification(
            user_id=request.user_id,
            notification_type=request.notification_type,
            title=request.title,
            message=request.message,
            priority=request.priority,
            action_url=request.action_url or None,
            action_text=request.action_text or None,
            expires_at=expires_at,
            metadata=request.metadata or {}
        )
        return {"success": True, "notification_id": notification_id}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/notifications/settings/{user_id}")
async def get_notification_settings(user_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT email_notifications, push_notifications, recommendation_notifications,
                       system_alerts, promotion_notifications, notification_frequency,
                       quiet_hours_start, quiet_hours_end
                FROM notification_settings
                WHERE user_id = ?
            """, (user_id,))
            
            row = cursor.fetchone()
            if row:
                return {
                    "success": True,
                    "settings": {
                        "email_notifications": bool(row[0]),
                        "push_notifications": bool(row[1]),
                        "recommendation_notifications": bool(row[2]),
                        "system_alerts": bool(row[3]),
                        "promotion_notifications": bool(row[4]),
                        "notification_frequency": row[5],
                        "quiet_hours_start": row[6],
                        "quiet_hours_end": row[7]
                    }
                }
            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                return {
                    "success": True,
                    "settings": {
                        "email_notifications": True,
                        "push_notifications": True,
                        "recommendation_notifications": True,
                        "system_alerts": True,
                        "promotion_notifications": True,
                        "notification_frequency": "daily",
                        "quiet_hours_start": "22:00",
                        "quiet_hours_end": "08:00"
                    }
                }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/notifications/settings")
async def update_notification_settings(request: NotificationSettingsRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT OR REPLACE INTO notification_settings 
                (user_id, email_notifications, push_notifications, recommendation_notifications,
                 system_alerts, promotion_notifications, notification_frequency,
                 quiet_hours_start, quiet_hours_end, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
            """, (
                request.user_id, request.email_notifications, request.push_notifications,
                request.recommendation_notifications, request.system_alerts,
                request.promotion_notifications, request.notification_frequency,
                request.quiet_hours_start, request.quiet_hours_end
            ))
            conn.commit()
            return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/alerts")
async def get_active_alerts(severity: Optional[str] = None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        alerts = notification_system.get_active_alerts(severity)
        return {"success": True, "alerts": alerts}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/alerts/resolve/{alert_id}")
async def resolve_alert(alert_id: int, resolved_by: Optional[str] = None):
    """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    try:
        success = notification_system.resolve_alert(alert_id, resolved_by)
        return {"success": success}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/alerts/create")
async def create_system_alert(request: SystemAlertRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞"""
    try:
        alert_id = notification_system.create_system_alert(
            alert_type=request.alert_type,
            severity=request.severity,
            title=request.title,
            description=request.description,
            metadata=request.metadata or {}
        )
        return {"success": True, "alert_id": alert_id}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/notifications/statistics")
async def get_notification_statistics(days: int = 30):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        stats = notification_system.get_notification_statistics(days)
        return {"success": True, "statistics": stats}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        return {"success": False, "error": str(e)}

@app.post("/api/notifications/check-alerts")
async def check_and_create_alerts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤"""
    try:
        notification_system.check_and_create_alerts()
        return {"success": True, "message": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        return {"success": False, "error": str(e)}

# --- CSRF ---
CSRF_TOKENS = set()

@app.get('/api/csrf-token')
async def get_csrf_token():
    token = secrets.token_urlsafe(32)
    CSRF_TOKENS.add(token)
    return {"token": token}

@app.middleware('http')
async def csrf_protect(request: Request, call_next):
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º CSRF –∑–∞—â–∏—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # if request.method in ('POST', 'PUT', 'DELETE'):
    #     token = request.headers.get('X-CSRF-Token')
    #     if not token or token not in CSRF_TOKENS:
    #         return JSONResponse(status_code=403, content={"detail": "CSRF token missing or invalid"})
    response = await call_next(request)
    return response

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    tb = traceback.format_exc()
    print(f"[ERROR] {tb}")
    return JSONResponse(
        status_code=500,
        content={"success": False, "error": str(exc), "traceback": tb}
    )

@app.get("/api/quick-scenarios")
async def api_get_quick_scenarios():
    try:
        scenarios = get_all_quick_scenarios()
        from database import get_all_brands_cached, get_all_cities, get_all_models, execute_query
        brands = get_all_brands_cached()
        cities = get_all_cities()
        models = get_all_models()
        top_brands = brands[:3] if brands else []
        top_cities = cities[:3] if cities else []
        electric_count_result = execute_query("SELECT COUNT(*) FROM car WHERE fuel_type LIKE '%—ç–ª–µ–∫—Ç—Ä–æ%' OR fuel_type LIKE '%electric%'")
        electric_count = electric_count_result[0][0] if electric_count_result else 0
        dealers = execute_query("SELECT DISTINCT dealer_center FROM car WHERE dealer_center IS NOT NULL AND dealer_center != ''")
        dynamic = []
        # –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –≤ –ú–æ—Å–∫–≤–µ
        if electric_count > 0 and any(city.lower() == '–º–æ—Å–∫–≤–∞' for city in cities):
            dynamic.append({
                "title": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å –≤ –ú–æ—Å–∫–≤–µ –¥–æ 3 –º–ª–Ω",
                "icon": "‚ö°",
                "query": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å –≤ –ú–æ—Å–∫–≤–µ –¥–æ 3 –º–ª–Ω"
            })
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–ø-–±—Ä–µ–Ω–¥–æ–≤
        if len(top_brands) >= 2:
            dynamic.append({
                "title": f"–°—Ä–∞–≤–Ω–∏—Ç—å {top_brands[0]} –∏ {top_brands[1]}",
                "icon": "‚öñÔ∏è",
                "query": f"–°—Ä–∞–≤–Ω–∏—Ç—å {top_brands[0]} –∏ {top_brands[1]}"
            })
        # –î–∏–ª–µ—Ä —Ä—è–¥–æ–º
        if dealers and dealers[0][0]:
            dynamic.append({
                "title": f"–î–∏–ª–µ—Ä {dealers[0][0]} —Ä—è–¥–æ–º",
                "icon": "üìç",
                "query": f"–î–∏–ª–µ—Ä {dealers[0][0]} —Ä—è–¥–æ–º"
            })
        # –î–ª—è —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏
        if any('—Å–µ–º—å—è' in m.lower() for m in models):
            dynamic.append({
                "title": "–î–ª—è —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏",
                "icon": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
                "query": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏"
            })
        # –î–∏–∑–µ–ª—å–Ω—ã–µ SUV 2023 (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∞–≤—Ç–æ)
        diesel_suv_count = execute_query("SELECT COUNT(*) FROM car WHERE (body_type LIKE '%SUV%' OR body_type LIKE '%–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫%') AND fuel_type LIKE '%–¥–∏–∑–µ–ª—å%' AND manufacture_year=2023")
        if diesel_suv_count and diesel_suv_count[0][0] > 0:
            dynamic.append({
                "title": "–î–∏–∑–µ–ª—å–Ω—ã–µ SUV 2023",
                "icon": "üöô",
                "query": "–î–∏–∑–µ–ª—å–Ω—ã–π SUV 2023"
            })
        # –ö—Ä–µ–¥–∏—Ç –Ω–∞ Camry (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å Camry)
        if any('camry' in m.lower() for m in models):
            dynamic.append({
                "title": "–ö—Ä–µ–¥–∏—Ç –Ω–∞ Camry",
                "icon": "üßæ",
                "query": "–ö—Ä–µ–¥–∏—Ç –Ω–∞ Camry"
            })
        all_titles = set((s['title'], s['query']) for s in scenarios)
        for d in dynamic:
            if (d['title'], d['query']) not in all_titles:
                scenarios.append(d)
        return {"success": True, "scenarios": scenarios}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.post("/api/quick-scenarios")
async def api_add_quick_scenario(data: dict = Body(...)):
    try:
        title = data.get("title")
        icon = data.get("icon", "")
        query = data.get("query")
        if not title or not query:
            return {"success": False, "error": "title –∏ query –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}
        scenario_id = add_quick_scenario(title, icon, query)
        return {"success": True, "id": scenario_id}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.put("/api/quick-scenarios/{scenario_id}")
async def api_update_quick_scenario(scenario_id: int, data: dict = Body(...)):
    try:
        title = data.get("title")
        icon = data.get("icon", "")
        query = data.get("query")
        if not title or not query:
            return {"success": False, "error": "title –∏ query –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"}
        ok = update_quick_scenario(scenario_id, title, icon, query)
        return {"success": ok}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.delete("/api/quick-scenarios/{scenario_id}")
async def api_delete_quick_scenario(scenario_id: int):
    try:
        ok = delete_quick_scenario(scenario_id)
        return {"success": ok}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.get("/api/cars/{car_id}")
async def get_car(car_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID (car –∏–ª–∏ used_car)"""
    car = get_car_by_id(car_id)
    if car:
        return {"success": True, "car": car}
    return {"success": False, "error": "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

@app.put("/api/cars/{car_id}")
async def update_car(car_id: int, car: CarCreateRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID (car –∏–ª–∏ used_car –ø–æ state)"""
    try:
        table = 'car' if car.state == 'new' else 'used_car'
        columns = [
            'mark', 'model', 'price', 'city', 'manufacture_year', 'fuel_type',
            'body_type', 'gear_box_type', 'driving_gear_type', 'dealer_center', 'mileage'
        ]
        values = [
            car.mark, car.model, car.price, car.city, car.manufacture_year, car.fuel_type,
            car.body_type, car.gear_box_type, car.driving_gear_type, car.dealer_center, car.mileage
        ]
        # –î–ª—è –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ mileage –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
        if table == 'car':
            columns = columns[:-1]
            values = values[:-1]
        set_clause = ', '.join([f"{col}=?" for col in columns])
        query = f"UPDATE {table} SET {set_clause} WHERE id=?"
        execute_query(query, values + [car_id])
        return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
        return {"success": False, "error": str(e)}

@app.delete("/api/cars/{car_id}")
async def delete_car(car_id: int):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID (car –∏ used_car)"""
    try:
        execute_query("DELETE FROM car WHERE id=?", [car_id])
        execute_query("DELETE FROM used_car WHERE id=?", [car_id])
        return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/users/analytics")
async def get_users_analytics():
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        from user_analytics import UserAnalytics
        analytics = UserAnalytics()
        with get_db() as conn:
            cursor = conn.cursor()
            # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("SELECT COUNT(DISTINCT user_id) FROM user_history WHERE user_id IS NOT NULL AND user_id != ''")
            total_users = cursor.fetchone()[0] or 0
            # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            cursor.execute("SELECT COUNT(DISTINCT session_id) FROM user_sessions WHERE start_time >= date('now')")
            active_sessions = cursor.fetchone()[0] or 0
            # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
            cursor.execute("SELECT COUNT(DISTINCT user_id) FROM user_history WHERE date(timestamp) >= date('now', '-7 days')")
            new_users = cursor.fetchone()[0] or 0
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ (–º–∏–Ω—É—Ç—ã)
            cursor.execute("SELECT AVG(avg_session_duration) FROM user_sessions WHERE avg_session_duration > 0")
            avg_session_time = round(cursor.fetchone()[0] or 0, 1)
        return {
            "total_users": total_users,
            "active_sessions": active_sessions,
            "new_users": new_users,
            "avg_session_time": f"{avg_session_time} –º–∏–Ω"
        }
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.get("/api/cities")
async def get_cities(with_stats: int = 0):
    try:
        if with_stats:
            from database import get_cities_with_stats
            return {"cities": get_cities_with_stats()}
        cities_car = get_all_cities(used=False)
        cities_used = get_all_cities(used=True)
        cities = sorted(set(cities_car + cities_used))
        return {"cities": cities}
    except Exception as e:
        return {"cities": [], "error": str(e)}

@app.get("/api/cities/with-stats")
async def get_cities_with_stats_api():
    try:
        from database import get_cities_with_stats
        return {"cities": get_cities_with_stats()}
    except Exception as e:
        return {"cities": [], "error": str(e)}

@app.route('/api/cars/bulk-delete', methods=['POST'])
def bulk_delete_cars():
    data = request.get_json()
    ids = data.get('ids', [])
    if not ids:
        return {'success': False, 'error': 'No ids provided'}, 400
    try:
        from database import delete_cars_by_ids
        deleted = delete_cars_by_ids(ids)
        return {'success': True, 'deleted': deleted}
    except Exception as e:
        return {'success': False, 'error': str(e)}, 500

@app.get("/api/options")
async def get_options():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–ø—Ü–∏–π (code, description)
    """
    try:
        options = get_all_options()
        return {"success": True, "options": options}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.get("/api/dealers/{dealer_id}")
async def get_dealer(dealer_id: int = Path(...)):
    try:
        dealer = execute_query("SELECT * FROM dealer_centers WHERE id = ?", [dealer_id])
        if dealer:
            d = dealer[0]
            dealer_dict = {
                "id": d[0],
                "name": d[1],
                "address": d[2],
                "phone": d[3],
                "email": d[4],
                "website": d[5],
                "latitude": d[6],
                "longitude": d[7],
                "brands": d[8]
            }
            return {"success": True, "dealer": dealer_dict}
        return {"success": False, "error": "–î–∏–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.delete("/api/dealers/{dealer_id}")
async def delete_dealer(dealer_id: int = Path(...)):
    try:
        execute_query("DELETE FROM dealer_centers WHERE id = ?", [dealer_id])
        return {"success": True}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.post("/api/dealers")
async def add_dealer(data: dict = Body(...)):
    try:
        name = data.get("name")
        address = data.get("address")
        phone = data.get("phone")
        email = data.get("email")
        website = data.get("website")
        latitude = data.get("latitude")
        longitude = data.get("longitude")
        brands = data.get("brands")
        execute_query(
            "INSERT INTO dealer_centers (name, address, phone, email, website, latitude, longitude, brands) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
            [name, address, phone, email, website, latitude, longitude, brands]
        )
        return {"success": True}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.post("/api/settings")
async def save_settings(data: dict = Body(...)):
    try:
        # –ü—Ä–∏–º–µ—Ä: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª settings.json
        with open("settings.json", "w", encoding="utf-8") as f:
            import json
            json.dump(data, f, ensure_ascii=False, indent=2)
        return {"success": True}
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.get("/api/analytics")
async def get_analytics():
    try:
        car_count = execute_query("SELECT COUNT(*) FROM car")[0][0]
        used_car_count = execute_query("SELECT COUNT(*) FROM used_car")[0][0]
        dealer_count = execute_query("SELECT COUNT(*) FROM dealer_centers")[0][0]
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ user_history
        try:
            user_count = execute_query("SELECT COUNT(DISTINCT user_id) FROM user_history WHERE user_id IS NOT NULL AND user_id != ''")[0][0]
        except:
            user_count = 0
        return {
            "cars": car_count + used_car_count,
            "dealers": dealer_count,
            "users": user_count
        }
    except Exception as e:
        return {"success": False, "error": str(e)}

@app.get("/api/body_types")
async def get_body_types():
    try:
        from database import get_all_unique_values
        original_values = get_all_unique_values()
        types = normalize_filter_values(original_values.get('body_type', []), 'body_type')
        return {"body_types": types}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∫—É–∑–æ–≤–∞: {e}")
        return {"body_types": []}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
def normalize_filter_values(field_values, field_type):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
    –∏ –≤—ã–±–∏—Ä–∞—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not field_values:
        return []
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å —Ä–∞–∑–Ω—ã–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
    value_mapping = {
        'fuel_type': {
            '–±–µ–Ω–∑–∏–Ω': '–ë–µ–Ω–∑–∏–Ω',
            '–ë–µ–Ω–∑–∏–Ω': '–ë–µ–Ω–∑–∏–Ω',
            '–¥–∏–∑–µ–ª—å': '–î–∏–∑–µ–ª—å', 
            '–î–∏–∑–µ–ª—å': '–î–∏–∑–µ–ª—å',
            '–≥–∏–±—Ä–∏–¥': '–ì–∏–±—Ä–∏–¥',
            '–ì–∏–±—Ä–∏–¥': '–ì–∏–±—Ä–∏–¥',
            '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π': '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π',
            '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π': '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π'
        },
        'gear_box_type': {
            '–∞–≤—Ç–æ–º–∞—Ç': '–ê–≤—Ç–æ–º–∞—Ç',
            '–ê–≤—Ç–æ–º–∞—Ç': '–ê–≤—Ç–æ–º–∞—Ç',
            '–º–µ—Ö–∞–Ω–∏–∫–∞': '–ú–µ—Ö–∞–Ω–∏–∫–∞',
            '–ú–µ—Ö–∞–Ω–∏–∫–∞': '–ú–µ—Ö–∞–Ω–∏–∫–∞'
        },
        'driving_gear_type': {
            '–ø–µ—Ä–µ–¥–Ω–∏–π': '–ü–µ—Ä–µ–¥–Ω–∏–π',
            '–ü–µ—Ä–µ–¥–Ω–∏–π': '–ü–µ—Ä–µ–¥–Ω–∏–π',
            '–∑–∞–¥–Ω–∏–π': '–ó–∞–¥–Ω–∏–π',
            '–ó–∞–¥–Ω–∏–π': '–ó–∞–¥–Ω–∏–π',
            '–ø–æ–ª–Ω—ã–π': '–ü–æ–ª–Ω—ã–π',
            '–ü–æ–ª–Ω—ã–π': '–ü–æ–ª–Ω—ã–π'
        },
        'body_type': {
            '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫': '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫',
            '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫': '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫',
            '–∫—Ä–æ—Å—Å–æ–≤–µ—Ä': '–ö—Ä–æ—Å—Å–æ–≤–µ—Ä',
            '–ö—Ä–æ—Å—Å–æ–≤–µ—Ä': '–ö—Ä–æ—Å—Å–æ–≤–µ—Ä',
            '—Å–µ–¥–∞–Ω': '–°–µ–¥–∞–Ω',
            '–°–µ–¥–∞–Ω': '–°–µ–¥–∞–Ω',
            '—É–Ω–∏–≤–µ—Ä—Å–∞–ª': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
            '–£–Ω–∏–≤–µ—Ä—Å–∞–ª': '–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
            '—Ö–µ—Ç—á–±—ç–∫': '–•–µ—Ç—á–±—ç–∫',
            '–•–µ—Ç—á–±—ç–∫': '–•–µ—Ç—á–±—ç–∫',
            '–ø–∏–∫–∞–ø': '–ü–∏–∫–∞–ø',
            '–ü–∏–∫–∞–ø': '–ü–∏–∫–∞–ø',
            '–º–∏–Ω–∏–≤—ç–Ω': '–ú–∏–Ω–∏–≤—ç–Ω',
            '–ú–∏–Ω–∏–≤—ç–Ω': '–ú–∏–Ω–∏–≤—ç–Ω',
            '–º–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å': '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å',
            '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å': '–ú–∏–∫—Ä–æ–∞–≤—Ç–æ–±—É—Å',
            '—Ñ—É—Ä–≥–æ–Ω': '–§—É—Ä–≥–æ–Ω',
            '–§—É—Ä–≥–æ–Ω': '–§—É—Ä–≥–æ–Ω',
            '–∫—É–ø–µ': '–ö—É–ø–µ',
            '–ö—É–ø–µ': '–ö—É–ø–µ',
            '–ª–∏—Ñ—Ç–±—ç–∫': '–õ–∏—Ñ—Ç–±—ç–∫',
            '–õ–∏—Ñ—Ç–±—ç–∫': '–õ–∏—Ñ—Ç–±—ç–∫'
        }
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–ª—è
    mapping = value_mapping.get(field_type, {})
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    normalized = {}
    for value in field_values:
        if value:
            # –ò—â–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ
            normalized_value = mapping.get(value, value.capitalize())
            normalized[normalized_value] = True
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    return sorted(normalized.keys())

@app.get("/api/fuel_types")
async def get_fuel_types():
    try:
        from database import get_all_unique_values
        original_values = get_all_unique_values()
        types = normalize_filter_values(original_values.get('fuel_type', []), 'fuel_type')
        return {"fuel_types": types}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞: {e}")
        return {"fuel_types": []}

@app.get("/api/gear_box_types")
async def get_gear_box_types():
    try:
        from database import get_all_unique_values
        original_values = get_all_unique_values()
        types = normalize_filter_values(original_values.get('gear_box_type', []), 'gear_box_type')
        return {"gear_box_types": types}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏: {e}")
        return {"gear_box_types": []}

@app.get("/api/driving_gear_types")
async def get_driving_gear_types():
    try:
        from database import get_all_unique_values
        original_values = get_all_unique_values()
        types = normalize_filter_values(original_values.get('driving_gear_type', []), 'driving_gear_type')
        return {"driving_gear_types": types}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–∏–≤–æ–¥–∞: {e}")
        return {"driving_gear_types": []}

@app.get("/api/years")
async def get_years():
    import sqlite3
    DB_PATH = 'instance/cars.db'
    years = set()
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    for table in ['car', 'used_car']:
        try:
            cursor.execute(f'SELECT DISTINCT manufacture_year FROM {table}')
            for row in cursor.fetchall():
                if row[0]:
                    years.add(int(row[0]))
        except Exception:
            pass
    conn.close()
    return {"years": sorted(years, reverse=True)}

@app.get("/api/cars/{car_id}/details")
async def get_car_details(car_id: int, used: Optional[bool] = None):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ —Å –æ–ø—Ü–∏—è–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    print(f"üîç API: get_car_details called with car_id: {car_id}, used: {used}")
    try:
        # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω used, –∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
        if used is not None:
            if used:
                car_query = "SELECT *, 'used' as source FROM used_car WHERE id = ?"
                car_result = execute_query(car_query, [car_id])
                is_used = True
            else:
                car_query = "SELECT *, 'new' as source FROM car WHERE id = ?"
                car_result = execute_query(car_query, [car_id])
                is_used = False
            if not car_result:
                raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            car = dict(car_result[0])
            print(f"üîç API: Found car in {'used' if used else 'new'} table: {car.get('mark', 'Unknown')} {car.get('model', 'Unknown')} {car.get('manufacture_year', 'Unknown')}")
        else:
            # –°—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –∏—â–µ–º –≤ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
            car_query = "SELECT *, 'new' as source FROM car WHERE id = ?"
            used_car_query = "SELECT *, 'used' as source FROM used_car WHERE id = ?"
            car_result = execute_query(car_query, [car_id])
            used_car_result = execute_query(used_car_query, [car_id])
            
            print(f"üîç API: Search results - car table: {len(car_result) if car_result else 0}, used_car table: {len(used_car_result) if used_car_result else 0}")
            
            if car_result and used_car_result:
                car_data = dict(car_result[0])
                used_car_data = dict(used_car_result[0])
                
                print(f"üîç API: Car from 'car' table: {car_data.get('mark', 'Unknown')} {car_data.get('model', 'Unknown')} {car_data.get('manufacture_year', 'Unknown')}")
                print(f"üîç API: Car from 'used_car' table: {used_car_data.get('mark', 'Unknown')} {used_car_data.get('model', 'Unknown')} {used_car_data.get('manufacture_year', 'Unknown')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                has_used_specific_fields = (
                    used_car_data.get('wheel_type') or 
                    used_car_data.get('owners_count') or 
                    used_car_data.get('accident') or
                    used_car_data.get('mileage')
                )
                
                print(f"üîç API: Has used specific fields: {has_used_specific_fields}")
                
                # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω used –ø–∞—Ä–∞–º–µ—Ç—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if used is not None:
                    if used:
                        car = used_car_data
                        is_used = True
                        print(f"üîç API: Selected used car (explicit used=True)")
                    else:
                        car = car_data
                        is_used = False
                        print(f"üîç API: Selected new car (explicit used=False)")
                else:
                    # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∑–∞–ø–∏—Å—å –±–æ–ª—å—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø—Ä–æ—Å—É
                    # –ï—Å–ª–∏ –≤ used_car –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
                    if has_used_specific_fields:
                        car = used_car_data
                        is_used = True
                        print(f"üîç API: Selected used car (has specific fields)")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π, –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏
                        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º —Ç–æ–π –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä–∞—è –±–æ–ª—å—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
                        car = car_data
                        is_used = False
                        print(f"üîç API: Selected new car (no specific fields, default to new)")
            elif car_result:
                car = dict(car_result[0])
                is_used = False
                print(f"üîç API: Found only in car table: {car.get('mark', 'Unknown')} {car.get('model', 'Unknown')} {car.get('manufacture_year', 'Unknown')}")
            elif used_car_result:
                car = dict(used_car_result[0])
                is_used = True
                print(f"üîç API: Found only in used_car table: {car.get('mark', 'Unknown')} {car.get('model', 'Unknown')} {car.get('manufacture_year', 'Unknown')}")
            else:
                raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ü–∏–∏
        try:
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Å options_group_id –∏ seqno
            options_query = "SELECT * FROM option WHERE car_id = ? ORDER BY options_group_id, seqno"
            try:
                options_result = execute_query(options_query, [car_id])
            except Exception as e:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è seqno, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
                if 'no such column: seqno' in str(e):
                    options_query = "SELECT * FROM option WHERE car_id = ? ORDER BY options_group_id"
                    options_result = execute_query(options_query, [car_id])
                else:
                    raise
            options = [dict(opt) for opt in options_result] if options_result else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ü–∏–π: {e}")
            options = []
        
        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –æ–ø—Ü–∏–π
        try:
            option_groups_query = "SELECT * FROM option_group ORDER BY id"
            option_groups_result = execute_query(option_groups_query)
            option_groups = [dict(group) for group in option_groups_result] if option_groups_result else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø –æ–ø—Ü–∏–π: {e}")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –≥—Ä—É–ø–ø—ã –æ–ø—Ü–∏–π –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            option_groups = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
        grouped_options = {}
        for option in options:
            group_id = option.get('options_group_id', 0)
            if group_id not in grouped_options:
                grouped_options[group_id] = []
            grouped_options[group_id].append(option)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        try:
            if is_used:
                pictures_query = "SELECT * FROM used_car_picture WHERE used_car_id = ? ORDER BY seqno"
            else:
                pictures_query = "SELECT * FROM picture WHERE car_id = ? ORDER BY seqno"
            
            try:
                pictures_result = execute_query(pictures_query, [car_id])
            except Exception as e:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è seqno, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
                if 'no such column: seqno' in str(e):
                    if is_used:
                        pictures_query = "SELECT * FROM used_car_picture WHERE used_car_id = ?"
                    else:
                        pictures_query = "SELECT * FROM picture WHERE car_id = ?"
                    pictures_result = execute_query(pictures_query, [car_id])
                else:
                    raise
            
            pictures = [dict(pic) for pic in pictures_result] if pictures_result else []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")
            pictures = []
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        characteristics = {}
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        basic_fields = [
            'mark', 'model', 'manufacture_year', 'price', 'city', 'color', 
            'fuel_type', 'power', 'body_type', 'gear_box_type', 'driving_gear_type', 
            'engine_vol', 'dealer_center', 'vin', 'doc_num', 'title'
        ]
        
        for field in basic_fields:
            if field in car and car[field] is not None:
                characteristics[field] = car[field]
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π)
        if not is_used:
            additional_fields = [
                'stock_qty', 'code_compl', 'interior_color', 'engine', 'door_qty',
                'pts_colour', 'model_year', 'fuel_consumption_mixed', 'max_torque',
                'acceleration_0_100', 'max_speed', 'eco_class', 'dimensions', 'weight',
                'cargo_volume', 'compl_level', 'interior_code', 'color_code',
                'car_order_int_status', 'sale_price', 'max_additional_discount',
                'max_discount_trade_in', 'max_discount_credit', 'max_discount_casko',
                'max_discount_extra_gear', 'max_discount_life_insurance'
            ]
            
            for field in additional_fields:
                if field in car and car[field] is not None:
                    characteristics[field] = car[field]
        else:
            # –î–ª—è –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            used_fields = ['mileage', 'date_begin', 'date_end', 'ad_status', 'allow_email', 'wheel_type', 'owners_count', 'accident']
            for field in used_fields:
                if field in car and car[field] is not None:
                    characteristics[field] = car[field]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        result = {
            "car": car,
            "is_used": is_used,
            "characteristics": characteristics,
            "options": {
                "groups": option_groups,
                "items": grouped_options
            },
            "pictures": pictures
        }
        
        print(f"üîç API: Returning car data for ID {car_id}: {car.get('mark', 'Unknown')} {car.get('model', 'Unknown')} {car.get('manufacture_year', 'Unknown')}")
        print(f"üîç API: is_used: {is_used}")
        
        return {"success": True, "data": result}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –º–∞—à–∏–Ω—ã {car_id}: {str(e)}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

# --- API endpoints –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π ---

@app.post("/api/car/parse", response_model=CarParseResponse)
async def parse_car_by_price(request: CarParseRequest):
    """–ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ —Ü–µ–Ω–µ –Ω–∞ —Å–∞–π—Ç–µ aaa-motors.ru"""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥: {request.brand} {request.model} –∑–∞ {request.price} —Ä—É–±, –≥–æ—Ä–æ–¥: {request.city}")
        car_data = {
            'mark': request.brand,
            'model': request.model,
            'city': request.city or ''
        }
        base_url = car_parser.generate_car_link(car_data)
        if not base_url:
            return CarParseResponse(
                success=False,
                error=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è {request.brand} {request.model}"
            )
        result = car_parser.find_car_by_price(
            base_url=base_url,
            target_price=request.price,
            target_brand=request.brand,
            target_model=request.model,
            tolerance=request.tolerance or 0.1
        )
        if result:
            if 'url' in result:
                return CarParseResponse(
                    success=True,
                    url=result['url'],
                    brand=result['brand'],
                    model=result['model'],
                    price=result['price'],
                    found_price=result['found_price'],
                    price_difference=result['price_difference'],
                    title=result.get('title'),
                    tech_info=result.get('tech_info'),
                    status=result.get('status'),
                    address=result.get('address'),
                    img_url=result.get('img_url'),
                    region=result.get('region')
                )
            elif 'url_catalog_fallback' in result:
                return CarParseResponse(
                    success=False,
                    url=None,
                    url_catalog_fallback=result['url_catalog_fallback'],
                    error=f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ü–µ–Ω–µ, –Ω–æ –µ—Å—Ç—å fallback-URL –∫–∞—Ç–∞–ª–æ–≥–∞"
                )
        else:
            return CarParseResponse(
                success=False,
                error=f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {request.brand} {request.model} —Å —Ü–µ–Ω–æ–π {request.price} —Ä—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
        return CarParseResponse(
            success=False,
            error=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@app.post("/api/car/link")
async def generate_car_link(request: CarLinkRequest):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    try:
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Å—ã–ª–∫–∏: {request.brand} {request.model} {request.city}")
        car_data = {
            'mark': request.brand,
            'model': request.model,
            'city': request.city or ''
        }
        url = car_parser.generate_car_link(car_data)
        if url:
            return {
                "success": True,
                "url": url,
                "brand": request.brand,
                "model": request.model
            }
        else:
            return {
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è {request.brand} {request.model}"
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")
        return {
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }

@app.get("/api/car/parse/{car_id}")
async def parse_car_from_database(car_id: int):
    """–ù–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–∞–π—Ç–µ aaa-motors.ru"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–∑ –±–∞–∑—ã
        car = get_car_by_id(car_id)
        if not car:
            raise HTTPException(status_code=404, detail="–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
        logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –ë–î: {car['mark']} {car['model']} –∑–∞ {car['price']} —Ä—É–±")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
        base_url = car_parser.generate_car_link(car)
        if not base_url:
            return {
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è {car['mark']} {car['model']}"
            }
        
        # –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø–æ —Ü–µ–Ω–µ
        result = car_parser.find_car_by_price(
            base_url=base_url,
            target_price=int(car['price']),
            target_brand=car['mark'],
            target_model=car['model'],
            tolerance=0.1
        )
        
        if result:
            return {
                "success": True,
                "car_id": car_id,
                "database_car": car,
                "external_car": result
            }
        else:
            return {
                "success": False,
                "error": f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å {car['mark']} {car['model']} —Å —Ü–µ–Ω–æ–π {car['price']} —Ä—É–± –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ",
                "database_car": car,
                "generated_url": base_url
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ –ë–î: {e}")
        raise HTTPException(status_code=500, detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")



@app.post("/api/cars/show-more-in-message")
async def show_more_cars_in_message(request: dict = Body(...)):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
    try:
        brand = request.get('brand', '')
        model = request.get('model', '')
        offset = request.get('offset', 0)
        total_count = request.get('total_count', 0)
        message_index = request.get('message_index', 'index_new')
        
        # –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cars = search_all_cars(brand=brand if brand else None, model=model if model else None)
        
        if not cars:
            return {
                "success": False,
                "message": "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                "cars": []
            }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        cars_per_page = 5
        start_index = offset
        end_index = min(start_index + cars_per_page, len(cars))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        cars_to_show = cars[start_index:end_index]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º HTML –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        additional_cars_html = ""
        for i, car in enumerate(cars_to_show, start_index + 1):
            brand = car.get('mark', '')
            model = car.get('model', '')
            year = car.get('manufacture_year', '')
            price = car.get('price', 0)
            city = car.get('city', '')
            car_id = car.get('id', i)
            body_type = car.get('body_type', '')
            fuel_type = car.get('fuel_type', '')
            power = car.get('power', '')
            gear_box = car.get('gear_box_type', '')
            
            additional_cars_html += f"### <span class=\"car-link\" onclick=\"showCarDetails({car_id})\">{i}. {brand} {model} ({year})</span>\n"
            additional_cars_html += f"üí∞ **–¶–µ–Ω–∞:** {price:,.0f} ‚ÇΩ\n"
            if city:
                additional_cars_html += f"üìç **–ì–æ—Ä–æ–¥:** {city}\n"
            if body_type:
                additional_cars_html += f"üöô **–ö—É–∑–æ–≤:** {body_type}\n"
            if fuel_type:
                additional_cars_html += f"‚õΩ **–¢–æ–ø–ª–∏–≤–æ:** {fuel_type}\n"
            if power:
                additional_cars_html += f"üí™ **–ú–æ—â–Ω–æ—Å—Ç—å:** {power}\n"
            if gear_box:
                additional_cars_html += f"‚öôÔ∏è **–ö–æ—Ä–æ–±–∫–∞:** {gear_box}\n"
            additional_cars_html += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞
        has_more = end_index < len(cars)
        next_offset = end_index if has_more else None
        
        return {
            "success": True,
            "additional_cars_html": additional_cars_html,
            "has_more": has_more,
            "next_offset": next_offset,
            "total_shown": end_index,
            "total_count": len(cars),
            "message_index": message_index
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {str(e)}")
        return {
            "success": False,
            "message": f"–û—à–∏–±–∫–∞: {str(e)}",
            "cars": []
        }

@app.get("/api/mileage_ranges")
async def get_mileage_ranges():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø—Ä–æ–±–µ–≥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–µ–≥–∞ –∏–∑ used_car
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    CASE 
                        WHEN mileage <= 20000 THEN '–¥–æ 20 —Ç—ã—Å –∫–º'
                        WHEN mileage <= 50000 THEN '20-50 —Ç—ã—Å –∫–º'
                        WHEN mileage <= 100000 THEN '50-100 —Ç—ã—Å –∫–º'
                        WHEN mileage <= 200000 THEN '100-200 —Ç—ã—Å –∫–º'
                        ELSE '–±–æ–ª–µ–µ 200 —Ç—ã—Å –∫–º'
                    END as range,
                    COUNT(*) as count
                FROM used_car 
                WHERE mileage IS NOT NULL AND mileage > 0
                GROUP BY range
                ORDER BY count DESC
            """)
            ranges = cursor.fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        popular_ranges = [
            {"label": "–¥–æ 20 —Ç—ã—Å –∫–º", "value": "mileage_to:20000", "count": 0},
            {"label": "20-50 —Ç—ã—Å –∫–º", "value": "mileage_from:20000;mileage_to:50000", "count": 0},
            {"label": "50-100 —Ç—ã—Å –∫–º", "value": "mileage_from:50000;mileage_to:100000", "count": 0},
            {"label": "100-200 —Ç—ã—Å –∫–º", "value": "mileage_from:100000;mileage_to:200000", "count": 0},
            {"label": "–±–æ–ª–µ–µ 200 —Ç—ã—Å –∫–º", "value": "mileage_from:200000", "count": 0}
        ]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∏–∑ –ë–î
        for range_info in ranges:
            for popular_range in popular_ranges:
                if popular_range["label"] == range_info[0]:
                    popular_range["count"] = range_info[1]
                    break
        
        return {"success": True, "ranges": popular_ranges}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø—Ä–æ–±–µ–≥–∞: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/popular_options")
async def get_popular_options():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–ø—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        options = get_all_options()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        popular_option_codes = [
            "S403A",  # –õ—é–∫
            "S423A",  # –ü–∞–Ω–æ—Ä–∞–º–Ω–∞—è –∫—Ä—ã—à–∞
            "S430A",  # –ö–ª–∏–º–∞—Ç-–∫–æ–Ω—Ç—Ä–æ–ª—å
            "S431A",  # –ü–æ–¥–æ–≥—Ä–µ–≤ —Å–∏–¥–µ–Ω–∏–π
            "S459A",  # –≠–ª–µ–∫—Ç—Ä–æ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ —Å–∏–¥–µ–Ω–∏–π
            "S494A",  # –°–∏—Å—Ç–µ–º–∞ –ø–∞—Ä–∫–æ–≤–∫–∏
            "S502A",  # –ù–∞–≤–∏–≥–∞—Ü–∏—è
            "S508A",  # –ü–∞—Ä–∫—Ç—Ä–æ–Ω–∏–∫
            "S521A",  # –î–∞—Ç—á–∏–∫ –¥–æ–∂–¥—è
            "S522A",  # –ö—Å–µ–Ω–æ–Ω
            "S524A",  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ñ–∞—Ä—ã
            "S534A",  # –°–∏—Å—Ç–µ–º–∞ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            "S548A",  # –°–ø–∏–¥–æ–º–µ—Ç—Ä —Å –∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂–µ–º
            "S563A",  # –û—Å–≤–µ—â–µ–Ω–∏–µ —Å–∞–ª–æ–Ω–∞
            "S609A",  # –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ Professional
            "S610A",  # –î–∏—Å–ø–ª–µ–π –≤ –≥–æ–ª–æ–≤–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            "S612A",  # BMW Assist
            "S615A",  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ BMW Online
            "S616A",  # BMW Online
            "S620A",  # –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            "S633A",  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É
            "S654A",  # –†–∞–¥–∏–æ BMW Professional
            "S655A",  # –°–ø—É—Ç–Ω–∏–∫–æ–≤–æ–µ —Ä–∞–¥–∏–æ
            "S676A",  # –ê–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ HiFi
            "S693A",  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ BMW Satellite Radio
            "S697A",  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
            "S6ACA",  # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            "S6AEA",  # Teleservices
            "S6AKA",  # ConnectedDrive Services
            "S6AMA",  # Real-Time Traffic Information
            "S6ANA",  # Concierge Services
            "S6APA",  # Remote Services
            "S6ARA",  # Online Speech Processing
            "S6ASA",  # Emergency Call
            "S6NSA",  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏ —Å USB
            "S6NXA",  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–æ–±–∏–ª—å–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É —Å –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∑–∞—Ä—è–¥–∫–æ–π
            "S6UAA",  # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            "S6UHA",  # Traffic Information
            "S6VCA",  # Control for ConnectedDrive
            "S6WCA",  # Multifunctional instrument display
            "S6WDA",  # WLAN Hotspot
            "S6WEA",  # Apps
            "S6WFA",  # Apple CarPlay Preparation
            "S6WGA",  # Android Auto Preparation
            "S6WHA",  # Wireless Charging
            "S6WIA",  # WiFi Hotspot
            "S6WJA",  # Digital Key
            "S6WKA",  # Connected Package Professional
            "S6WLA",  # Connected Package Professional Plus"
        ]
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –æ–ø—Ü–∏–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∫–æ–¥–∞–º
        popular_options = []
        for option in options:
            if option["code"] in popular_option_codes:
                popular_options.append(option)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –æ–ø—Ü–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
        general_options = [
            {"code": "LUXURY", "description": "–õ—é–∫—Å-–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"},
            {"code": "COMFORT", "description": "–ö–æ–º—Ñ–æ—Ä—Ç-–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"},
            {"code": "SPORT", "description": "–°–ø–æ—Ä—Ç-–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"},
            {"code": "FAMILY", "description": "–°–µ–º–µ–π–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"},
            {"code": "BUSINESS", "description": "–ë–∏–∑–Ω–µ—Å-–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è"}
        ]
        
        return {"success": True, "options": popular_options[:10] + general_options}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –æ–ø—Ü–∏–π: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/popular_dealers")
async def get_popular_dealers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∏–ª–µ—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        dealers = get_all_dealer_centers()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–ª–µ—Ä–∞–º
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT dealer_center, COUNT(*) as count
                FROM car 
                WHERE dealer_center IS NOT NULL AND dealer_center != ''
                GROUP BY dealer_center
                ORDER BY count DESC
                LIMIT 10
            """)
            dealer_stats = cursor.fetchall()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∏–ª–µ—Ä–æ–≤
        popular_dealers = []
        for dealer_name, count in dealer_stats:
            popular_dealers.append({
                "name": dealer_name,
                "count": count
            })
        
        return {"success": True, "dealers": popular_dealers}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–∏–ª–µ—Ä–æ–≤: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/car_states")
async def get_car_states():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–Ω–æ–≤—ã–π/–±/—É)"""
    try:
        with get_db() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –∏ –ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ
            new_count = cursor.execute("SELECT COUNT(*) FROM car").fetchone()[0]
            used_count = cursor.execute("SELECT COUNT(*) FROM used_car").fetchone()[0]
            
            states = [
                {"label": "–ù–æ–≤—ã–π", "value": "new", "count": new_count},
                {"label": "–° –ø—Ä–æ–±–µ–≥–æ–º", "value": "used", "count": used_count}
            ]
            
            return {"success": True, "states": states}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}")
        return {"success": False, "error": str(e)}

@app.get("/api/popular_scenarios")
async def get_popular_scenarios():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    try:
        scenarios = [
            {
                "title": "–°–µ–º–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                "icon": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
                "query": "–°–µ–º–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –±–æ–ª—å—à–∏–º –±–∞–≥–∞–∂–Ω–∏–∫–æ–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é",
                "description": "–î–ª—è —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏"
            },
            {
                "title": "–î–ª—è –≥–æ—Ä–æ–¥–∞",
                "icon": "üèôÔ∏è",
                "query": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –≥–æ—Ä–æ–¥–∞ —Å —Ö–æ—Ä–æ—à–µ–π –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω–æ—Å—Ç—å—é",
                "description": "–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∏ –º–∞–Ω–µ–≤—Ä–µ–Ω–Ω—ã–π"
            },
            {
                "title": "–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π",
                "icon": "üó∫Ô∏è",
                "query": "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –∏–ª–∏ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å –ø–æ–ª–Ω—ã–º –ø—Ä–∏–≤–æ–¥–æ–º",
                "description": "–î–ª—è –ø–æ–µ–∑–¥–æ–∫ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π"
            },
            {
                "title": "–î–ª—è —Ä–∞–±–æ—Ç—ã",
                "icon": "üíº",
                "query": "–ë–∏–∑–Ω–µ—Å-—Å–µ–¥–∞–Ω –∏–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                "description": "–°–æ–ª–∏–¥–Ω—ã–π –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π"
            },
            {
                "title": "–î–ª—è –¥–∞—á–∏",
                "icon": "üè°",
                "query": "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –∏–ª–∏ –ø–∏–∫–∞–ø –¥–ª—è –¥–∞—á–∏ —Å –≤—ã—Å–æ–∫–∏–º –∫–ª–∏—Ä–µ–Ω—Å–æ–º",
                "description": "–ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏ –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
            },
            {
                "title": "–î–ª—è –º–æ–ª–æ–¥–µ–∂–∏",
                "icon": "üéÆ",
                "query": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∏–ª–∏ —Ö–µ—Ç—á–±—ç–∫ –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏",
                "description": "–î–∏–Ω–∞–º–∏—á–Ω—ã–π –∏ —Å—Ç–∏–ª—å–Ω—ã–π"
            },
            {
                "title": "–î–ª—è –±–∏–∑–Ω–µ—Å–∞",
                "icon": "üè¢",
                "query": "–õ—é–∫—Å-—Å–µ–¥–∞–Ω –∏–ª–∏ –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
                "description": "–ü—Ä–µ—Å—Ç–∏–∂ –∏ –∫–æ–º—Ñ–æ—Ä—Ç"
            },
            {
                "title": "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π",
                "icon": "üí∞",
                "query": "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–∏–∑–∫–∏–º —Ä–∞—Å—Ö–æ–¥–æ–º —Ç–æ–ø–ª–∏–≤–∞",
                "description": "–ù–∏–∑–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—é"
            }
        ]
        
        return {"success": True, "scenarios": scenarios}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {e}")
        return {"success": False, "error": str(e)}

# –ù–æ–≤—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

@app.post("/api/ner/analyze")
async def analyze_entities(request: ChatRequest):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏."""
    try:
        entities = ner_classifier.extract_entities(request.message)
        intent = ner_classifier.classify_intent(request.message)
        
        return {
            "entities": entities,
            "intent": intent,
            "message": request.message
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—É—â–Ω–æ—Å—Ç–µ–π: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—É—â–Ω–æ—Å—Ç–µ–π")

@app.post("/api/sentiment/analyze")
async def analyze_sentiment(request: ChatRequest):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."""
    try:
        sentiment_result = sentiment_analyzer.analyze_sentiment(request.message)
        
        return {
            "sentiment": sentiment_result,
            "message": request.message
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")

@app.post("/api/recommendations/advanced")
async def get_advanced_recommendations(request: RecommendationRequest):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ML."""
    try:
        recommendations = advanced_recommendation_engine.get_hybrid_recommendations(
            user_id=request.user_id,
            limit=request.preferences.get('limit', 10) if request.preferences else 10
        )
        
        return {
            "recommendations": recommendations,
            "user_id": request.user_id,
            "total": len(recommendations)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

@app.post("/api/dialog/enhanced")
async def enhanced_dialog(request: ChatRequest):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä."""
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ–Ω—Ç
        entities = ner_classifier.extract_entities(request.message)
        intent = ner_classifier.classify_intent(request.message)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        sentiment = sentiment_analyzer.analyze_sentiment(request.message)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        dialog_result = enhanced_dialog_manager.process_message(
            user_id=request.user_id,
            message=request.message,
            intent=intent,
            entities=entities
        )
        
        return {
            "response": dialog_result['response'],
            "state": dialog_result['state'],
            "entities": dialog_result['entities'],
            "suggested_actions": dialog_result['suggested_actions'],
            "sentiment": sentiment,
            "confidence": dialog_result['confidence']
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∞–ª–æ–≥–∞")

@app.get("/api/analytics/comprehensive")
async def get_comprehensive_analytics():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç."""
    try:
        report = data_analyzer.get_comprehensive_report()
        return report
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

@app.get("/api/analytics/trends")
async def get_trend_analysis(days: int = 30):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤."""
    try:
        trends = data_analyzer.get_trend_analysis(days)
        return trends
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤")

@app.post("/api/recommendations/feedback")
async def log_recommendation_feedback(user_id: str, recommendation_id: int, score: int):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º."""
    try:
        advanced_recommendation_engine.update_user_interaction(
            user_id=user_id,
            car_id=recommendation_id,
            interaction_type='feedback'
        )
        return {"status": "success", "message": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")

@app.get("/api/dialog/session/{user_id}")
async def get_dialog_session(user_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –¥–∏–∞–ª–æ–≥–∞."""
    try:
        analytics = enhanced_dialog_manager.get_session_analytics(user_id)
        return analytics
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")

@app.post("/api/dialog/end-session/{user_id}")
async def end_dialog_session(user_id: str, satisfaction: Optional[int] = None):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞."""
    try:
        enhanced_dialog_manager.end_session(user_id, satisfaction)
        return {"status": "success", "message": "–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")

@app.post("/api/smart-chat")
async def smart_chat(request: ChatRequest):
    """–£–º–Ω—ã–π —á–∞—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        from smart_query_router import route_query
        
        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        result = route_query(request.message, request.user_id)
        
        return JSONResponse(content=result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–º–Ω–æ–º —á–∞—Ç–µ: {str(e)}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        })

@app.post("/api/enhanced-chat")
async def enhanced_chat(request: ChatRequest):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç —Å Mistral API –∏ —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π"""
    try:
        logger.info(f"=== –£–õ–£–ß–®–ï–ù–ù–´–ô –ß–ê–¢ ===")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {request.message}")
        logger.info(f"User ID: {request.user_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä
        result = enhanced_router.route_query(request.message, request.user_id or "default")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        response = {
            "success": True,
            "type": result.get("type", "unknown"),
            "message": result.get("message", ""),
            "data": result.get("result", {}),
            "cars": result.get("result", {}).get("cars", []) if result.get("result") else [],
            "total_found": result.get("result", {}).get("total_found", 0) if result.get("result") else 0,
            "llama_used": result.get("llama_used", False),
            "mistral_used": result.get("mistral_used", False),
            "query_type": result.get("query_type", "unknown")
        }
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {response['type']}")
        return JSONResponse(content=response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        })

@app.post("/api/enhanced-chat-v2")
async def enhanced_chat_v2(request: ChatRequest):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç v2.0 —Å 95% —Ç–æ—á–Ω–æ—Å—Ç—å—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        logger.info(f"=== –£–õ–£–ß–®–ï–ù–ù–´–ô –ß–ê–¢ V2.0 ===")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {request.message}")
        logger.info(f"User ID: {request.user_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä v2.0
        result = enhanced_router_v2.route_query(request.message, request.user_id or "default")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        response = {
            "success": True,
            "type": result.get("type", "unknown"),
            "message": result.get("message", ""),
            "data": result.get("result", {}),
            "cars": result.get("result", {}).get("cars", []) if result.get("result") else [],
            "total_found": result.get("result", {}).get("total_found", 0) if result.get("result") else 0,
            "llama_used": result.get("llama_used", False),
            "mistral_used": result.get("mistral_used", False),
            "query_type": result.get("query_type", "unknown"),
            "version": "v2.0",
            "accuracy": "95%"
        }
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç v2.0 —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {response['type']}")
        return JSONResponse(content=response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ v2.0: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        })

@app.post("/api/enhanced-chat-v3")
async def enhanced_chat_v3(request: ChatRequest):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —á–∞—Ç v3.0 —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - 100% —Ç–æ—á–Ω–æ—Å—Ç—å"""
    try:
        logger.info(f"=== –£–õ–£–ß–®–ï–ù–ù–´–ô –ß–ê–¢ V3.0 ===")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {request.message}")
        logger.info(f"User ID: {request.user_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä v3.0 —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        result = enhanced_router_v3.route_query(request.message, request.user_id or "default")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
        response = {
            "success": True,
            "type": result.get("type", "unknown"),
            "message": result.get("message", ""),
            "data": result.get("result", {}),
            "cars": result.get("result", {}).get("cars", []) if result.get("result") else [],
            "total_found": result.get("result", {}).get("total_found", 0) if result.get("result") else 0,
            "llama_used": result.get("llama_used", False),
            "mistral_used": result.get("mistral_used", False),
            "query_type": result.get("query_type", "unknown"),
            "version": "v3.0",
            "accuracy": "100%",
            "filtered": result.get("rejected", False)
        }
        
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç v3.0 —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {response['type']}")
        return JSONResponse(content=response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º —á–∞—Ç–µ v3.0: {str(e)}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        })


@app.post("/api/enhanced-chat/compare")
async def enhanced_compare(request: ChatRequest):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
    try:
        result = enhanced_llama_processor.process_comparison_request(request.message)
        
        return JSONResponse(content={
            "success": True,
            "response": result.get('response', ''),
            "cars": result.get('cars', []),
            "comparison_data": result.get('comparison_data', {})
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {str(e)}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è",
            "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ."
        })

@app.post("/api/enhanced-chat/scenario")
async def enhanced_scenario(request: ChatRequest):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —á–µ—Ä–µ–∑ —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        scenario = enhanced_llama_processor._determine_scenario_from_query(request.message)
        if not scenario:
            return JSONResponse(content={
                "success": False,
                "error": "–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω",
                "message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è."
            })
        
        result = enhanced_llama_processor.process_scenario_request(request.message, scenario)
        
        return JSONResponse(content={
            "success": True,
            "response": result.get('response', ''),
            "cars": result.get('cars', []),
            "scenario": scenario,
            "recommendations": result.get('recommendations', [])
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ü–µ–Ω–∞—Ä–∏—è: {str(e)}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è",
            "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π."
        })

@app.post("/api/enhanced-chat/help")
async def enhanced_help(request: ChatRequest):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    try:
        result = enhanced_llama_processor.process_help_request(request.message)
        
        return JSONResponse(content={
            "success": True,
            "response": result.get('response', ''),
            "capabilities": result.get('capabilities', []),
            "examples": result.get('examples', [])
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø—Ä–∞–≤–∫–∏: {str(e)}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏",
            "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É."
        })

@app.post("/api/enhanced-chat/clear-context")
async def clear_enhanced_context(request: ChatRequest):
    """–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        enhanced_llama_processor.clear_user_context()
        
        return JSONResponse(content={
            "success": True,
            "message": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω"
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {str(e)}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞",
            "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç."
        })

@app.get("/api/enhanced-chat/stats")
async def get_enhanced_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    try:
        stats = enhanced_llama_processor.get_processing_stats()
        
        return JSONResponse(content={
            "success": True,
            "stats": stats
        })
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return JSONResponse(content={
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            "message": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        })

from typing import Dict, Any
class ActionAdjustRequest(BaseModel):
    user_id: Optional[str] = "default"
    action: str
    context_entities: Optional[Dict[str, Any]] = None

@app.post("/api/actions/adjust-filters")
async def adjust_filters(request: ActionAdjustRequest):
    """–û—Å–ª–∞–±–ª—è–µ—Ç/–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    try:
        action = (request.action or '').lower()
        from modules.search.auto_search_processor import AutoSearchProcessor
        from database import search_all_cars
        proc = AutoSearchProcessor()
        entities = request.context_entities or {}
        # –ú—è–≥–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ action
        if 'remove_color' in action:
            entities.pop('color', None)
        if 'similar' in action:
            # –°–Ω–∏–∑–∏–º —Å—Ç—Ä–æ–≥–æ—Å—Ç—å: —É–±–µ—Ä–µ–º —Å–∞–º—ã–µ —É–∑–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
            for k in ['color', 'body_type', 'power_from']:
                entities.pop(k, None)
        if 'expand_body_type' in action:
            body = entities.get('body_type')
            if isinstance(body, str):
                entities['body_type'] = [body, '—Å–µ–¥–∞–Ω', '–∫—É–ø–µ', '–ª–∏—Ñ—Ç–±–µ–∫']
        if 'increase_price' in action:
            if entities.get('price_to'):
                try:
                    entities['price_to'] = int(float(entities['price_to']) * 1.15)
                except Exception:
                    pass
        if 'expand_year' in action:
            if entities.get('year_from'):
                entities['year_from'] = max(2000, int(entities['year_from']) - 2)
            if entities.get('year_to'):
                entities['year_to'] = int(entities['year_to']) + 2
        if 'decrease_power' in action:
            if entities.get('power_from'):
                entities['power_from'] = max(0, int(entities['power_from']) - 50)
        if 'expand_city' in action:
            entities.pop('city', None)
        if 'brand_only_models' in action:
            if entities.get('brand') and entities.get('model'):
                entities.pop('model', None)
        # –í—ã–ø–æ–ª–Ω–∏–º –ø–æ–∏—Å–∫
        results = search_all_cars(**proc._build_search_params(entities))
        
        return JSONResponse(content={
            "success": True,
            "type": "search_results",
            "message": proc._generate_response_message("", entities, len(results)),
            "cars": proc._format_cars(results),
            "entities": entities
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ adjust-filters: {e}")
        return JSONResponse(content={
            "success": False, 
            "error": "–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"
        })

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host="0.0.0.0", port=5000, reload=True) 