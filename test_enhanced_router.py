#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from enhanced_query_router import EnhancedQueryRouter, QueryType
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_enhanced_router():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    router = EnhancedQueryRouter()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ ABS?", QueryType.AUTOMOTIVE_QUESTION),
        ("–û–±—ä—è—Å–Ω–∏ —á—Ç–æ —Ç–∞–∫–æ–µ —Ç—É—Ä–±–æ–Ω–∞–¥–¥—É–≤", QueryType.AUTOMOTIVE_QUESTION),
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ –≥–∏–±—Ä–∏–¥–Ω—ã–π –¥–≤–∏–≥–∞—Ç–µ–ª—å?", QueryType.AUTOMOTIVE_QUESTION),
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏—è
        ("–ß—Ç–æ –ª—É—á—à–µ: –±–µ–Ω–∑–∏–Ω –∏–ª–∏ –≥–∞–∑?", QueryType.AUTOMOTIVE_COMPARISON),
        ("–°—Ä–∞–≤–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç –∏ –º–µ—Ö–∞–Ω–∏–∫—É", QueryType.AUTOMOTIVE_COMPARISON),
        ("–ß—Ç–æ –ª—É—á—à–µ: BMW –∏–ª–∏ Mercedes?", QueryType.AUTOMOTIVE_COMPARISON),
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        ("–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∞–≤—Ç–æ –¥–ª—è —Å–µ–º—å–∏", QueryType.AUTOMOTIVE_RECOMMENDATION),
        ("–ö–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –≥–æ—Ä–æ–¥–∞?", QueryType.AUTOMOTIVE_RECOMMENDATION),
        ("–ü–æ—Å–æ–≤–µ—Ç—É–π —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å", QueryType.AUTOMOTIVE_RECOMMENDATION),
        
        # –ü–æ–º–æ—â—å
        ("–ö–∞–∫ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", QueryType.AUTOMOTIVE_HELP),
        ("–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å –º–∞—à–∏–Ω—É", QueryType.AUTOMOTIVE_HELP),
        ("–ß—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∞–≤—Ç–æ?", QueryType.AUTOMOTIVE_HELP),
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–º–æ—â—å
        ("–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", QueryType.SYSTEM_HELP),
        ("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö", QueryType.SYSTEM_HELP),
        ("–ö—Ç–æ —Ç—ã?", QueryType.SYSTEM_HELP),
        
        # –û–±—â–∏–π —á–∞—Ç
        ("–ü—Ä–∏–≤–µ—Ç", QueryType.GENERAL_CHAT),
        ("–ö–∞–∫ –¥–µ–ª–∞?", QueryType.GENERAL_CHAT),
        ("–°–ø–∞—Å–∏–±–æ", QueryType.GENERAL_CHAT),
        
        # –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        ("–ù–∞–π–¥–∏ –∫—Ä–∞—Å–Ω—ã–π BMW", QueryType.AUTOMOTIVE_SEARCH),
        ("–ü–æ–∫–∞–∂–∏ –º–∞—à–∏–Ω—ã –¥–æ 2 –º–ª–Ω", QueryType.AUTOMOTIVE_SEARCH),
        ("–ò—â—É —Å–µ–¥–∞–Ω 2020 –≥–æ–¥–∞", QueryType.AUTOMOTIVE_SEARCH),
        
        # –ö—Ä–µ–¥–∏—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        ("–†–∞—Å—Å—á–∏—Ç–∞–π –∫—Ä–µ–¥–∏—Ç –Ω–∞ 2 –º–ª–Ω", QueryType.CREDIT_CALCULATION),
        ("–ö—Ä–µ–¥–∏—Ç–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", QueryType.CREDIT_CALCULATION),
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –†–û–£–¢–ï–†–ê")
    print("=" * 60)
    
    correct_classifications = 0
    total_tests = len(test_queries)
    
    for query, expected_type in test_queries:
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å: '{query}'")
        print(f"üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø: {expected_type.value}")
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        actual_type = router.classifier.classify_query(query)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–∏–ø: {actual_type.value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if actual_type == expected_type:
            print("‚úÖ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ü–†–ê–í–ò–õ–¨–ù–ê–Ø")
            correct_classifications += 1
        else:
            print("‚ùå –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
        try:
            result = router.route_query(query, "test_user")
            print(f"üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {result.get('type', 'unknown')}")
            print(f"ü§ñ Llama –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {result.get('llama_used', False)}")
            print(f"üß† Mistral –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {result.get('mistral_used', False)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        
        print("-" * 40)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    accuracy = (correct_classifications / total_tests) * 100
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {correct_classifications}/{total_tests}")
    print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    
    if accuracy >= 80:
        print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
    elif accuracy >= 60:
        print("üëç –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
    else:
        print("‚ö†Ô∏è –ù–£–ñ–ù–û –£–õ–£–ß–®–ò–¢–¨ –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Æ")

def test_mistral_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Mistral API"""
    
    print("\nüß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° MISTRAL")
    print("=" * 60)
    
    try:
        from mistral_service import generate_mistral_response
        
        test_prompts = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ ABS –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ?",
            "–ß—Ç–æ –ª—É—á—à–µ: –±–µ–Ω–∑–∏–Ω –∏–ª–∏ –¥–∏–∑–µ–ª—å?",
            "–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π —Å–µ–º–µ–π–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"
        ]
        
        for prompt in test_prompts:
            print(f"\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{prompt}'")
            try:
                response = generate_mistral_response(prompt)
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response[:100]}...")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
    except ImportError as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å mistral_service: {e}")

if __name__ == "__main__":
    test_enhanced_router()
    test_mistral_integration()