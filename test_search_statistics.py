#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
"""

import requests
import json

def test_search_statistics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    
    test_queries = [
        "–ù–∞–π–¥–∏ BMW X5",
        "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –¥–æ 5 –º–ª–Ω",
        "–ò—â—É –∫—Ä–æ—Å—Å–æ–≤–µ—Ä—ã 2024 –≥–æ–¥–∞",
        "–ù—É–∂–µ–Ω –¥–∏–∑–µ–ª—å–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫",
        "–ü–æ–∫–∞–∂–∏ –≤—Å–µ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
    ]
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê –° –°–¢–ê–¢–ò–°–¢–ò–ö–û–ô")
    print("=" * 60)
    
    for i, query in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: '{query}'")
        print("-" * 40)
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º v4 —Ä–æ—É—Ç–µ—Ä
            response = requests.post("http://localhost:5000/api/enhanced-chat-v4", json={
                "message": query,
                "user_id": "test_user"
            })
            
            if response.status_code == 200:
                data = response.json()
                
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {data.get('success', False)}")
                print(f"üìä –¢–∏–ø: {data.get('type', 'unknown')}")
                print(f"üî¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {data.get('total_found', 0)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = data.get('statistics', {})
                if stats:
                    print(f"üìà –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–æ–∫: {len(stats.get('unique_brands', []))}")
                    print(f"üè∑Ô∏è –ú–∞—Ä–∫–∏: {', '.join(stats.get('unique_brands', []))}")
                    
                    top_cars = stats.get('top_cars_by_brand', [])
                    if top_cars:
                        print("üöó –¢–æ–ø –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –º–∞—Ä–∫–∞–º:")
                        for item in top_cars:
                            car = item['car']
                            print(f"  ‚Ä¢ {item['brand']} {car.get('model', '')} ({car.get('manufacture_year', '')}) - {car.get('price', 0):,.0f} —Ä—É–±")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                message = data.get('message', '')
                if message:
                    print(f"\nüí¨ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                    print(f"   {message[:200]}{'...' if len(message) > 200 else ''}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
                version = data.get('version', 'unknown')
                features = data.get('features', [])
                print(f"\nüîß –í–µ—Ä—Å–∏—è: {version}")
                if features:
                    print(f"‚ú® –§—É–Ω–∫—Ü–∏–∏: {', '.join(features)}")
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 40)

def test_database_statistics():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é"""
    
    print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò")
    print("=" * 60)
    
    try:
        from database import search_all_cars, get_search_statistics
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ BMW
        print("1. –ü–æ–∏—Å–∫ BMW...")
        cars = search_all_cars(brand="BMW")
        stats = get_search_statistics(cars)
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {stats['total_count']} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–æ–∫: {len(stats['unique_brands'])}")
        print(f"   –ú–∞—Ä–∫–∏: {', '.join(stats['unique_brands'])}")
        
        if stats['top_cars_by_brand']:
            print("   –¢–æ–ø –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:")
            for item in stats['top_cars_by_brand']:
                car = item['car']
                print(f"     ‚Ä¢ {item['brand']} {car.get('model', '')} - {car.get('price', 0):,.0f} —Ä—É–±")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ
        print("\n2. –ü–æ–∏—Å–∫ –¥–æ 5 –º–ª–Ω...")
        cars = search_all_cars(price_to=5000000)
        stats = get_search_statistics(cars)
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ: {stats['total_count']} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ä–æ–∫: {len(stats['unique_brands'])}")
        print(f"   –ú–∞—Ä–∫–∏: {', '.join(stats['unique_brands'])}")
        
        if stats['top_cars_by_brand']:
            print("   –¢–æ–ø –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:")
            for item in stats['top_cars_by_brand']:
                car = item['car']
                print(f"     ‚Ä¢ {item['brand']} {car.get('model', '')} - {car.get('price', 0):,.0f} —Ä—É–±")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ë–î: {e}")

if __name__ == "__main__":
    test_database_statistics()
    test_search_statistics()
