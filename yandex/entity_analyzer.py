#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å YandexGPT
"""

import re
import logging
from typing import Dict, List, Optional, Any, Tuple

logger = logging.getLogger("entity_analyzer")

class EntityAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å—É—â–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
        # –°–ª–æ–≤–∞—Ä—å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–∞—Ä–æ–∫
        self.brands = {
            'bmw': 'BMW', '–º–µ—Ä—Å–µ–¥–µ—Å': 'Mercedes', 'mercedes': 'Mercedes',
            'audi': 'Audi', 'ford': 'Ford', '–ª–∞–¥–∞': 'Lada', 'lada': 'Lada',
            'toyota': 'Toyota', '—Ç–æ–π–æ—Ç–∞': 'Toyota', 'volkswagen': 'Volkswagen',
            'vw': 'Volkswagen', 'volvo': 'Volvo', 'lexus': 'Lexus',
            'honda': 'Honda', 'nissan': 'Nissan', 'mazda': 'Mazda',
            'subaru': 'Subaru', 'mitsubishi': 'Mitsubishi', 'hyundai': 'Hyundai',
            'kia': 'Kia', 'skoda': 'Skoda', 'seat': 'Seat', 'renault': 'Renault',
            'peugeot': 'Peugeot', 'citroen': 'Citroen', 'opel': 'Opel',
            'fiat': 'Fiat', 'alfa romeo': 'Alfa Romeo', 'jaguar': 'Jaguar',
            'land rover': 'Land Rover', 'range rover': 'Range Rover',
            'porsche': 'Porsche', 'ferrari': 'Ferrari', 'lamborghini': 'Lamborghini',
            'maserati': 'Maserati', 'bentley': 'Bentley', 'rolls royce': 'Rolls Royce',
            'aston martin': 'Aston Martin', 'mclaren': 'McLaren', 'bugatti': 'Bugatti',
            'koenigsegg': 'Koenigsegg', 'pagani': 'Pagani', 'chery': 'Chery',
            'geely': 'Geely', 'haval': 'Haval', 'great wall': 'Great Wall',
            'changan': 'Changan', 'byd': 'BYD', 'nio': 'NIO', 'xpeng': 'XPeng',
            'li auto': 'Li Auto', 'wuling': 'Wuling', 'hongqi': 'Hongqi'
        }
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.car_keywords = [
            '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å', '–∞–≤—Ç–æ', '—Ç–∞—á–∫–∞', '–∫–æ–ª–µ—Å–∞',
            '–∫—É–ø–∏—Ç—å', '–ø—Ä–æ–¥–∞—Ç—å', '–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–≤—ã–±–æ—Ä',
            '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–±—é–¥–∂–µ—Ç', '–¥–æ—Ä–æ–≥–æ', '–¥–µ—à–µ–≤–æ',
            '–Ω–æ–≤—ã–π', '–±/—É', '–ø–æ–¥–µ—Ä–∂–∞–Ω–Ω—ã–π', '—Å –ø—Ä–æ–±–µ–≥–æ–º',
            '–≥–æ–¥', '–≤–æ–∑—Ä–∞—Å—Ç', '–ø—Ä–æ–±–µ–≥', '–∫–∏–ª–æ–º–µ—Ç—Ä–∞–∂',
            '—Ü–≤–µ—Ç', '–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–±–µ–ª—ã–π', '—á–µ—Ä–Ω—ã–π',
            '—Ç–æ–ø–ª–∏–≤–æ', '–±–µ–Ω–∑–∏–Ω', '–¥–∏–∑–µ–ª—å', '—ç–ª–µ–∫—Ç—Ä–æ', '–≥–∏–±—Ä–∏–¥',
            '–∫—É–∑–æ–≤', '—Å–µ–¥–∞–Ω', '–≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫', '—Ö—ç—Ç—á–±–µ–∫', '—É–Ω–∏–≤–µ—Ä—Å–∞–ª',
            '–∫–æ—Ä–æ–±–∫–∞', '–∞–≤—Ç–æ–º–∞—Ç', '–º–µ—Ö–∞–Ω–∏–∫–∞', '—Ä–æ–±–æ—Ç',
            '–ø—Ä–∏–≤–æ–¥', '–ø–µ—Ä–µ–¥–Ω–∏–π', '–∑–∞–¥–Ω–∏–π', '–ø–æ–ª–Ω—ã–π',
            '–≥–æ—Ä–æ–¥', '–º–æ—Å–∫–≤–∞', '—Å–ø–±', '—Ä–æ—Å—Ç–æ–≤', '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä'
        ]
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.general_keywords = [
            '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–∫–∞–∫ –¥–µ–ª–∞', '–ø–æ–º–æ—â—å', '–ø–æ–º–æ–≥–∏',
            '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '—Ñ—É–Ω–∫—Ü–∏–∏',
            '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ',
            '–ø–æ–≥–æ–¥–∞', '–≤—Ä–µ–º—è', '–¥–∞—Ç–∞', '–∫–∞–ª–µ–Ω–¥–∞—Ä—å',
            '—à—É—Ç–∫–∞', '–∞–Ω–µ–∫–¥–æ—Ç', '—Ä–∞—Å—Å–∫–∞–∂–∏', '–æ–±—ä—è—Å–Ω–∏'
        ]
    
    def analyze_entities(self, query: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ –∑–∞–ø—Ä–æ—Å–µ"""
        query_lower = query.lower()
        
        # –ò—â–µ–º –º–∞—Ä–∫–∏
        found_brands = []
        for brand_key, brand_name in self.brands.items():
            if brand_key in query_lower:
                found_brands.append(brand_name)
        
        # –ò—â–µ–º –º–æ–¥–µ–ª–∏ (–ø–æ—Å–ª–µ –º–∞—Ä–∫–∏)
        found_models = []
        for brand in found_brands:
            brand_lower = brand.lower()
            query_after_brand = query_lower.replace(brand_lower, '').strip()
            if query_after_brand:
                words = query_after_brand.split()
                if words:
                    potential_model = words[0]
                    if len(potential_model) > 1:
                        found_models.append(potential_model.title())
        
        # –ò—â–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        car_keywords_found = []
        for keyword in self.car_keywords:
            if keyword in query_lower:
                car_keywords_found.append(keyword)
        
        # –ò—â–µ–º –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        general_keywords_found = []
        for keyword in self.general_keywords:
            if keyword in query_lower:
                general_keywords_found.append(keyword)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        query_type = self._determine_query_type(found_brands, found_models, car_keywords_found, general_keywords_found)
        
        return {
            'brands': found_brands,
            'models': found_models,
            'car_keywords': car_keywords_found,
            'general_keywords': general_keywords_found,
            'query_type': query_type,
            'entities_count': len(found_brands) + len(found_models) + len(car_keywords_found),
            'has_car_entities': len(found_brands) > 0 or len(found_models) > 0 or len(car_keywords_found) > 0
        }
    
    def _determine_query_type(self, brands: List[str], models: List[str], car_keywords: List[str], general_keywords: List[str]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–∞—Ä–∫–∏ –∏–ª–∏ –º–æ–¥–µ–ª–∏ - —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if brands or models:
            return 'car_specific'
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - —ç—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if car_keywords:
            return 'car_general'
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ - —ç—Ç–æ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
        if general_keywords:
            return 'general'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        return 'general'
    
    def should_use_yandex_gpt(self, query: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å YandexGPT –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
        entities = self.analyze_entities(query)
        
        # –ï—Å–ª–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π 0 - —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ YandexGPT
        if entities['entities_count'] == 0:
            logger.info(f"üîç –°—É—â–Ω–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º YandexGPT –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
            return True
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º YandexGPT
        if entities['query_type'] == 'general':
            logger.info(f"üîç –û–±—â–∏–π –∑–∞–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É–µ–º YandexGPT: {query}")
            return True
        
        # –î–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.info(f"üîç –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å—É—â–Ω–æ—Å—Ç—è–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É: {query}")
        return False
    
    def extract_brand_model(self, query: str) -> Tuple[Optional[str], Optional[str]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞"""
        entities = self.analyze_entities(query)
        
        brand = entities['brands'][0] if entities['brands'] else None
        model = entities['models'][0] if entities['models'] else None
        
        return brand, model

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
entity_analyzer = EntityAnalyzer()

def get_entity_analyzer() -> EntityAnalyzer:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    return entity_analyzer 