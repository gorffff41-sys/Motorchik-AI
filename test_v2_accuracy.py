#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ v2.0 - —Ü–µ–ª—å 90% —Ç–æ—á–Ω–æ—Å—Ç–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from enhanced_query_router_v2 import EnhancedQueryRouterV2, QueryType
from enhanced_test_queries import get_enhanced_test_queries, get_statistics
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_v2_accuracy():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ v2.0"""
    
    router = EnhancedQueryRouterV2()
    test_queries = get_enhanced_test_queries()
    
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï V2.0 –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–Ø 90% –¢–û–ß–ù–û–°–¢–ò")
    print("=" * 70)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    stats = get_statistics()
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–û–í–´–• –ó–ê–ü–†–û–°–û–í:")
    for query_type, count in stats.items():
        print(f"  {query_type.value}: {count} –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"  –û–ë–©–ï–ï –ö–û–õ–ò–ß–ï–°–¢–í–û: {len(test_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤\n")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    results_by_type = {}
    correct_by_type = {}
    
    for query_type in QueryType:
        results_by_type[query_type] = 0
        correct_by_type[query_type] = 0
    
    total_correct = 0
    total_tests = len(test_queries)
    
    print("üß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 70)
    
    errors = []
    
    for i, (query, expected_type) in enumerate(test_queries, 1):
        # expected_type —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º QueryType
            
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        actual_type = router.classifier.classify_query(query)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        results_by_type[expected_type] += 1
        if actual_type == expected_type:
            correct_by_type[expected_type] += 1
            total_correct += 1
        else:
            errors.append((i, query, expected_type, actual_type))
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
    for i, query, expected, actual in errors:
        print(f"‚ùå {i:2d}. '{query}'")
        print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {expected.value}")
        print(f"    –ü–æ–ª—É—á–µ–Ω–æ:  {actual.value}")
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accuracy = (total_correct / total_tests) * 100
    
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 70)
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {total_correct}/{total_tests}")
    print(f"üìä –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    
    if accuracy >= 90:
        print("üéâ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! –¢–æ—á–Ω–æ—Å—Ç—å >= 90%")
    elif accuracy >= 85:
        print("üëç –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ—á–Ω–æ—Å—Ç—å >= 85%")
    elif accuracy >= 80:
        print("‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ—á–Ω–æ—Å—Ç—å >= 80%")
    else:
        print("‚ö†Ô∏è –ù–£–ñ–ù–û –£–õ–£–ß–®–ò–¢–¨! –¢–æ—á–Ω–æ—Å—Ç—å < 80%")
    
    print("\nüìä –¢–û–ß–ù–û–°–¢–¨ –ü–û –¢–ò–ü–ê–ú –ó–ê–ü–†–û–°–û–í:")
    print("-" * 70)
    
    for query_type in QueryType:
        if results_by_type[query_type] > 0:
            type_accuracy = (correct_by_type[query_type] / results_by_type[query_type]) * 100
            status = "‚úÖ" if type_accuracy >= 80 else "‚ö†Ô∏è" if type_accuracy >= 60 else "‚ùå"
            print(f"{status} {query_type.value:25s}: {correct_by_type[query_type]:2d}/{results_by_type[query_type]:2d} ({type_accuracy:5.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–∏–ø–æ–≤
    print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –¢–ò–ü–û–í:")
    print("-" * 70)
    
    problem_types = []
    for query_type in QueryType:
        if results_by_type[query_type] > 0:
            type_accuracy = (correct_by_type[query_type] / results_by_type[query_type]) * 100
            if type_accuracy < 80:
                problem_types.append((query_type, type_accuracy))
    
    if problem_types:
        for query_type, accuracy in sorted(problem_types, key=lambda x: x[1]):
            print(f"‚ö†Ô∏è {query_type.value}: {accuracy:.1f}% —Ç–æ—á–Ω–æ—Å—Ç—å")
    else:
        print("‚úÖ –í—Å–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å!")
    
    return accuracy, errors

def analyze_errors(errors):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if not errors:
        print("\nüéâ –û–®–ò–ë–û–ö –ù–ï–¢! –ò–¥–µ–∞–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è!")
        return
    
    print(f"\nüîç –ê–ù–ê–õ–ò–ó {len(errors)} –û–®–ò–ë–û–ö:")
    print("-" * 70)
    
    error_patterns = {}
    for i, query, expected, actual in errors:
        pattern = f"{expected.value} -> {actual.value}"
        if pattern not in error_patterns:
            error_patterns[pattern] = []
        error_patterns[pattern].append(query)
    
    for pattern, queries in error_patterns.items():
        print(f"\nüìã {pattern} ({len(queries)} –æ—à–∏–±–æ–∫):")
        for query in queries[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
            print(f"  - '{query}'")
        if len(queries) > 3:
            print(f"  ... –∏ –µ—â–µ {len(queries) - 3}")

if __name__ == "__main__":
    accuracy, errors = test_v2_accuracy()
    analyze_errors(errors)
    
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨ V2.0: {accuracy:.1f}%")
    
    if accuracy >= 90:
        print("üèÜ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê! –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å 90% —Ç–æ—á–Ω–æ—Å—Ç–∏!")
    else:
        print(f"üìà –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –Ω–∞ {90 - accuracy:.1f}% –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
