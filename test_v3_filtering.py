#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –¥–ª—è v3.0 - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from enhanced_query_router_v3 import EnhancedQueryRouterV3, QueryType
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_v3_filtering():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–µ–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    router = EnhancedQueryRouterV3()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        # –ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–´–ï (–¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è)
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ ABS?", QueryType.AUTOMOTIVE_QUESTION, True),
        ("–ù–∞–π–¥–∏ –∫—Ä–∞—Å–Ω—ã–π BMW", QueryType.AUTOMOTIVE_SEARCH, True),
        ("–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π –∞–≤—Ç–æ –¥–ª—è —Å–µ–º—å–∏", QueryType.AUTOMOTIVE_RECOMMENDATION, True),
        ("–ß—Ç–æ –ª—É—á—à–µ: –±–µ–Ω–∑–∏–Ω –∏–ª–∏ –¥–∏–∑–µ–ª—å?", QueryType.AUTOMOTIVE_COMPARISON, True),
        ("–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", QueryType.AUTOMOTIVE_HELP, True),
        ("–†–∞—Å—Å—á–∏—Ç–∞–π –∫—Ä–µ–¥–∏—Ç –Ω–∞ 2 –º–ª–Ω", QueryType.CREDIT_CALCULATION, True),
        
        # –°–ò–°–¢–ï–ú–ù–ê–Ø –ü–û–ú–û–©–¨ (–¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è)
        ("–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", QueryType.SYSTEM_HELP, True),
        ("–ö—Ç–æ —Ç—ã?", QueryType.SYSTEM_HELP, True),
        ("–ü–æ–º–æ—â—å", QueryType.SYSTEM_HELP, True),
        
        # –ë–ê–ó–û–í–û–ï –û–ë–©–ï–ù–ò–ï (–¥–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è)
        ("–ü—Ä–∏–≤–µ—Ç", QueryType.GENERAL_CHAT, True),
        ("–ö–∞–∫ –¥–µ–ª–∞?", QueryType.GENERAL_CHAT, True),
        ("–°–ø–∞—Å–∏–±–æ", QueryType.GENERAL_CHAT, True),
        ("–ü–æ–∫–∞", QueryType.GENERAL_CHAT, True),
        ("–•–æ—Ä–æ—à–æ", QueryType.GENERAL_CHAT, True),
        
        # –ù–ï–ê–í–¢–û–ú–û–ë–ò–õ–¨–ù–´–ï (–¥–æ–ª–∂–Ω—ã –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è)
        ("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ–≥–æ–¥—É", QueryType.NON_AUTOMOTIVE, False),
        ("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?", QueryType.NON_AUTOMOTIVE, False),
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞?", QueryType.NON_AUTOMOTIVE, False),
        ("–ü–æ–º–æ–≥–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º", QueryType.NON_AUTOMOTIVE, False),
        ("–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç", QueryType.NON_AUTOMOTIVE, False),
        ("–ö–∞–∫ –¥–µ–ª–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ?", QueryType.NON_AUTOMOTIVE, False),
        ("–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∏–Ω–æ?", QueryType.NON_AUTOMOTIVE, False),
        ("–ö–∞–∫ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π?", QueryType.NON_AUTOMOTIVE, False),
        ("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ–ª–∏—Ç–∏–∫—É", QueryType.NON_AUTOMOTIVE, False),
        ("–ö–∞–∫ –ø–æ—Ö—É–¥–µ—Ç—å?", QueryType.NON_AUTOMOTIVE, False),
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω?", QueryType.NON_AUTOMOTIVE, False),
        ("–ü–æ–º–æ–≥–∏ —Å –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π", QueryType.NON_AUTOMOTIVE, False),
        ("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é", QueryType.NON_AUTOMOTIVE, False),
        ("–ö–∞–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å?", QueryType.NON_AUTOMOTIVE, False),
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å?", QueryType.NON_AUTOMOTIVE, False),
    ]
    
    print("üéØ –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò V3.0")
    print("=" * 60)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ç–∏–ø–∞–º
    results_by_type = {}
    correct_by_type = {}
    
    for query_type in QueryType:
        results_by_type[query_type] = 0
        correct_by_type[query_type] = 0
    
    total_correct = 0
    total_tests = len(test_queries)
    
    print("üß™ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 60)
    
    errors = []
    
    for i, (query, expected_type, should_process) in enumerate(test_queries, 1):
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        actual_type = router.classifier.classify_query(query)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        results_by_type[expected_type] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if actual_type == expected_type:
            correct_by_type[expected_type] += 1
            total_correct += 1
        else:
            errors.append((i, query, expected_type, actual_type, should_process))
    
    # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏
    for i, query, expected, actual, should_process in errors:
        print(f"‚ùå {i:2d}. '{query}'")
        print(f"    –û–∂–∏–¥–∞–ª–æ—Å—å: {expected.value}")
        print(f"    –ü–æ–ª—É—á–µ–Ω–æ:  {actual.value}")
        print(f"    –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è: {'–î–∞' if should_process else '–ù–µ—Ç'}")
        print()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accuracy = (total_correct / total_tests) * 100
    
    print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 60)
    print(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {total_correct}/{total_tests}")
    print(f"üìä –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    
    if accuracy >= 90:
        print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ—á–Ω–æ—Å—Ç—å >= 90%")
    elif accuracy >= 80:
        print("‚úÖ –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –¢–æ—á–Ω–æ—Å—Ç—å >= 80%")
    else:
        print("‚ö†Ô∏è –ù–£–ñ–ù–û –£–õ–£–ß–®–ò–¢–¨! –¢–æ—á–Ω–æ—Å—Ç—å < 80%")
    
    print("\nüìä –¢–û–ß–ù–û–°–¢–¨ –ü–û –¢–ò–ü–ê–ú –ó–ê–ü–†–û–°–û–í:")
    print("-" * 60)
    
    for query_type in QueryType:
        if results_by_type[query_type] > 0:
            type_accuracy = (correct_by_type[query_type] / results_by_type[query_type]) * 100
            status = "‚úÖ" if type_accuracy >= 80 else "‚ö†Ô∏è" if type_accuracy >= 60 else "‚ùå"
            print(f"{status} {query_type.value:25s}: {correct_by_type[query_type]:2d}/{results_by_type[query_type]:2d} ({type_accuracy:5.1f}%)")
    
    return accuracy, errors

def test_router_responses():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã —Ä–æ—É—Ç–µ—Ä–∞ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    router = EnhancedQueryRouterV3()
    
    print("\nüîß –¢–ï–°–¢ –û–¢–í–ï–¢–û–í –†–û–£–¢–ï–†–ê:")
    print("=" * 60)
    
    test_queries = [
        # –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ
        "–ß—Ç–æ —Ç–∞–∫–æ–µ ABS?",
        "–ù–∞–π–¥–∏ –∫—Ä–∞—Å–Ω—ã–π BMW",
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–æ–º–æ—â—å
        "–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?",
        
        # –ë–∞–∑–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ
        "–ü—Ä–∏–≤–µ—Ç",
        
        # –ù–µ–∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ
        "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–æ–≥–æ–¥—É",
        "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?"
    ]
    
    for query in test_queries:
        result = router.route_query(query)
        print(f"\nüìù –ó–∞–ø—Ä–æ—Å: '{query}'")
        print(f"   –¢–∏–ø: {result['type']}")
        print(f"   –û—Ç–∫–ª–æ–Ω–µ–Ω: {result.get('rejected', False)}")
        print(f"   Mistral: {result['mistral_used']}")
        if result.get('rejected'):
            print(f"   –û—Ç–≤–µ—Ç: {result['message'][:100]}...")
        print("-" * 40)

if __name__ == "__main__":
    accuracy, errors = test_v3_filtering()
    test_router_responses()
    
    print(f"\nüéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –¢–û–ß–ù–û–°–¢–¨ V3.0: {accuracy:.1f}%")
    
    if accuracy >= 90:
        print("üèÜ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
    else:
        print("üìà –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é")
